{
  "entries": [
    {
      "type": "Heading",
      "level": "H1",
      "title": "Shopping Distributed Spring Boot Demo using REST Synchronous communication"
    },
    {
      "type": "Markdown",
      "contents": [
        "A simple distributed application that has two components, each deployed as a",
        "separate Java application.",
        "",
        "- Catalogue",
        "- Cart (shopping cart)",
        "",
        "The _Cart_ component depends on information available in the _Catalogue_",
        "component, such as the catalogue item’s _id_ and, _caption_. The components are",
        "connected through a synchronous REST API. The _Cart_ component depends on the",
        "_Catalogue_, and it cannot run independently. Both components are required for",
        "the _Cart_ component to function as expected.",
        "",
        "This distributed application gives up _partition tolerance_ and _availability_",
        "in favour of _consistency_. Other tradeoffs are also valid, but not explored",
        "here."
      ]
    },
    {
      "type": "Heading",
      "level": "H2",
      "title": "Observability"
    },
    {
      "type": "Markdown",
      "contents": [
        "One of the main challenges of any distributed system is observability. This",
        "example also covers this topic through",
        "[OpenTelemetry](https://opentelemetry.io/). Traces, Metrics, and Logs are",
        "captured from all applications and collected into one place, the OpenTelemetry",
        "Collector. We can use various tools to observe some or all the data, such as",
        "",
        "| Category | Name                                          | URL                                               |",
        "| -------- | --------------------------------------------- | ------------------------------------------------- |",
        "| Traces   | [Jaeger](https://www.jaegertracing.io/)       | [http://localhost:16686](http://localhost:16686)  |",
        "| Traces   | [Zipkin](https://zipkin.io/)                  | [http://localhost:9411](http://localhost:9411)    |",
        "| Metrics  | [Prometheus](https://prometheus.io/)          | [http://localhost:9090](http://localhost:9090)    |",
        "| Logs     | [Grafana Loki](https://grafana.com/oss/loki/) | Cannot access this directly. Use Grafana instead. |",
        "| All      | [Grafana](https://grafana.com/)               | [http://localhost:3000](http://localhost:3000)    |",
        "",
        "The following image shows how these components are connected together.",
        "",
        "![OpenTelemetry Architecture](./assets/images/OpenTelemetry%20Architecture.png)",
        "",
        "To simplify the setup, all these components are defined as services within a",
        "`docker-compose.yml` file."
      ]
    },
    {
      "type": "DisplayFile",
      "path": "./containers/docker-compose.yml"
    },
    {
      "type": "Markdown",
      "contents": [
        "Note that this is just a demo; **none of this configuration is ",
        "production-ready**. Please consult the respective tools and technologies for ",
        "information on setting these up in a production environment."
      ]
    },
    {
      "type": "Markdown",
      "contents": [
        "OpenTelemetry provides an easy and non-invasive way to collect observability",
        "data from the application’s components. In this example we are using",
        "[Spring Boot](https://spring.io/projects/spring-boot) together with the",
        "[OpenTelemetry Spring Boot Starter project](https://opentelemetry.io/docs/zero-code/java/spring-boot-starter/),",
        "as shown next"
      ]
    },
    {
      "type": "DisplayFile",
      "path": "./catalogue/pom.xml",
      "from_line": 68,
      "number_of_lines": 11
    },
    {
      "type": "Markdown",
      "contents": [
        "In order to take full advantage from the `opentelemetry-jdbc`, we must use the",
        "OpenTelemetry JDBC driver",
        "(`io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver`) and connection URL",
        "(`jdbc:otel:h2:mem:demo-catalogue;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;MODE=MYSQL`) ",
        "as shown below."
      ]
    },
    {
      "type": "DisplayFile",
      "path": "./catalogue/src/main/resources/application.yml",
      "from_line": 5,
      "number_of_lines": 4
    },
    {
      "type": "Markdown",
      "contents": [
        "No further code changes are needed to get started with OpenTelemetry, as we are",
        "taking advantage of the fact that the",
        "[OpenTelemetry Collector](https://opentelemetry.io/docs/collector/) will be",
        "running on the same machine where the demo is. In a production environment, one",
        "will have to configure where the OpenTelemetry collector is so that the",
        "component will know where to send the data together with other information.",
        "",
        "Finally, the logs of this application were turned down to `DEBUG` for",
        "`org.springframework.web` package to generate logs."
      ]
    },
    {
      "type": "DisplayFile",
      "from_line": 20,
      "number_of_lines": 3,
      "path": "./catalogue/src/main/resources/application.yml"
    },
    {
      "type": "Markdown",
      "contents": [
        "This is not advisable for production systems as it can generate a large amount",
        "logs. We are setting this to `DEBUG` so that we can later on see the logs that",
        "the applications emit in one place."
      ]
    },
    {
      "type": "Heading",
      "level": "H2",
      "title": "Preloaded data"
    },
    {
      "type": "Markdown",
      "contents": [
        "To keep things simple, we’ll use the",
        "[H2](https://www.h2database.com/html/main.html) in-memory database preloaded",
        "with the following data:",
        "",
        "- **Catalog Items**",
        "",
        "  | `id` | `caption`     | `description`                                                         |",
        "  | ---: | ------------- | --------------------------------------------------------------------- |",
        "  |    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "  |    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "  |    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "  |    4 | Mug           | The ideal way to start the day                                        |",
        "  |    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |",
        "",
        "- **Carts**",
        "",
        "  | `id` |",
        "  | ---: |",
        "  |    1 |",
        "  |    2 |",
        "  |    3 |",
        "",
        "- **Cart Items**",
        "",
        "  | `cart_id` | `item_id` | `quantity` |",
        "  | --------: | --------: | ---------: |",
        "  |         1 |         1 |          1 |",
        "  |         1 |         5 |          1 |",
        "  |         2 |         2 |          1 |",
        "  |         2 |         3 |          6 |",
        "  |         3 |         4 |          4 |",
        "",
        "The `cart_id` and `item_id` in the cart items table are (not enforced) foreign",
        "keys to the cart and catalogue item tables/databases, respectively."
      ]
    },
    {
      "type": "Heading",
      "level": "H2",
      "title": "Prerequisites"
    },
    {
      "type": "Markdown",
      "contents": [
        "- [Oracle Java 21](https://www.oracle.com/java/technologies/downloads/#java21)",
        "  to build and run the application",
        "- Container runtime, such as [Colima](https://github.com/abiosoft/colima), with",
        "  [docker compose](https://docs.docker.com/compose/) support to start the",
        "  observability stack"
      ]
    },
    {
      "type": "Heading",
      "level": "H2",
      "title": "Run the example"
    },
    {
      "type": "Markdown",
      "contents": [
        "1. **Start the observability stack**",
        "",
        "   This example uses various technologies and tools to demonstrate how to",
        "   holistically view a distributed application comprising multiple components.",
        "   Metrics, traces, and logs are collected from all components by the",
        "   OpenTelemetry Collector and then accessed by several other tools, as shown",
        "   below.",
        "",
        "   ![OpenTelemetry Architecture](./assets/images/OpenTelemetry%20Architecture.png)",
        "",
        "   Note that this is just a demo; **none of this configuration is",
        "   production-ready**. Please consult the respective tools and technologies for",
        "   information on setting these up in a production environment.",
        "",
        "   Start the observability stack"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Start the observability stack",
        "docker-compose --file 'containers/docker-compose.yml' up --detach",
        "",
        "# Wait for Grafana to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:3000/login')\" -ne '200' ]",
        "do",
        "  echo 'Waiting for the observability stack to start'",
        "  sleep 1",
        "done"
      ],
      "on_failure_commands": [
        "docker-compose --file 'containers/docker-compose.yml' down"
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   (_Optional_) Access each service",
        "",
        "   | Category | Name                                          | URL                                               |",
        "   | -------- | --------------------------------------------- | ------------------------------------------------- |",
        "   | Traces   | [Jaeger](https://www.jaegertracing.io/)       | [http://localhost:16686](http://localhost:16686)  |",
        "   | Traces   | [Zipkin](https://zipkin.io/)                  | [http://localhost:9411](http://localhost:9411)    |",
        "   | Metrics  | [Prometheus](https://prometheus.io/)          | [http://localhost:9090](http://localhost:9090)    |",
        "   | Logs     | [Grafana Loki](https://grafana.com/oss/loki/) | Cannot access this directly. Use Grafana instead. |",
        "   | All      | [Grafana](https://grafana.com/)               | [http://localhost:3000](http://localhost:3000)    |"
      ]
    },
    {
      "type": "Markdown",
      "contents": [
        "2. **Build all application**",
        "",
        "   This builds both projects, runs the respective tests and then copies the fat",
        "   JAR files into the [`./.demo` directory](./.demo)."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "rm -rf './.demo'",
        "../mvnw clean package"
      ],
      "on_failure_commands": [
        "docker-compose --file 'containers/docker-compose.yml' down"
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   All tests should pass.",
        "",
        "   (_Optional_) Verify that the fat JAR files were all created and copied."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "tree --charset=ascii --dirsfirst --sort=name -L 1 --prune './.demo'"
      ],
      "output": {
        "caption": "The fat JAR files from both projects"
      },
      "on_failure_commands": [
        "docker-compose --file 'containers/docker-compose.yml' down"
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "3. **Run the application**",
        "",
        "   The _Cart_ component depends on the _Catalogue_, thus it is recommended to",
        "   start the _Catalogue_ component first and then start the _Cart_ component.",
        "   While the _Cart_ component starts without the _Catalogue_ component, it will",
        "   fail once a request is made as it depends on the _Catalogue_ component to be",
        "   up and running.",
        "",
        "   The components are started in the background for convenience, and can be",
        "   started in different terminal sessions if preferred.",
        "",
        "   1. Run the _Catalogue_ component (in the background)."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Start the application in the background",
        "java -jar './.demo/demo-shopping-distributed-rest-catalogue-1.0.0.jar' > './.demo/output-catalogue.txt' 2>&1 &",
        "",
        "# Wait for the application to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:8081/catalogue/item/1')\" -ne '200' ]",
        "do",
        "  echo 'Waiting for the Catalogue component to start'",
        "  sleep 1",
        "done"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\"",
        "docker-compose --file 'containers/docker-compose.yml' down"
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "   2. Run the _Cart_ component (in the background)."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Start the application in the background",
        "java -jar './.demo/demo-shopping-distributed-rest-cart-1.0.0.jar' > './.demo/output-cart.txt' 2>&1 &",
        "",
        "# Wait for the application to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:8082/cart/1')\" -ne '200' ]",
        "do",
        "  echo 'Waiting for the Cart component to start'",
        "  sleep 1",
        "done"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\"",
        "docker-compose --file 'containers/docker-compose.yml' down"
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "   Note that both components are running on different ports. Also, the _Cart_",
        "   component is expecting the _Catalogue_ component to be listening on part",
        "   `8081`.",
        "",
        "   | Component   |   Port |",
        "   | ----------- | -----: |",
        "   | _Catalogue_ | `8081` |",
        "   | _Cart_      | `8082` |"
      ]
    },
    {
      "type": "Markdown",
      "contents": [
        "4. **Try the application**",
        "",
        "   By trying the application, we will generate metrics, traces and logs which ",
        "   can then be observed through the observability tools.",
        "",
        "   1. **Request a catalogue item**",
        "",
        "      The database contains the following catalogue items, as shown in the",
        "      following table.",
        "",
        "      | `id` | `caption`     | `description`                                                         |",
        "      | ---: | ------------- | --------------------------------------------------------------------- |",
        "      |    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "      |    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "      |    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "      |    4 | Mug           | The ideal way to start the day                                        |",
        "      |    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "curl --silent 'http://localhost:8081/catalogue/item/1' | jq"
      ],
      "output": {
        "caption": "The catalogue item with id `1`",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\"",
        "docker-compose --file 'containers/docker-compose.yml' down"
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "   2. **Request a cart**",
        "",
        "      The database also contains the following carts, with their respective",
        "      catalogue items and quantities, as shown in the following table.",
        "",
        "      | `cart_id` | `item_id` | `caption`     | `quantity` |",
        "      | --------: | --------: | ------------- | ---------: |",
        "      |         1 |         1 | Leather Sofa  |          1 |",
        "      |         1 |         5 | LED TV        |          1 |",
        "      |         2 |         2 | Wooden Table  |          1 |",
        "      |         2 |         3 | Plastic Chair |          6 |",
        "      |         3 |         4 | Mug           |          4 |"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "curl --silent 'http://localhost:8082/cart/1' | jq"
      ],
      "output": {
        "caption": "The cart item with id `1`",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\"",
        "docker-compose --file 'containers/docker-compose.yml' down"
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "   3. **Add a new catalogue item**",
        "",
        "      Add the following item to the catalogue",
        "",
        "      | Property Name | Value                                   |",
        "      | ------------- | --------------------------------------- |",
        "      | `caption`     | Green Plant                             |",
        "      | `description` | Put a little life in your living room!! |"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Save the response in a file as we will use it later on",
        "curl --silent \\",
        "  -X POST 'http://localhost:8081/catalogue/item' \\",
        "  -H 'Content-Type: application/json' \\",
        "  -d '{\"caption\":\"Green Plant\",\"description\":\"Put a little life in your living room!!\"}' \\",
        "  | jq \\",
        "  > './.demo/new-catalogue-item.json'",
        "",
        "# Print the output",
        "jq . './.demo/new-catalogue-item.json'"
      ],
      "output": {
        "caption": "This will return the newly added catalogue item together with its id.",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\"",
        "docker-compose --file 'containers/docker-compose.yml' down"
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "      Print the new catalogue item id"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Print the new catalogue item id",
        "ITEM_ID=\"$(jq .id './.demo/new-catalogue-item.json')\"",
        "echo \"New catalogue item id: ${ITEM_ID}\""
      ],
      "output": {
        "caption": "The newly created catalogue item id"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\"",
        "docker-compose --file 'containers/docker-compose.yml' down"
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "   4. **Add the new catalogue item to cart**",
        "",
        "      Please note that this depends on the previous step.",
        "",
        "      Fetch the cart details."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "curl --silent 'http://localhost:8082/cart/3' | jq"
      ],
      "output": {
        "caption": "The current cart contents",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\"",
        "docker-compose --file 'containers/docker-compose.yml' down"
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "      Read the new item id obtained from the previous step and fetch the",
        "      catalogue item."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Read the new item id obtained from the previous command",
        "ITEM_ID=\"$(jq .id './.demo/new-catalogue-item.json')\"",
        "",
        "# Fetch the new catalogue item",
        "curl --silent \"http://localhost:8081/catalogue/item/${ITEM_ID}\" | jq"
      ],
      "output": {
        "caption": "The newly created catalogue item",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\"",
        "docker-compose --file 'containers/docker-compose.yml' down"
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "      Add the newly created catalogue item to the cart."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Read the new item id obtained from the previous command",
        "ITEM_ID=\"$(jq .id './.demo/new-catalogue-item.json')\"",
        "",
        "# Add the new item to cart with id 3",
        "curl --silent -X POST \"http://localhost:8082/cart/3/item/${ITEM_ID}\" | jq"
      ],
      "output": {
        "caption": "The cart contents after adding the newly created catalogue item.",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\"",
        "docker-compose --file 'containers/docker-compose.yml' down"
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "5. **Analyse the collected metrics, traces and logs**",
        "",
        "   In this section we will go through all the tools and see how to use them to",
        "   analyse a distributed application as a whole.",
        "",
        "   1. Prometheus (_Metrics_)",
        "",
        "      1. [Access Prometheus (http://localhost:9090/)](http://localhost:9090/).",
        "         In our configuration, no credentials are needed. Needless to say that",
        "         this is not the way one should configure this is a production",
        "         environment. Please refer to the",
        "         [Prometheus security model](https://prometheus.io/docs/operating/security/)",
        "         for more information about how to secure Prometheus.",
        "",
        "         ![Prometheus Landing page](./assets/images/Prometheus%20-%20Landing%20Page.png)",
        "",
        "      2. Filter the metrics that you like to view. In this following example, we",
        "         will use the `http_client_request_duration_seconds_sum`, but any metric",
        "         will do.",
        "",
        "         ![Filter metrics](./assets/images/Prometheus%20-%20Add%20metrics.png)",
        "",
        "   2. Jaeger (_Traces_)",
        "",
        "      1. [Access Jaeger (http://localhost:16686/search)](http://localhost:16686/search).",
        "         In our configuration, no credentials are needed. Needless to say that",
        "         this is not the way one should configure this is a production",
        "         environment. Please refer to the",
        "         [Securing Jaeger Installation](https://www.jaegertracing.io/docs/1.61/security/)",
        "         for more information about how to secure Jaeger.",
        "",
        "         ![Jaeger Landing page](./assets/images/Jaeger%20-%20Landing%20Page.png)",
        "",
        "      2. Select the _Cart_ service from the _Service_ dropdown option, and click",
        "         the _Find Traces_ button.",
        "",
        "         ![Select the Cart service](./assets/images/Jaeger%20-%20Select%20the%20Cart%20service.png)",
        "",
        "      3. Pick one of the traces and click on it to expand it.",
        "",
        "         ![Analyse trace](./assets/images/Jaeger%20-%20Analyse%20trace.png)",
        "",
        "      4. View the",
        "         [System Architecture tab (http://localhost:16686/dependencies)](http://localhost:16686/dependencies)",
        "",
        "         ![System Architecture](./assets/images/Jaeger%20-%20System%20Architecture.png)",
        "",
        "         This will show you a view of how the application communicates. By",
        "         looking at this view, you can have a good overview of all system",
        "         components (that are exporting traces) and who is communicating with",
        "         whom.",
        "",
        "   3. Zipkin (_Traces_)",
        "",
        "      1. [Access Zipkin (http://localhost:9411/zipkin/)](http://localhost:9411/zipkin/).",
        "         In our configuration, no credentials are needed. Needless to say that",
        "         this is not the way one should configure this is a production",
        "         environment. Unfortunately, there is",
        "         [no built-in authentication in the UI](https://zipkin.io/pages/architecture.html)",
        "",
        "         ![Zipkin Landing page](./assets/images/Zipkin%20-%20Landing%20Page.png)",
        "",
        "      2. Click on the gear wheel and adjust the time frame, and then click on the _RUN QUERY_ button.",
        "",
        "         ![Adjust time frame](./assets/images/Zipkin%20-%20Adjust%20time%20frame.png)",
        "",
        "      3. Pick one of the traces and click on the respective _SHOW_ button to expand it.",
        "",
        "         ![Analyse trace](./assets/images/Zipkin%20-%20Analyse%20trace.png)",
        "",
        "      4. View the",
        "         [Dependencies tab (http://localhost:9411/zipkin/dependency)](http://localhost:9411/zipkin/dependency)",
        "",
        "         ![Dependencies](./assets/images/Zipkin%20-%20Dependencies.png)",
        "",
        "         This will show you a view of how the application communicates. By",
        "         looking at this view, you can have a good overview of all system",
        "         components (that are exporting traces) and who is communicating with",
        "         whom.",
        "",
        "   4. Grafana (_Metrics_, _Traces_, and _Logs_)",
        "",
        "      1. [Log into Grafana (http://localhost:3000/login)](http://localhost:3000/login)",
        "         using the default username and password:`admin`/`admin`. You will be",
        "         asked to change the password, which you can keep skip or retype `admin`",
        "         (or any password you prefer).",
        "",
        "         ![Log into Grafana](./assets/images/Grafana%20-%20Login.png)",
        "",
        "      2. [Add a new connection (http://localhost:3000/connections/add-new-connection)](http://localhost:3000/connections/add-new-connection),",
        "         from _Menu_ > _Connections_ > _Add new connection_, that gets the logs",
        "         from both applications. Search for “Loki”",
        "",
        "         ![Add new connection - Search for Loki](./assets/images/Grafana%20-%20Add%20new%20connection%20-%20Search%20for%20Loki.png)",
        "",
        "         Click on the",
        "         [Loki option](http://localhost:3000/connections/datasources/loki), and",
        "         then click on the _Add new data source_ button.",
        "",
        "         Provide the following connection url: `http://loki:3100`",
        "",
        "         ![Add new connection - Loki](./assets/images/Grafana%20-%20Add%20new%20connection%20-%20Loki.png)",
        "",
        "         Leave everything else as is, scroll to the bottom of the page and click",
        "         _Save & test_. This should succeed as shown next.",
        "",
        "         ![Add new connection - Loki - Save and test](./assets/images/Grafana%20-%20Add%20new%20connection%20-%20Loki%20-%20Save%20and%20test.png)",
        "",
        "      3. [Explore the logs (http://localhost:3000/explore)](http://localhost:3000/explore),",
        "         and switch the source to loki.",
        "",
        "         ![Switch to Loki](./assets/images/Grafana%20-%20Explore%20-%20Switch%20to%20Loki.png)",
        "",
        "      4. View the application logs. Add a label filter (`service_name = Cart`)",
        "         and re-run the logs",
        "",
        "         ![Cart logs](./assets/images/Grafana%20-%20Explore%20-%20Cart%20logs.png)",
        "",
        "         Scroll down to the logs and analyse these",
        "",
        "         ![Cart logs](./assets/images/Grafana%20-%20Explore%20-%20Expand%20Cart%20logs.png)",
        "",
        "         Note that we have adjusted the log levels for both components to",
        "         `DEBUG` and that’s why we are seeing som many log entries",
        "",
        "      5. Filter by trace id. Each request made will have a unique trace id that",
        "         stays with it across components until the request is fully completed.",
        "         In this example, we will use the `a7c4138d6a4877a97f0debd89098977d`.",
        "         Change query such that it includes all service and only shows the logs",
        "         for the given trace id.",
        "",
        "         ```",
        "         {service_name=~\".+\"} | trace_id = `a7c4138d6a4877a97f0debd89098977d` |~ ``",
        "         ```",
        "",
        "         ![Filter logs by trace id](./assets/images/Grafana%20-%20Explore%20-%20Filter%20logs%20by%20trace%20id.png)",
        "",
        "         Scroll down to view the logs that belong to the given trace id",
        "",
        "         ![The logs that belong to trace id](./assets/images/Grafana%20-%20Explore%20-%20The%20logs%20that%20belong%20to%20trace%20id.png)",
        "",
        "      Grafana can be used to view all the metrics, traces and logs but adding",
        "      new data sources, such as",
        "      [Prometheus](http://localhost:3000/connections/datasources/prometheus),",
        "      [Jaeger](http://localhost:3000/connections/datasources/jaeger), and",
        "      [Zipkin](http://localhost:3000/connections/datasources/zipkin), in a",
        "      similar way we added the loki data source.",
        "",
        "      | Data Source | Connection URL           |",
        "      | ----------- | ------------------------ |",
        "      | Prometheus  | `http://prometheus:9090` |",
        "      | Jaeger      | `http://jaeger:16686`    |",
        "      | Zipkin      | `http://zipkin:9411`     |",
        "",
        "      ![Data sources](./assets/images/Grafana%20-%20Data%20sources.png)",
        "",
        "      In the following example, Grafana is used to view the logs and traces",
        "      together.",
        "",
        "      ![Grafana - Explore - Logs and Traces.png](./assets/images/Grafana%20-%20Explore%20-%20Logs%20and%20Traces.png)",
        "",
        "      Note that Grafana can also collect the data directly from the",
        "      OpenTelemetry collector, and we don’t need to have Prometheus, Jaeger, and",
        "      Zipkin",
        "",
        "   This was just a brief overview of how we can use the data that the various",
        "   components of the application send in a holistic way to help identifying",
        "   issues and pinpoint their source."
      ]
    },
    {
      "type": "Markdown",
      "contents": [
        "6. **Stop the application once ready**",
        "",
        "   Stop both the _Cart_ and the _Catalogue_ components in the reverse order in",
        "   which these were started. Like that the _Cart_ component does not fail as",
        "   the _Catalogue_ component is not up and running."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\"",
        "docker-compose --file 'containers/docker-compose.yml' down"
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "7. **Stop the observability stack once ready**"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "docker-compose --file 'containers/docker-compose.yml' down"
      ],
      "on_failure_commands": [
        "docker-compose --file 'containers/docker-compose.yml' down"
      ],
      "indent": 3
    }
  ]
}