{
  "entries": [
    {
      "type": "Heading",
      "level": "H1",
      "title": "Shopping Distributed Spring Boot Demo using REST Synchronous communication"
    },
    {
      "type": "Markdown",
      "contents": [
        "A simple distributed application that has two components, each deployed as a",
        "separate Java application.",
        "",
        "- Catalogue",
        "- Cart (shopping cart)",
        "",
        "The _Cart_ component depends on information available in the _Catalogue_",
        "component, such as the catalogue item’s _id_ and, _caption_. The components are",
        "connected through a synchronous REST API. The _Cart_ component depends on the",
        "_Catalogue_, and it cannot run independently. Both components are required for",
        "the _Cart_ component to function as expected.",
        "",
        "This distributed application gives up _partition tolerance_ and _availability_",
        "in favour of _consistency_. Other tradeoffs are also valid, but not explored",
        "here."
      ]
    },
    {
      "type": "Heading",
      "level": "H2",
      "title": "Preloaded data"
    },
    {
      "type": "Markdown",
      "contents": [
        "To keep things simple, we’ll use the",
        "[H2](https://www.h2database.com/html/main.html) in-memory database preloaded",
        "with the following data:",
        "",
        "- **Catalog Items**",
        "",
        "  | `id` | `caption`     | `description`                                                         |",
        "  | ---: | ------------- | --------------------------------------------------------------------- |",
        "  |    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "  |    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "  |    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "  |    4 | Mug           | The ideal way to start the day                                        |",
        "  |    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |",
        "",
        "- **Carts**",
        "",
        "  | `id` |",
        "  | ---: |",
        "  |    1 |",
        "  |    2 |",
        "  |    3 |",
        "",
        "- **Cart Items**",
        "",
        "  | `cart_id` | `item_id` | `quantity` |",
        "  | --------: | --------: | ---------: |",
        "  |         1 |         1 |          1 |",
        "  |         1 |         5 |          1 |",
        "  |         2 |         2 |          1 |",
        "  |         2 |         3 |          6 |",
        "  |         3 |         4 |          4 |",
        "",
        "The `cart_id` and `item_id` in the cart items table are (not enforced) foreign",
        "keys to the cart and catalogue item tables/databases, respectively."
      ]
    },
    {
      "type": "Heading",
      "level": "H2",
      "title": "Prerequisites"
    },
    {
      "type": "Markdown",
      "contents": [
        "- [Oracle Java 21](https://www.oracle.com/java/technologies/downloads/#java21)",
        "- Container runtime, such as [Colima](https://github.com/abiosoft/colima)",
        "- [Jaeger](https://www.jaegertracing.io/), that can be started using docker"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Start the Jaeger",
        "docker run \\",
        "  --rm \\",
        "  --detach \\",
        "  --publish 4317:4317 \\",
        "  --publish 4318:4318 \\",
        "  --publish 9411:9411 \\",
        "  --publish 16686:16686 \\",
        "  --env COLLECTOR_ZIPKIN_HOST_PORT=:9411 \\",
        "  --name 'shopping-jaeger-demo' \\",
        "  'jaegertracing/all-in-one:1.60.0'",
        "",
        "# Wait for the Jaeger to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:16686/search')\" -ne '200' ]",
        "do",
        "  echo 'Waiting for the Jaeger to start'",
        "  sleep 1",
        "done"
      ],
      "on_failure_commands": [
        "docker stop 'shopping-jaeger-demo'"
      ],
      "indent": 2
    },
    {
      "type": "Heading",
      "level": "H2",
      "title": "Run the example"
    },
    {
      "type": "Markdown",
      "contents": [
        "1. **Build all application**",
        "",
        "   This builds both projects, runs the respective tests and then copies the fat",
        "   JAR files into the [`./.demo` directory](./.demo)."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "rm -rf './.demo'",
        "../mvnw clean package"
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   All tests should pass.",
        "",
        "   (_Optional_) Verify that the fat JAR files were all created and copied."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "tree --charset=ascii --dirsfirst --sort=name -L 1 --prune './.demo'"
      ],
      "output": {
        "caption": "The fat JAR files from both projects"
      },
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "2. **Run the application**",
        "",
        "   The _Cart_ component depends on the _Catalogue_, thus it is recommended to",
        "   start the _Catalogue_ component first and then start the _Cart_ component.",
        "   While the _Cart_ component starts without the _Catalogue_ component, it will",
        "   fail once a request is made as it depends on the _Catalogue_ component to be",
        "   up and running.",
        "",
        "   The components are started in the background for convenience, and can be",
        "   started in different terminal sessions if preferred.",
        "",
        "   Run the _Catalogue_ component (in the background)."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Start the application in the background",
        "java -jar './.demo/demo-shopping-distributed-rest-catalogue-1.0.0.jar' > './.demo/output-catalogue.txt' 2>&1 &",
        "",
        "# Wait for the application to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:8081/catalogue/item/1')\" -ne '200' ]",
        "do",
        "  echo 'Waiting for the Catalogue component to start'",
        "  sleep 1",
        "done"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   Run the _Cart_ component (in the background)."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Start the application in the background",
        "java -jar './.demo/demo-shopping-distributed-rest-cart-1.0.0.jar' > './.demo/output-cart.txt' 2>&1 &",
        "",
        "# Wait for the application to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:8082/cart/1')\" -ne '200' ]",
        "do",
        "  echo 'Waiting for the Cart component to start'",
        "  sleep 1",
        "done"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   Note that both components are running on different ports. Also, the _Cart_",
        "   component is expecting the _Catalogue_ component to be listening on part",
        "   `8081`.",
        "",
        "   | Component   |   Port |",
        "   | ----------- | -----: |",
        "   | _Catalogue_ | `8081` |",
        "   | _Cart_      | `8082` |"
      ]
    },
    {
      "type": "Markdown",
      "contents": [
        "3. **Try the application**",
        "",
        "   1. **Request a catalogue item**",
        "",
        "      The database contains the following catalogue items, as shown in the",
        "      following table.",
        "",
        "      | `id` | `caption`     | `description`                                                         |",
        "      | ---: | ------------- | --------------------------------------------------------------------- |",
        "      |    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "      |    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "      |    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "      |    4 | Mug           | The ideal way to start the day                                        |",
        "      |    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "curl --silent 'http://localhost:8081/catalogue/item/1' | jq"
      ],
      "output": {
        "caption": "The catalogue item with id `1`",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "   2. **Request a cart**",
        "",
        "      The database also contains the following carts, with their respective",
        "      catalogue items and quantities, as shown in the following table.",
        "",
        "      | `cart_id` | `item_id` | `caption`     | `quantity` |",
        "      | --------: | --------: | ------------- | ---------: |",
        "      |         1 |         1 | Leather Sofa  |          1 |",
        "      |         1 |         5 | LED TV        |          1 |",
        "      |         2 |         2 | Wooden Table  |          1 |",
        "      |         2 |         3 | Plastic Chair |          6 |",
        "      |         3 |         4 | Mug           |          4 |"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "curl --silent 'http://localhost:8082/cart/1' | jq"
      ],
      "output": {
        "caption": "The cart item with id `1`",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "   3. **Add a new catalogue item**",
        "",
        "      Add the following item to the catalogue",
        "",
        "      | Property Name | Value                                   |",
        "      | ------------- | --------------------------------------- |",
        "      | `caption`     | Green Plant                             |",
        "      | `description` | Put a little life in your living room!! |"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Save the response in a file as we will use it later on",
        "curl --silent \\",
        "  -X POST 'http://localhost:8081/catalogue/item' \\",
        "  -H 'Content-Type: application/json' \\",
        "  -d '{\"caption\":\"Green Plant\",\"description\":\"Put a little life in your living room!!\"}' \\",
        "  | jq \\",
        "  > './.demo/new-catalogue-item.json'",
        "",
        "# Print the output",
        "jq . './.demo/new-catalogue-item.json'"
      ],
      "output": {
        "caption": "This will return the newly added catalogue item together with its id.",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "      Print the new catalogue item id"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Print the new catalogue item id",
        "ITEM_ID=\"$(jq .id './.demo/new-catalogue-item.json')\"",
        "echo \"New catalogue item id: ${ITEM_ID}\""
      ],
      "output": {
        "caption": "The newly created catalogue item id"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "   4. **Add the new catalogue item to cart**",
        "",
        "      Please note that this depends on the previous step.",
        "",
        "      Fetch the cart details."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "curl --silent 'http://localhost:8082/cart/3' | jq"
      ],
      "output": {
        "caption": "The current cart contents",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "      Read the new item id obtained from the previous step and fetch the",
        "      catalogue item."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Read the new item id obtained from the previous command",
        "ITEM_ID=\"$(jq .id './.demo/new-catalogue-item.json')\"",
        "",
        "# Fetch the new catalogue item",
        "curl --silent \"http://localhost:8081/catalogue/item/${ITEM_ID}\" | jq"
      ],
      "output": {
        "caption": "The newly created catalogue item",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "      Add the newly created catalogue item to the cart."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Read the new item id obtained from the previous command",
        "ITEM_ID=\"$(jq .id './.demo/new-catalogue-item.json')\"",
        "",
        "# Add the new item to cart with id 3",
        "curl --silent -X POST \"http://localhost:8082/cart/3/item/${ITEM_ID}\" | jq"
      ],
      "output": {
        "caption": "The cart contents after adding the newly created catalogue item.",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "4. **Stop the application once ready**",
        "",
        "   Stop both the _Cart_ and the _Catalogue_ components in the reverse order in",
        "   which these were started. Like that the _Cart_ component does not fail as",
        "   the _Catalogue_ component is not up and running."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-rest-catalogue-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Heading",
      "level": "H2",
      "title": "Clean up"
    },
    {
      "type": "Markdown",
      "contents": [
        "1. **Stop Jaeger Once Ready**"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "docker stop 'shopping-jaeger-demo'"
      ],
      "on_failure_commands": [
        "docker stop 'shopping-jaeger-demo'"
      ],
      "indent": 3
    }
  ]
}