{
  "entries": [
    {
      "type": "Heading",
      "level": "H1",
      "title": "Shopping Distributed Spring Boot Demo using Messaging Asynchronous communication"
    },
    {
      "type": "Markdown",
      "contents": [
        "A simple distributed application that has two components, each deployed as a",
        "separate Java application.",
        "",
        "- Catalogue",
        "- Cart (shopping cart)",
        "",
        "The _Cart_ component depends on information available in the _Catalogue_",
        "component, such as the _CatalogueItem_, _id_ and, _caption_. The components are",
        "connected through a messaging queue. While the _Cart_ component depends on the",
        "_Catalogue_, the applications can run independently and only the queue needs to",
        "be present.",
        "",
        "This distributed application gives up _consistency_ in favour of _availability_",
        "and _partition tolerance_. Other tradeoffs are also valid, but not explored",
        "here."
      ]
    },
    {
      "type": "Heading",
      "level": "H2",
      "title": "Preloaded data"
    },
    {
      "type": "Markdown",
      "contents": [
        "To keep things simple, we’ll use the",
        "[H2](https://www.h2database.com/html/main.html) in-memory database preloaded",
        "with the following data:",
        "",
        "- **Catalog Items**",
        "",
        "  | `id` | `caption`     | `description`                                                         |",
        "  | ---: | ------------- | --------------------------------------------------------------------- |",
        "  |    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "  |    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "  |    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "  |    4 | Mug           | The ideal way to start the day                                        |",
        "  |    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |",
        "",
        "- **Carts**",
        "",
        "  | `id` |",
        "  | ---: |",
        "  |    1 |",
        "  |    2 |",
        "  |    3 |",
        "",
        "- **Cart Items**",
        "",
        "  | `cart_id` | `item_id` | `quantity` |",
        "  | --------: | --------: | ---------: |",
        "  |         1 |         1 |          1 |",
        "  |         1 |         5 |          1 |",
        "  |         2 |         2 |          1 |",
        "  |         2 |         3 |          6 |",
        "  |         3 |         4 |          4 |",
        "",
        "The `cart_id` and `item_id` in the cart items table are (not enforced) foreign",
        "keys to the cart and catalogue item tables/databases, respectively."
      ]
    },
    {
      "type": "Heading",
      "level": "H2",
      "title": "Prerequisites"
    },
    {
      "type": "Markdown",
      "contents": [
        "- [Oracle Java 21](https://www.oracle.com/java/technologies/downloads/#java21)",
        "- Container runtime, such as [Colima](https://github.com/abiosoft/colima)",
        "- [RabbitMq](https://www.rabbitmq.com/), that can be started using docker"
      ]
    },
    {
      "type": "Heading",
      "level": "H2",
      "title": "Run the example"
    },
    {
      "type": "Markdown",
      "contents": [
        "1. **Start RabbitMq**",
        "",
        "   The `CatalogueItemMessageHandlerTest` test class require a running RabbitMq",
        "   instance.",
        "",
        "   > TODO: Use test containers or other means so that the tests do not depend on",
        "   > external resources to be available."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Start RabbitMq",
        "docker run \\",
        "  --rm \\",
        "  --detach \\",
        "  --publish 5672:5672 \\",
        "  --publish 15672:15672 \\",
        "  --env RABBITMQ_DEFAULT_USER='demo' \\",
        "  --env RABBITMQ_DEFAULT_PASS='Shopping Demo 2024' \\",
        "  --name 'shopping-rabbitmq-demo' \\",
        "  'rabbitmq:management-alpine'",
        "",
        "# Wait for RabbitMq to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:15672')\" -ne '200' ]",
        "do",
        "  echo 'Waiting for RabbitMq to start'",
        "  sleep 1",
        "done"
      ],
      "on_failure_commands": [
        "docker stop 'shopping-rabbitmq-demo'"
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   The _Catalogue_ component will be sending messages to RabbitMQ everytime a new",
        "   catalogue item is created. The _Cart_ component, on the other hand, will be",
        "   listening for messages from RabbitMQ. For this to work we need to have the",
        "   following items.",
        "" ,
        "   - An exchange: where the catalogue service will send messages.",
        "   - A queue: from where the cart service will read messages.",
        "   - Connect the exchange to the queue so that the messages sent by the catalogue",
        "    service find their way to the cart service.",
        "",
        "   There are various ways we can configure this. The simplest option is to",
        "   execute three commands. While this is the simplest way, it may not be the best",
        "   way. I prefer infrastructure as code over this and only chose this option to",
        "   keep things simple and focused on the demo’s goals and objectives.",
        "",
        "   Let’s create everything before we proceed."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Create the exchange where the messages will be sent",
        "docker exec 'shopping-rabbitmq-demo' \\",
        "  rabbitmqadmin --username='demo' --password='Shopping Demo 2024' declare exchange name='demo-exchange' type='topic'",
        "",
        "# Create the queue from where the messages will be read",
        "docker exec 'shopping-rabbitmq-demo' \\",
        "  rabbitmqadmin --username='demo' --password='Shopping Demo 2024' declare queue name='demo-queue'",
        "",
        "# Bind the exchange with the queue so that the messages sent by the catalogue service can be read by the cart service",
        "docker exec 'shopping-rabbitmq-demo' \\",
        "  rabbitmqadmin --username='demo' --password='Shopping Demo 2024' declare binding source='demo-exchange' destination='demo-queue' routing_key='demo.catalogue.new'"
      ],
      "on_failure_commands": [
        "docker stop 'shopping-rabbitmq-demo'"
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   Access the RabbitMQ admin page:",
        "   [http://localhost:15672](http://localhost:15672). We are using the following",
        "   credentials.",
        "",
        "   | Property      | Value                          |",
        "   | ------------- | ------------------------------ |",
        "   | Username      | `demo`                         |",
        "   | Password      | `Shopping Demo 2024`           |",
        "   | Exchange Name | `demo-exchange`                |",
        "   | Queue Name    | `demo-queue`                   |",
        "   | Routing Key   | `demo.catalogue.new`           |",
        "",
        "   Login to RabbitMD management UI",
        "",
        "   ![RabbitMQ Management UI](./assets/images/RabbitMQ%20Management%20UI.png)",
        "",
        "   If you navigate to the _Exchanges_ tab, you will see our new exchange",
        "   (`demo-exchange`)",
        "",
        "   ![RabbitMQ Management UI - Exchanges.png](./assets/images/RabbitMQ%20Management%20UI%20-%20Exchanges.png)",
        "",
        "   If you navigate to the _Queues and Streams_ tab, you will see our new queue",
        "   (`demo-queue`)",
        "",
        "   ![RabbitMQ Management UI - Queues and Streams.png](./assets/images/RabbitMQ%20Management%20UI%20-%20Queues%20and%20Streams.png)",
        "",
        "   In case of troubleshooting, you can log into the running RabbitMQ container",
        "   using the following command.",
        "",
        "   ```",
        "   docker exec --interactive --tty 'shopping-rabbitmq-demo' /bin/sh",
        "   ```"
      ]
    },
    {
      "type": "Markdown",
      "contents": [
        "2. **Build all application**",
        "",
        "   This builds both projects, runs the respective tests and then copies the fat",
        "   JAR files into the [`./.demo` directory](./.demo)."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "rm -rf './.demo'",
        "../mvnw clean package"
      ],
      "on_failure_commands": [
        "docker stop 'shopping-rabbitmq-demo'"
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   All tests should pass.",
        "",
        "   (_Optional_) Verify that the fat JAR files were all created and copied."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "tree --charset=ascii --dirsfirst --sort=name -L 1 --prune './.demo'"
      ],
      "output": {
        "caption": "The fat JAR files from both projects"
      },
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "3. **Run the application**",
        "",
        "   The _Cart_ component depends on the events triggered _Catalogue_ component",
        "   but not on the component itself. Both the _Cart_ and the _Catalogue_",
        "   components depend on the message queue and given that this is running, each",
        "   component can be started independent of the other.",
        "",
        "   The components are started in the background for convenience, and can be",
        "   started in different terminal sessions if preferred.",
        "",
        "   Run the _Catalogue_ component (in the background)."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Start the application in the background",
        "java -jar './.demo/demo-shopping-distributed-messaging-catalogue-1.0.0.jar' > './.demo/output-catalogue.txt' 2>&1 &",
        "",
        "# Wait for the application to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:8081/catalogue/item/1')\" -ne '200' ]",
        "do",
        "  echo 'Waiting for the Catalogue component to start'",
        "  sleep 1",
        "done"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-messaging-catalogue-1.0.0.jar' | cut -d' ' -f1)\"",
        "docker stop 'shopping-rabbitmq-demo'"
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   Run the _Cart_ component (in the background)."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Start the application in the background",
        "java -jar './.demo/demo-shopping-distributed-messaging-cart-1.0.0.jar' > './.demo/output-cart.txt' 2>&1 &",
        "",
        "# Wait for the application to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:8082/cart/1')\" -ne '200' ]",
        "do",
        "  echo 'Waiting for the Cart component to start'",
        "  sleep 1",
        "done"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-messaging-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-messaging-catalogue-1.0.0.jar' | cut -d' ' -f1)\"",
        "docker stop 'shopping-rabbitmq-demo'"
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   Note that both components are running on different ports.",
        "",
        "   | Component   |   Port |",
        "   | ----------- | -----: |",
        "   | _Catalogue_ | `8081` |",
        "   | _Cart_      | `8082` |"
      ]
    },
    {
      "type": "Markdown",
      "contents": [
        "4. **Try the application**",
        "",
        "   1. **Request a catalogue item**",
        "",
        "      The database contains the following catalogue items, as shown in the",
        "      following table.",
        "",
        "      | `id` | `caption`     | `description`                                                         |",
        "      | ---: | ------------- | --------------------------------------------------------------------- |",
        "      |    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "      |    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "      |    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "      |    4 | Mug           | The ideal way to start the day                                        |",
        "      |    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "curl --silent 'http://localhost:8081/catalogue/item/1' | jq"
      ],
      "output": {
        "caption": "The catalogue item with id `1`",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-messaging-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-messaging-catalogue-1.0.0.jar' | cut -d' ' -f1)\"",
        "docker stop 'shopping-rabbitmq-demo'"
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "   2. **Request a cart**",
        "",
        "      The database also contains the following carts, with their respective",
        "      catalogue items and quantities, as shown in the following table.",
        "",
        "      | `cart_id` | `item_id` | `caption`     | `quantity` |",
        "      | --------: | --------: | ------------- | ---------: |",
        "      |         1 |         1 | Leather Sofa  |          1 |",
        "      |         1 |         5 | LED TV        |          1 |",
        "      |         2 |         2 | Wooden Table  |          1 |",
        "      |         2 |         3 | Plastic Chair |          6 |",
        "      |         3 |         4 | Mug           |          4 |"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "curl --silent 'http://localhost:8082/cart/1' | jq"
      ],
      "output": {
        "caption": "The cart item with id `1`",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-messaging-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-messaging-catalogue-1.0.0.jar' | cut -d' ' -f1)\"",
        "docker stop 'shopping-rabbitmq-demo'"
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "   3. **Add a new catalogue item**",
        "",
        "      Add the following item to the catalogue",
        "",
        "      | Property Name | Value                                   |",
        "      | ------------- | --------------------------------------- |",
        "      | `caption`     | Green Plant                             |",
        "      | `description` | Put a little life in your living room!! |"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Save the response in a file as we will use it later on",
        "curl --silent \\",
        "  -X POST 'http://localhost:8081/catalogue/item' \\",
        "  -H 'Content-Type: application/json' \\",
        "  -d '{\"caption\":\"Green Plant\",\"description\":\"Put a little life in your living room!!\"}' \\",
        "  | jq \\",
        "  > './.demo/new-catalogue-item.json'",
        "",
        "# Print the output",
        "jq . './.demo/new-catalogue-item.json'"
      ],
      "output": {
        "caption": "This will return the newly added catalogue item together with its id.",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-messaging-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-messaging-catalogue-1.0.0.jar' | cut -d' ' -f1)\"",
        "docker stop 'shopping-rabbitmq-demo'"
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "      Print the new catalogue item id"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Print the new catalogue item id",
        "ITEM_ID=\"$(jq .id './.demo/new-catalogue-item.json')\"",
        "echo \"New catalogue item id: ${ITEM_ID}\""
      ],
      "output": {
        "caption": "The newly created catalogue item id"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-messaging-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-messaging-catalogue-1.0.0.jar' | cut -d' ' -f1)\"",
        "docker stop 'shopping-rabbitmq-demo'"
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "   4. **Add the new catalogue item to cart**",
        "",
        "      Please note that this depends on the previous step.",
        "",
        "      Fetch the cart details."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "curl --silent 'http://localhost:8082/cart/3' | jq"
      ],
      "output": {
        "caption": "The current cart contents",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-messaging-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-messaging-catalogue-1.0.0.jar' | cut -d' ' -f1)\"",
        "docker stop 'shopping-rabbitmq-demo'"
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "      Read the new item id obtained from the previous step and fetch the",
        "      catalogue item."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Read the new item id obtained from the previous command",
        "ITEM_ID=\"$(jq .id './.demo/new-catalogue-item.json')\"",
        "",
        "# Fetch the new catalogue item",
        "curl --silent \"http://localhost:8081/catalogue/item/${ITEM_ID}\" | jq"
      ],
      "output": {
        "caption": "The newly created catalogue item",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-messaging-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-messaging-catalogue-1.0.0.jar' | cut -d' ' -f1)\"",
        "docker stop 'shopping-rabbitmq-demo'"
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "      Add the newly created catalogue item to the cart."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Read the new item id obtained from the previous command",
        "ITEM_ID=\"$(jq .id './.demo/new-catalogue-item.json')\"",
        "",
        "# Add the new item to cart with id 3",
        "curl --silent -X POST \"http://localhost:8082/cart/3/item/${ITEM_ID}\" | jq"
      ],
      "output": {
        "caption": "The cart contents after adding the newly created catalogue item.",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-messaging-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-messaging-catalogue-1.0.0.jar' | cut -d' ' -f1)\"",
        "docker stop 'shopping-rabbitmq-demo'"
      ],
      "indent": 6
    },
    {
      "type": "Markdown",
      "contents": [
        "5. **Stop the application once ready**",
        "",
        "   The order in which the _Cart_ and the _Catalogue_ components are stopped does",
        "   not make a difference."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-messaging-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-messaging-catalogue-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-distributed-messaging-cart-1.0.0.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-shopping-distributed-messaging-catalogue-1.0.0.jar' | cut -d' ' -f1)\"",
        "docker stop 'shopping-rabbitmq-demo'"
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "6. **Stop RabbitMq Once Ready**"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "docker stop 'shopping-rabbitmq-demo'"
      ],
      "on_failure_commands": [
        "docker stop 'shopping-rabbitmq-demo'"
      ],
      "indent": 3
    }
  ]
}