{
  "entries": [
    {
      "type": "Heading",
      "level": "H1",
      "title": "Shopping Modular Monolithic Spring Boot Demo"
    },
    {
      "type": "Markdown",
      "contents": [
        "A simple monolithic application that has two components.",
        "",
        "- Catalogue",
        "- Cart (shopping cart)",
        "",
        "The _Cart_ component depends on information available in the _Catalogue_",
        "component, such as the _CatalogueItem_ _id_ and _caption_.",
        "",
        "Both components are deployed as a single Spring Boot web application.",
        "",
        "This application uses the modular monolithic architecture style where the",
        "classes are grouped based on their component as shown next."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "tree --charset=ascii --dirsfirst --sort=name -L 1 './src/main/java/demo'"
      ],
      "output": {
        "caption": "The top level packages"
      }
    },
    {
      "type": "Markdown",
      "contents": [
        "Domain partitioning organises the code by the domain it belongs to.",
        "",
        "By looking at the top-level packages, we can discern what this application is",
        "about. The top-level package reflects the business language too. For instance,",
        "if we want to add an image to the catalogue items, which package should we work",
        "in? That’s not a tricky question – it’s the `demo.catalogue` package. Similarly,",
        "if we need to allow the user to remove items from the shopping cart, where",
        "should we look? Look no further than the `demo.cart` package.",
        "",
        "This simplifies the application and earns this architectural style. Many believe",
        "that this architecture style achieves a good balance as it brings in the",
        "advantages of smaller services without the complexity of distributed",
        "applications."
      ]
    },
    {
      "type": "Heading",
      "level": "H2",
      "title": "Preloaded data"
    },
    {
      "type": "Markdown",
      "contents": [
        "To keep things simple, we’ll use the",
        "[H2](https://www.h2database.com/html/main.html) in-memory database preloaded",
        "with the following data:",
        "",
        "- **Catalog Items**",
        "",
        "  | `id` | `caption`     | `description`                                                         |",
        "  | ---: | ------------- | --------------------------------------------------------------------- |",
        "  |    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "  |    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "  |    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "  |    4 | Mug           | The ideal way to start the day                                        |",
        "  |    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |",
        "",
        "- **Carts**",
        "",
        "  | `id` |",
        "  | ---: |",
        "  |    1 |",
        "  |    2 |",
        "  |    3 |",
        "",
        "- **Cart Items**",
        "",
        "  | `cart_id` | `item_id` | `quantity` |",
        "  | --------: | --------: | ---------: |",
        "  |         1 |         1 |          1 |",
        "  |         1 |         5 |          1 |",
        "  |         2 |         2 |          1 |",
        "  |         2 |         3 |          6 |",
        "  |         3 |         4 |          4 |",
        "",
        "The `cart_id` and `item_id` in the cart items table are foreign keys to the cart",
        "and catalogue item tables, respectively."
      ]
    },
    {
      "type": "Heading",
      "level": "H2",
      "title": "Prerequisites"
    },
    {
      "type": "Markdown",
      "contents": [
        "- [Oracle Java 21](https://www.oracle.com/java/technologies/downloads/#java21)"
      ]
    },
    {
      "type": "Heading",
      "level": "H2",
      "title": "Run the example"
    },
    {
      "type": "Markdown",
      "contents": [
        "1. **Build the application**"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "../mvnw clean package"
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   All tests should pass.",
        "",
        "   (_Optional_) Verify that the fat JAR files were created."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "tree --charset=ascii --dirsfirst --sort=name -L 1 --prune './target'"
      ],
      "output": {
        "caption": "The fat and thin JAR files"
      },
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "2. **Run the applications**",
        "",
        "   This application doesn’t have any dependencies and listens to web requests on",
        "   port `8080` unless otherwise specified."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Start the application in the background",
        "java -jar './target/demo-shopping-monolithic-modular-1.0.0.jar' > './target/output.txt' 2>&1 &",
        "",
        "# Wait for the application to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:8080/catalogue/item/1')\" -ne '200' ]",
        "do",
        "  echo 'Waiting for the application to start'",
        "  sleep 1",
        "done"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-modular-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   This starts our application in the background and waits for it to start.",
        "",
        "3. **Request a catalogue item**",
        "",
        "   The database contains the following catalogue items, as shown in the",
        "   following table.",
        "",
        "   | `id` | `caption`     | `description`                                                         |",
        "   | ---: | ------------- | --------------------------------------------------------------------- |",
        "   |    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "   |    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "   |    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "   |    4 | Mug           | The ideal way to start the day                                        |",
        "   |    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "curl --silent 'http://localhost:8080/catalogue/item/1' | jq"
      ],
      "output": {
        "caption": "The catalogue item with id `1`",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-modular-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "4. **Request a cart**",
        "",
        "   The database also contains the following carts, with their respective",
        "   catalogue items and quantities, as shown in the following table.",
        "",
        "   | `cart_id` | `item_id` | `caption`     | `quantity` |",
        "   | --------: | --------: | ------------- | ---------: |",
        "   |         1 |         1 | Leather Sofa  |          1 |",
        "   |         1 |         5 | LED TV        |          1 |",
        "   |         2 |         2 | Wooden Table  |          1 |",
        "   |         2 |         3 | Plastic Chair |          6 |",
        "   |         3 |         4 | Mug           |          4 |"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "curl --silent 'http://localhost:8080/cart/1' | jq"
      ],
      "output": {
        "caption": "The cart item with id `1`",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-modular-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "5. **Add a new catalogue item**",
        "",
        "   Add the following item to the catalogue",
        "",
        "   | Property Name | Value                                   |",
        "   | ------------- | --------------------------------------- |",
        "   | `caption`     | Green Plant                             |",
        "   | `description` | Put a little life in your living room!! |"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Save the response in a file as we will use it later on",
        "curl --silent \\",
        "  -X POST 'http://localhost:8080/catalogue/item' \\",
        "  -H 'Content-Type: application/json' \\",
        "  -d '{\"caption\":\"Green Plant\",\"description\":\"Put a little life in your living room!!\"}' \\",
        "  | jq \\",
        "  > './target/new-catalogue-item.json'",
        "",
        "# Print the output",
        "jq . './target/new-catalogue-item.json'"
      ],
      "output": {
        "caption": "This will return the newly added catalogue item together with its id.",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-modular-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   Print the new catalogue item id"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Print the new catalogue item id",
        "ITEM_ID=\"$(jq .id './target/new-catalogue-item.json')\"",
        "echo \"New catalogue item id: ${ITEM_ID}\""
      ],
      "output": {
        "caption": "The newly created catalogue item id"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-modular-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "6. **Add the new catalogue item to cart**",
        "",
        "   Please note that this depends on the previous step.",
        "",
        "   Fetch the cart details."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "curl --silent 'http://localhost:8080/cart/3' | jq"
      ],
      "output": {
        "caption": "The current cart contents",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-modular-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   Read the new item id obtained from the previous step and fetch the catalogue",
        "   item."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Read the new item id obtained from the previous command",
        "ITEM_ID=\"$(jq .id './target/new-catalogue-item.json')\"",
        "",
        "# Fetch the new catalogue item",
        "curl --silent \"http://localhost:8080/catalogue/item/${ITEM_ID}\" | jq"
      ],
      "output": {
        "caption": "The newly created catalogue item",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-modular-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   Add the newly created catalogue item to the cart."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Read the new item id obtained from the previous command",
        "ITEM_ID=\"$(jq .id './target/new-catalogue-item.json')\"",
        "",
        "# Add the new item to cart with id 3",
        "curl --silent -X POST \"http://localhost:8080/cart/3/item/${ITEM_ID}\" | jq"
      ],
      "output": {
        "caption": "The cart contents after adding the newly created catalogue item.",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-modular-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "7. **Stop the application once ready**"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-modular-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-modular-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    }
  ]
}