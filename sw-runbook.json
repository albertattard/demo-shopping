{
  "entries": [
    {
      "type": "Heading",
      "level": "H1",
      "title": "Shopping"
    },
    {
      "type": "Markdown",
      "contents": [
        "A simple web application comprising from two components, a catalogue and a cart.",
        "The cart component depends on the catalogue component for information about the",
        "catalogue items, such as description.",
        "",
        "This demo implements the same solution using different architecture styles:",
        "- [Monolithic Layered](./monolithic-layered/README.md)",
        "- [Monolithic Modular](./monolithic-modular/README.md)",
        "- [Distributed REST (synchronous)](./distributed-rest/README.md)",
        "- [Distributed Messaging (asynchronous)](./distributed-messaging/README.md)",
        "",
        "Please refer to each project for more information about the specific",
        "implementation.",
        "",
        "All projects copy their artifacts into the `./demo` directory for convenience."
      ]
    },
    {
      "type": "Heading",
      "level": "H2",
      "title": "Preloaded data"
    },
    {
      "type": "Markdown",
      "contents": [
        "To keep things simple, we’ll use the",
        "[H2](https://www.h2database.com/html/main.html) in-memory database preloaded",
        "with the following data:",
        "",
        "- **Catalog Items**",
        "",
        "  | `id` | `caption`     | `description`                                                         |",
        "  | ---: | ------------- | --------------------------------------------------------------------- |",
        "  |    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "  |    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "  |    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "  |    4 | Mug           | The ideal way to start the day                                        |",
        "  |    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |",
        "",
        "- **Carts**",
        "",
        "  | `id` |",
        "  | ---: |",
        "  |    1 |",
        "  |    2 |",
        "  |    3 |",
        "",
        "- **Cart Items**",
        "",
        "  | `cart_id` | `item_id` | `quantity` |",
        "  | --------: | --------: | ---------: |",
        "  |         1 |         1 |          1 |",
        "  |         1 |         5 |          1 |",
        "  |         2 |         2 |          1 |",
        "  |         2 |         3 |          6 |",
        "  |         3 |         4 |          4 |",
        "",
        "The `cart_id` and `item_id` in the cart items table are foreign keys to the cart",
        "and catalogue item tables, respectively."
      ]
    },
    {
      "type": "Heading",
      "level": "H2",
      "title": "Prerequisites"
    },
    {
      "type": "Markdown",
      "contents": [
        "- [Oracle Java 21](https://www.oracle.com/java/technologies/downloads/#java21)",
        "- Container runtime, such as [Colima](https://github.com/abiosoft/colima)"
      ]
    },
    {
      "type": "Heading",
      "level": "H2",
      "title": "Run the examples"
    },
    {
      "type": "Markdown",
      "contents": [
        "1. **Build all applications**",
        "",
        "   This builds all projects, runs the respective tests and then copies the fat",
        "   JAR files into the [`./demo` directory](./demo)."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "./mvnw clean package"
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   All tests should pass.",
        "",
        "   (_Optional_) Verify that the fat JAR files were all created and copied."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "tree --charset=ascii --dirsfirst --sort=name -L 1 --prune './demo'"
      ],
      "output": {
        "caption": "The fat JAR files from all projects"
      },
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "2. **Run the applications**",
        "",
        "   There are four web applications, and these applications listens on the same",
        "   ports, such as `8080`, `8081`, and `8082`. Change the default port to run",
        "   these applications at the same time.",
        "",
        "   Please refer to each section to see how to run the respective application.",
        "",
        "   - [Run the Monolithic Layered Application](#run-the-monolithic-layered-application)",
        "   - [Run the Monolithic Modular Application](#run-the-monolithic-modular-application)"
      ]
    },
    {
      "type": "Heading",
      "level": "H3",
      "title": "Run the Monolithic Layered Application"
    },
    {
      "type": "Markdown",
      "contents": [
        "This application doesn’t have any dependencies and listens to web requests on",
        "port `8080` unless otherwise specified.",
        "",
        "1. **Start the application**"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Start the application in the background",
        "java -jar './demo/demo-shopping-monolithic-layered-1.0.0.jar' > './demo/output.txt' 2>&1 &",
        "",
        "# Wait for the application to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:8080/catalogue/item/1')\" -ne '200' ]; do echo 'Waiting for the application to start'; sleep 1; done"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-layered-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   This starts our application in the background and waits for it to start.",
        "",
        "2. **Request a catalogue item**",
        "",
        "   The database contains the following catalogue items, as shown in the",
        "   following table.",
        "",
        "   | `id` | `caption`     | `description`                                                         |",
        "   | ---: | ------------- | --------------------------------------------------------------------- |",
        "   |    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "   |    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "   |    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "   |    4 | Mug           | The ideal way to start the day                                        |",
        "   |    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "curl --silent 'http://localhost:8080/catalogue/item/1' | jq"
      ],
      "output": {
        "caption": "The catalogue item with id `1`",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-layered-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "3. **Request a cart**",
        "",
        "   The database also contains the following carts, with their respective",
        "   catalogue items and quantities, as shown in the following table.",
        "",
        "   | `cart_id` | `item_id` | `caption`     | `quantity` |",
        "   | --------: | --------: | ------------- | ---------: |",
        "   |         1 |         1 | Leather Sofa  |          1 |",
        "   |         1 |         5 | LED TV        |          1 |",
        "   |         2 |         2 | Wooden Table  |          1 |",
        "   |         2 |         3 | Plastic Chair |          6 |",
        "   |         3 |         4 | Mug           |          4 |"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "curl --silent 'http://localhost:8080/cart/1' | jq"
      ],
      "output": {
        "caption": "The cart item with id `1`",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-layered-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "4. **Add a new catalogue item**",
        "",
        "   Add the following item to the catalogue",
        "",
        "   | Property Name | Value                                   |",
        "   | ------------- | --------------------------------------- |",
        "   | `caption`     | Green Plant                             |",
        "   | `description` | Put a little life in your living room!! |"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Save the response in a file as we will use it later on",
        "curl --silent \\",
        "  -X POST 'http://localhost:8080/catalogue/item' \\",
        "  -H 'Content-Type: application/json' \\",
        "  -d '{\"caption\":\"Green Plant\",\"description\":\"Put a little life in your living room!!\"}' \\",
        "  | jq \\",
        "  > './demo/new-catalogue-item.json'",
        "",
        "# Print the output",
        "jq . './demo/new-catalogue-item.json'"
      ],
      "output": {
        "caption": "This will return the newly added catalogue item together with its id.",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-layered-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   Print the new catalogue item id"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Print the new catalogue item id",
        "ITEM_ID=\"$(jq .id './demo/new-catalogue-item.json')\"",
        "echo \"New catalogue item id: ${ITEM_ID}\""
      ],
      "output": {
        "caption": "The newly created catalogue item id"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-layered-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "5. **Add the new catalogue item to cart**",
        "",
        "   Please note that this depends on the previous step.",
        "",
        "   Fetch the cart details."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "curl --silent 'http://localhost:8080/cart/3' | jq"
      ],
      "output": {
        "caption": "The current cart contents",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-layered-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   Read the new item id obtained from the previous step and fetch the catalogue",
        "   item."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Read the new item id obtained from the previous command",
        "ITEM_ID=\"$(jq .id './demo/new-catalogue-item.json')\"",
        "",
        "# Fetch the new catalogue item",
        "curl --silent \"http://localhost:8080/catalogue/item/${ITEM_ID}\" | jq"
      ],
      "output": {
        "caption": "The newly created catalogue item",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-layered-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   Add the newly created catalogue item to the cart."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Read the new item id obtained from the previous command",
        "ITEM_ID=\"$(jq .id './demo/new-catalogue-item.json')\"",
        "",
        "# Add the new item to cart with id 3",
        "curl --silent -X POST \"http://localhost:8080/cart/3/item/${ITEM_ID}\" | jq"
      ],
      "output": {
        "caption": "The cart contents after adding the newly created catalogue item.",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-layered-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "6. **Stop the application once ready**"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-layered-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-layered-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Heading",
      "level": "H3",
      "title": "Run the Monolithic Modular Application"
    },
    {
      "type": "Markdown",
      "contents": [
        "This application doesn’t have any dependencies and listens to web requests on",
        "port `8080` unless otherwise specified.",
        "",
        "1. **Start the application**"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Start the application in the background",
        "java -jar './demo/demo-shopping-monolithic-modular-1.0.0.jar' > './demo/output.txt' 2>&1 &",
        "",
        "# Wait for the application to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:8080/catalogue/item/1')\" -ne '200' ]; do echo 'Waiting for the application to start'; sleep 1; done"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-modular-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   This starts our application in the background and waits for it to start.",
        "",
        "2. **Request a catalogue item**",
        "",
        "   The database contains the following catalogue items, as shown in the",
        "   following table.",
        "",
        "   | `id` | `caption`     | `description`                                                         |",
        "   | ---: | ------------- | --------------------------------------------------------------------- |",
        "   |    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "   |    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "   |    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "   |    4 | Mug           | The ideal way to start the day                                        |",
        "   |    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "curl --silent 'http://localhost:8080/catalogue/item/1' | jq"
      ],
      "output": {
        "caption": "The catalogue item with id `1`",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-modular-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "3. **Request a cart**",
        "",
        "   The database also contains the following carts, with their respective",
        "   catalogue items and quantities, as shown in the following table.",
        "",
        "   | `cart_id` | `item_id` | `caption`     | `quantity` |",
        "   | --------: | --------: | ------------- | ---------: |",
        "   |         1 |         1 | Leather Sofa  |          1 |",
        "   |         1 |         5 | LED TV        |          1 |",
        "   |         2 |         2 | Wooden Table  |          1 |",
        "   |         2 |         3 | Plastic Chair |          6 |",
        "   |         3 |         4 | Mug           |          4 |"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "curl --silent 'http://localhost:8080/cart/1' | jq"
      ],
      "output": {
        "caption": "The cart item with id `1`",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-modular-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "4. **Add a new catalogue item**",
        "",
        "   Add the following item to the catalogue",
        "",
        "   | Property Name | Value                                   |",
        "   | ------------- | --------------------------------------- |",
        "   | `caption`     | Green Plant                             |",
        "   | `description` | Put a little life in your living room!! |"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Save the response in a file as we will use it later on",
        "curl --silent \\",
        "  -X POST 'http://localhost:8080/catalogue/item' \\",
        "  -H 'Content-Type: application/json' \\",
        "  -d '{\"caption\":\"Green Plant\",\"description\":\"Put a little life in your living room!!\"}' \\",
        "  | jq \\",
        "  > './demo/new-catalogue-item.json'",
        "",
        "# Print the output",
        "jq . './demo/new-catalogue-item.json'"
      ],
      "output": {
        "caption": "This will return the newly added catalogue item together with its id.",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-modular-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   Print the new catalogue item id"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Print the new catalogue item id",
        "ITEM_ID=\"$(jq .id './demo/new-catalogue-item.json')\"",
        "echo \"New catalogue item id: ${ITEM_ID}\""
      ],
      "output": {
        "caption": "The newly created catalogue item id"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-modular-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "5. **Add the new catalogue item to cart**",
        "",
        "   Please note that this depends on the previous step.",
        "",
        "   Fetch the cart details."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "curl --silent 'http://localhost:8080/cart/3' | jq"
      ],
      "output": {
        "caption": "The current cart contents",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-modular-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   Read the new item id obtained from the previous step and fetch the catalogue",
        "   item."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Read the new item id obtained from the previous command",
        "ITEM_ID=\"$(jq .id './demo/new-catalogue-item.json')\"",
        "",
        "# Fetch the new catalogue item",
        "curl --silent \"http://localhost:8080/catalogue/item/${ITEM_ID}\" | jq"
      ],
      "output": {
        "caption": "The newly created catalogue item",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-modular-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "   Add the newly created catalogue item to the cart."
      ]
    },
    {
      "type": "Command",
      "commands": [
        "# Read the new item id obtained from the previous command",
        "ITEM_ID=\"$(jq .id './demo/new-catalogue-item.json')\"",
        "",
        "# Add the new item to cart with id 3",
        "curl --silent -X POST \"http://localhost:8080/cart/3/item/${ITEM_ID}\" | jq"
      ],
      "output": {
        "caption": "The cart contents after adding the newly created catalogue item.",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-modular-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Markdown",
      "contents": [
        "6. **Stop the application once ready**"
      ]
    },
    {
      "type": "Command",
      "commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-modular-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-shopping-monolithic-modular-1.0.0.jar' | cut -d' ' -f1)\""
      ],
      "indent": 3
    },
    {
      "type": "Breakpoint"
    },
    {
      "type": "Markdown",
      "id": "54800b36-9b26-49f9-b3b4-b16ac8adddf2",
      "contents": [
        "_Building effective software efficiently_"
      ]
    },
    {
      "type": "Heading",
      "id": "d71f49e1-c01d-4bd0-9526-00279949650d",
      "level": "H2",
      "title": "Domain"
    },
    {
      "type": "Markdown",
      "id": "dc04e8d5-46fd-47b5-842f-2b8218d51859",
      "contents": [
        "Welcome to our software architecture and microservices workshop. In this session, we will create and then refactor a simple application consisting of two components: a shopping cart (simply referred to as _cart_) and a catalogue."
      ]
    },
    {
      "type": "Heading",
      "id": "153a45ea-3c00-4b6b-bf04-b8218142a3e7",
      "level": "H3",
      "title": "What our applications needs to do"
    },
    {
      "type": "Markdown",
      "id": "cb3b3435-7ae8-4098-af41-4c9084af15cb",
      "contents": [
        "Our application needs to perform the following tasks:",
        "",
        "- Provide item information (mainly the _name_ and its _description_) from our catalogue.",
        "- Allow new catalogue items to be added.",
        "- View the contents of a cart.",
        "- Allow new items to be added to a shopping cart.",
        "",
        "The application will not support creating new carts nor removing items from cart. This decision focuses on comparing different software architecture styles, and creating new shopping carts or removing items from the cart don’t contribute to that goal. However, adding new catalogue items does, as this information must be communicated to the cart component. We’ll discuss this in more detail later."
      ]
    },
    {
      "type": "Heading",
      "id": "1e0d2be3-e64e-4cfd-8308-903f9250195b",
      "level": "H3",
      "title": "The data"
    },
    {
      "type": "Markdown",
      "id": "1a73daf0-4890-4f98-bb79-f668b6d3a3e1",
      "contents": [
        "Our data will have the following properties and constrains:",
        "",
        "- A cart can have none or many items.",
        "- Each item in the cart must be linked to an existing item in the catalogue. We cannot have an item in the cart that does not exist in the catalogue.",
        "- Each item in the cart will also have a quantity associated to it. The same item cannot be added twice in the cart, but instead its quantity is adjusted to meet the user’s needs.",
        "",
        "This can be mapped into three tables",
        "",
        "- `catalogue_item`: where we will have the information about each item in the catalogue.",
        "- `cart`: where we will have the information about each cart (but not its items).",
        "- `cart_item`: where we will have the items that belong to the cart and their respective quantity. This table will have a foreign key to both the `catalogue_item` and `cart` tables and uses their ids as its primary key.",
        "",
        "The following diagram shows these three tables and their relationship.",
        "",
        "![Database tables and relationships](./assets/images/Database%20tables%20and%20relationships.png)"
      ]
    },
    {
      "type": "Heading",
      "id": "c2911e8b-26d6-4850-859f-548efc91a81e",
      "level": "H3",
      "title": "Meet the components"
    },
    {
      "type": "Markdown",
      "id": "0c91e7e7-c72e-470d-b3d3-229d56387c33",
      "contents": [
        "By observing the data and it’s relationships, we can carve out two components:",
        "",
        "- **Catalogue**: This component manages the information about the items in our online store, such as their names and descriptions.",
        "- **Cart**: This component is responsible for managing shopping carts and <u>relies on the catalogue for the catalogue item details</u>.",
        "",
        "Note that we underscored the dependency between the cart and catalogue components, depicted below.",
        "",
        "![Meet the components](./assets/images/Meet%20the%20components.png)",
        "",
        "This dependency marks the data ownership. The catalogue items are managed by the catalogue team. The cart team, or any other team, do not own the catalogue data, but just use it."
      ]
    },
    {
      "type": "Heading",
      "id": "3c1bfa60-eaaf-497d-a9e1-0ee39e99b707",
      "level": "H3",
      "title": "Preloaded data"
    },
    {
      "type": "Markdown",
      "id": "acf62300-6162-4b80-99fa-f598ba03a01a",
      "contents": [
        "To keep things simple, we’ll use the [H2](https://www.h2database.com/html/main.html) in-memory database preloaded with the following data:",
        "",
        "- **Catalog Items**",
        "",
        "  | `id` | `caption`     | `description`                                                         |",
        "  | ---: | ------------- | --------------------------------------------------------------------- |",
        "  |    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "  |    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "  |    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "  |    4 | Mug           | The ideal way to start the day                                        |",
        "  |    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |",
        "",
        "- **Carts**",
        "",
        "  | `id` |",
        "  | ---: |",
        "  |    1 |",
        "  |    2 |",
        "  |    3 |",
        "",
        "- **Cart Items**",
        "",
        "  | `cart_id` | `item_id` | `quantity` |",
        "  | --------: | --------: | ---------: |",
        "  |         1 |         1 |          1 |",
        "  |         1 |         5 |          1 |",
        "  |         2 |         2 |          1 |",
        "  |         2 |         3 |          6 |",
        "  |         3 |         4 |          4 |",
        "",
        "The `cart_id` and `item_id` in the cart items table are foreign keys to the cart and catalogue item tables, respectively."
      ]
    },
    {
      "type": "Heading",
      "id": "619d426b-046f-4479-a12b-f13e8f6fc49b",
      "level": "H3",
      "title": "A quick note on databases"
    },
    {
      "type": "Markdown",
      "id": "fef07e9a-8664-4429-9e58-67dd18224c14",
      "contents": [
        "While an in-memory database isn’t typical for production environments, it helps keep our focus on software architecture. Most applications use persistent databases with extensive data, and migrating databases is a complex topic that could be its own workshop."
      ]
    },
    {
      "type": "Heading",
      "id": "f941e768-1441-47dc-813b-10f0af9f2321",
      "level": "H3",
      "title": "The big picture"
    },
    {
      "type": "Markdown",
      "id": "34f16f57-b2bf-4e6e-88df-99cecef98084",
      "contents": [
        "Our application will look like the following diagram.",
        "",
        "![The big picture](./assets/images/The%20big%20picture.png)",
        "",
        "Now that we have an overview, let’s start with the simplest (and possibly the most common) architectural style: the _layered monolithic architecture_. Don’t worry if you’re not familiar with this architecture style; we will cover it in detail in the coming sections.",
        "",
        "But first, let’s talk about the prerequisites."
      ]
    },
    {
      "type": "Heading",
      "id": "e84dc612-3e6d-4c91-b7f1-ea68072ac543",
      "level": "H2",
      "title": "Prerequisites"
    },
    {
      "type": "Markdown",
      "id": "02214c9d-face-470f-b7ce-ffec81bba873",
      "contents": [
        "To make the best out of this workshop, it is recommended to follow along and try the provided examples. Below are the prerequisites."
      ]
    },
    {
      "type": "Heading",
      "id": "317494f3-cda9-4ed1-afa5-cd3a5a16e8f8",
      "level": "H3",
      "title": "Knowledge"
    },
    {
      "type": "Markdown",
      "id": "66489a75-a34c-45ae-815d-877afae0475d",
      "contents": [
        "This workshop expects you to know how to use a terminal and have a good understanding of Java. While you don’t need to be an expert in Java, you should know how to create classes, interfaces, and write basic Java code. Although we will use Maven to build and package the project, this workshop will not cover the basics of how to compile and package a Java application with Maven.",
        "",
        "All required code and commands are provided but not necessarily explained in detail."
      ]
    },
    {
      "type": "Heading",
      "id": "d2463e09-fe64-4870-a61a-02864b3e7e71",
      "level": "H3",
      "title": "Terminal Commands"
    },
    {
      "type": "Markdown",
      "id": "f375b93e-5d07-4e77-bd4f-ec768303f03e",
      "contents": [
        "All commands shown are based on the [Linux](https://en.wikipedia.org/wiki/Linux) and [macOS](https://www.apple.com/macos/) operating systems. If you are using [Windows](https://www.microsoft.com/en-us/windows), you can install the [Linux Subsystem for Windows](https://learn.microsoft.com/en-us/windows/wsl/install).",
        "",
        "Please note that the commands shown here may not work in the [Windows console](https://en.wikipedia.org/wiki/Windows_Console), [Windows terminal](https://github.com/microsoft/terminal) or [PowerShell](https://learn.microsoft.com/en-us/powershell/)."
      ]
    },
    {
      "type": "Heading",
      "id": "57c33b97-581a-4a0f-9617-639769ba7597",
      "level": "H3",
      "title": "Internet access"
    },
    {
      "type": "Markdown",
      "id": "fc594c3a-44c5-4fca-bbaf-e57df1e04347",
      "contents": [
        "We will be downloading some things from the internet. Thus, a good (not necessarily blazing fast) internet connection will be required."
      ]
    },
    {
      "type": "Heading",
      "id": "97a0fd3a-5678-4e61-a6d8-4c98275331c3",
      "level": "H3",
      "title": "Java"
    },
    {
      "type": "Markdown",
      "id": "500cd77b-d4d6-4620-937a-3d797dbd7d39",
      "contents": [
        "These examples require [Java 21](https://www.oracle.com/java/technologies/downloads/) (or newer), which can be freely downloaded from [here](https://www.oracle.com/java/technologies/downloads/).",
        "",
        "The examples will make use of [Maven](https://maven.apache.org/), but you don’t have to install it as we will be using the [Maven wrapper](https://maven.apache.org/wrapper/) included with the code."
      ]
    },
    {
      "type": "Command",
      "id": "e23ade33-7624-48b5-bfbf-5d643af3daa7",
      "commands": [
        "java --version"
      ],
      "output": {
        "caption": "The version of Java should be at least 21. Newer versions of Java will still work."
      }
    },
    {
      "type": "Heading",
      "id": "03dcc594-f2ae-4680-a6df-f57060a6838f",
      "level": "H3",
      "title": "Container runtime"
    },
    {
      "type": "Markdown",
      "id": "e19da4b3-5925-4a22-94b2-e4e5d7fcbbc1",
      "contents": [
        "A container runtime, such as [Docker](https://www.docker.com/) and [Docker Desktop](https://www.docker.com/products/docker-desktop/) (which is not a free product) or [Colima](https://github.com/abiosoft/colima), is required to run the [Nginx reverse proxy](https://nginx.org/en/) that will act as a gateway for the different microservices, [Jaeger](https://www.jaegertracing.io/) to capture and render distributed tracing, and [RabbitMQ](https://www.rabbitmq.com/) to exchange messages between the microservices. These are a bit of an advanced topic, and you don’t have to know what each does yet. We will cover each later on."
      ]
    },
    {
      "type": "Command",
      "id": "8f8cf393-45cb-43ec-8d7c-193cc41f18c6",
      "commands": [
        "docker pull nginx:1.26.0"
      ]
    },
    {
      "type": "Markdown",
      "id": "5496ce3e-9e5c-40a7-a7b7-c2e5bd9abb39",
      "contents": [
        "> **Why are you using a specific version of Nginx instead of the latest?**",
        ">",
        "> The `latest` tag points to the current latest version, which changes once a new version is released. While it is a good practice to use the latest version, it is also important to have reproducible builds. When we build an artefact from source, such as a JAR file or a container image, we don’t expect it to change if the source does not change. But if we use the `latest` tag, we risk of producing a different application even when our code does not change. This breaks the reproducible principle."
      ]
    },
    {
      "type": "Heading",
      "id": "3afdda9e-0fae-4fe0-8c9a-a2120a3d497e",
      "level": "H3",
      "title": "Version control (_Optional_)"
    },
    {
      "type": "Markdown",
      "id": "9c57a07b-38bb-4087-973f-3750f280e23f",
      "contents": [
        "[Git](https://git-scm.com/) is optional but recommended as it will enable you to commit changes and compare different points during the refactoring."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "bf3c6924-7c7c-45e5-a49f-3072c325b8ab",
      "commands": [
        "git --version"
      ],
      "output": {
        "caption": "While any recent version of GIT will suffice, it is always recommended to run with the latest (and greatest version)."
      },
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Heading",
      "id": "eb292716-ef72-4ae9-bd19-ead650fdc220",
      "level": "H3",
      "title": "Working directory"
    },
    {
      "type": "Markdown",
      "id": "5f5cabcd-fb3e-458e-9625-24456b175ed1",
      "contents": [
        "You can create these examples in any working directory you like, such as `~/workshops/software-architecture-and-microservices`. All commands shown are to be executed from the same working directory. Some commands will start a [subshell](https://en.wikipedia.org/wiki/Child_process) and change to the new directory if needed, as shown below.",
        "",
        "```",
        "(cd child-dir",
        "pwd",
        ")",
        "```",
        "",
        "To run this command, simply copy and paste it into the terminal at your working directory.",
        "",
        "> **What is a subshell and why did you use it?**",
        ">",
        "> A subshell is a child shell or process launched by a shell (or shell script). Some changes made to the subshell, such as changing the working directory (`cd <PATH>`), do not apply to the parent shell, so you don’t have to move back and forth between directories. Don’t worry if you have never used subshells before; all the commands needed are shown here and you would understand what’s happening.",
        ">",
        "> Say we need to run a command from subdirectory `a`. Then we have to first go into this subdirectory, execute the commands and the move back to the working directory, as shown next",
        ">",
        "> ```",
        "> cd a",
        "> command 1",
        "> command 2",
        "> command 3",
        "> cd ..",
        "> ```",
        ">",
        "> Say that any of the commands fail, then you will never execute the last command (`cd ..`) that gets you back to the current working directory. On the other hand, running this from within a subshell, we can change the subshell current working directory without changing our working directory.",
        ">",
        "> ```",
        "> (cd a",
        "> command 1",
        "> command 2",
        "> command 3",
        "> )",
        "> ```",
        ">",
        "> Note that we don’t need to include the `cd ..` command, as current working directory is only changed for the subshell.",
        "",
        "If you are working in a non-empty directory, please make sure to delete the directories that will be created during this workshop. This removes any residual files from a previous run if you are running the workshop for the second time. This is not necessary if you are running the workshop for the first time and none of these directories already exist."
      ]
    },
    {
      "type": "Command",
      "id": "6d5f3bb7-2e51-4369-bbc6-3a8a061f4b60",
      "commands": [
        "rm -rf './demo-application'",
        "rm -rf './demo-application-cart'",
        "rm -rf './demo-application-catalogue'",
        "rm -rf './demo-application-common'",
        "rm -rf './demo-application-db-migration'",
        "rm -rf './demo-application-reverse-proxy'"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Markdown",
      "id": "b00d5814-da52-498a-b919-5744e9b3ab25",
      "contents": [
        "That’s it. We are now ready to start."
      ]
    },
    {
      "type": "Heading",
      "id": "b44aa87f-35b6-43b1-92a8-54d3b5ec8962",
      "level": "H2",
      "title": "Layered monolithic architecture"
    },
    {
      "type": "Markdown",
      "id": "42671634-03e1-4f87-9659-b2c1b13e4742",
      "contents": [
        "Software architecture is quite complex, and it cannot be easily distilled into a simple definition. [Ralph Johnson](https://en.wikipedia.org/wiki/Ralph_Johnson_(computer_scientist)) captured this best when he said:",
        "",
        "> “_Architecture is about the important stuff. Whatever that is._”\\",
        "> ([reference](https://martinfowler.com/architecture/))",
        "",
        "One of the best analogies of software architecture I came across was that of city planning. When planning a city, we need to organise residential, commerce and industry areas, and we need to connect these together through transportation, as shown next.",
        "",
        "![City planning](./assets/images/City%20planning.png)",
        "",
        "On the other hand, decorating houses, that’s not part of the city planning and everyone is free to decorate their houses as they see fit.",
        "",
        "Same with software architecture. Software architecture focuses more on the bigger picture. For example, our application comprises two components, the cart and the catalogue components. Software architecture defines how these two will interact with each other but not necessarily goes into the detail whether we use normal classes or [records](https://openjdk.org/jeps/395) to represent data.",
        "",
        "Software architecture is very hard to define, but things will get clearer as we see some examples. If this is still very unclear to you, don’t worry. Just hang on for a bit more and things will start getting clearer once you see an example or two.",
        "",
        "A monolithic architecture is a software design pattern where all components of an application are integrated into a single, self-contained unit. This means that the user interface, application logic, and data access layers are all packaged and deployed together.",
        "",
        "If we go back to our application, in a monolithic architecture the cart and the catalogue components will be found in one application. We create a single Java project that will contain all the code needed by both the cart and catalogue. We then build this one Java project, test it and run it as a single process (application). There is a distinction between an application and a process, but we will explore that in a bit, so that for now we can stay focused on monolithic architecture.",
        "",
        "![As a monolithic application](./assets/images/As%20a%20monolithic%20application.png)",
        "",
        "Monolithic applications are typically easier to develop initially because everything is contained within one codebase, making it straightforward to manage and deploy.",
        "",
        "The opposite of monolithic architecture is a distributed architecture. In a distributed architecture, components of an application are deployed as independent services running in their own processes possible on different machines. For example, our application comprising the catalogue and cart components, will have two services each running on their own process (possible on different machines). Note that while we still have one application, individual parts of the application are running in separate processes.",
        "",
        "![As a distributed application](./assets/images/As%20a%20distributed%20application.png)",
        "",
        "Distributed architectures add a level of complexity, as we will see later on, as we need to manage multiple codebases and multiple services and also make them work together. While distributed architectures are nice to have on your CV and come with some other benefits, it is better to start with a monolithic architecture. Monolithic architectures have far less moving parts than distributed architectures thus are easier to think about as everything is one place.",
        "",
        "So far we spoke about monolithic architectures, but we have not yet mentioned the word “_layered_”. Going back to the city planning analogy, after finding a residential area we still need to plan this. The following diagram shows how the residential area is organised into four other categories.",
        "",
        "![City planning - Residential](./assets/images/City%20planning%20-%20Residential.png)",
        "",
        "The above diagram is grouping the buildings by their types. Our application will have code related to the database, the web requests and business logic and the like. Will we place all the classes in one package? No.",
        "",
        "A layered monolithic architecture is a monolithic architecture where the classes are organised by their type (where these belong in the technology stack). Similar to the residential planning diagram shown above, where the buildings are grouped by their type, classes related to the database will be grouped under one package, while the classes related to the web requests will be grouped under another package, as shown below.",
        "",
        "![Layered monolithic architecture file organisation](./assets/images/Layered%20monolithic%20architecture%20file%20organisation.png)",
        "",
        "This is one of the most common monolithic architecture styles, or at least it was one of the most common monolithic architecture styles. In larger (and older) organisations, teams were typically organised by technology. For example the database folks would be in the database team while the web/front-end developers would be in a different team and each will work on multiple projects at one go. Organising the applications by technology stack fits well the teams’ structure, as the database folks would only work on the database and the code found in the database package. [Melvin E. Conway](https://en.wikipedia.org/wiki/Melvin_Conway) made this observation in 1967, which took his name [Conway’s law](https://en.wikipedia.org/wiki/Conway%27s_law).",
        "",
        "> “_Organizations which design systems (in the broad sense used here) are constrained to produce designs which are copies of the communication structures of these organizations._”\\",
        "> —Melvin E. Conway, How Do Committees Invent?",
        "",
        "There are other ways we can organise the monolithic application, but we will explore these later on.",
        "",
        "Let’s head to the next section where we will create our project."
      ]
    },
    {
      "type": "Heading",
      "id": "b38b5134-9100-4a83-bf10-1b54c973f208",
      "level": "H3",
      "title": "The framework"
    },
    {
      "type": "Markdown",
      "id": "0e1fa129-5134-4142-8994-f153f6c8a091",
      "contents": [
        "While we can create the whole application from scratch, that’s not necessary nowadays as there are many frameworks that we can take advantage from to make our lives simpler. Frameworks like [Spring Boot](https://spring.io/projects/spring-boot), [Micronaut](https://micronaut.io/), [Quarkus](https://quarkus.io/) and [Helidon](https://helidon.io/) are some of the many great frameworks that we can use to base our application on. While some of these frameworks may be new to you, you may already be aware of Spring Boot. No surprise there as it is the most popular framework according to [Google Trends](https://trends.google.com/trends/explore?cat=32&date=today%203-m&q=Spring%20Boot,Micronaut,Quarkus,Helidon&hl=en-US), by far, as shown below.",
        "",
        "![The framework Google trends](./assets/images/The%20framework%20Google%20trends.png)\\",
        "([reference](https://trends.google.com/trends/explore?cat=32&date=today%203-m&q=Spring%20Boot,Micronaut,Quarkus,Helidon&hl=en-US))",
        "",
        "Given its popularity and abundant resources, we will build our application on the Spring Boot framework.",
        "",
        "> **Why are we using Spring Boot when we are not using microservices?**",
        ">",
        "> This is a very common misconception. Yes, many Java applications use Spring Boot as it is very productive. As we will see shortly, it is very easy to build web based applications with Spring Boot and the [Spring Framework](https://spring.io/projects/spring-framework) in general.",
        ">",
        "> Spring Boot is a highly opinionated framework that enables rapid development by adding modules (in the form of [starter projects](https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-starters)) and minimising boilerplate code. For example, if you like to use a database, you can simply make use of the [Spring Boot Data JPA Starter project](https://spring.io/projects/spring-data-jpa) to access data from the database without writing a single database query.",
        ">",
        "> But this has nothing to do with the software architecture style. The other frameworks provide similar options that allow you to achieve many things with little boilerplate code and these frameworks can be used in distributed and monolithic architectures alike.",
        ">",
        "> At the end of this workshop you will have a better understanding of different architecture styles, and you will be able to make a distinction between a framework and a software architecture style.",
        "",
        "Spring Boot offers a convenient tool for creating Spring Boot projects called the [Spring Initializr](https://start.spring.io/). From this webpage, you can add the dependencies you need, and the Spring Initializr will generate a ZIP file containing all the essentials to get started.",
        "",
        "Let’s start by creating a Spring Boot application using the Spring Initializr. This [link](https://start.spring.io/#!type=maven-project&language=java&platformVersion=3.3.0&packaging=jar&jvmVersion=21&groupId=demo&artifactId=demo-application&name=Demo%20Application&description=A%20simple%20application%20used%20to%20demonstrate%20different%20architecture%20styles&packageName=demo&dependencies=web,data-jpa,h2,flyway) will automatically select all the necessary options, as shown below.",
        "",
        "![Spring Initializr](./assets/images/Spring%20Initializr.png)",
        "",
        "Ensure the following options are selected:",
        "",
        "- Project: **Maven**",
        "- Language: **Java**",
        "- Spring Boot: **3.3.0**",
        "- Project Metadata:",
        "  - Group: **demo**",
        "  - Artifact: **demo-application**",
        "  - Name: **Demo Application**",
        "  - Description: **A simple application used to demonstrate different architecture styles**",
        "  - Package name: **demo**",
        "  - Packaging: **Jar**",
        "  - Java: **21**",
        "- Dependencies:",
        "  - **Spring Web**",
        "  - **Spring Data JPA**",
        "  - **H2 Database**",
        "  - **Flyway Migration**",
        "",
        "You can download the ZIP file by either clicking the [_Generate_ button](https://start.spring.io/starter.zip?type=maven-project&language=java&bootVersion=3.3.0&baseDir=demo-application&groupId=demo&artifactId=demo-application&name=Demo%20Application&description=A%20simple%20application%20used%20to%20demonstrate%20different%20architecture%20styles&packageName=demo&packaging=jar&javaVersion=21&dependencies=web,data-jpa,h2,flyway) or by executing the following command:"
      ]
    },
    {
      "type": "Command",
      "id": "28a49113-18bf-4279-9098-101ab6b5862a",
      "commands": [
        "# Do not download if the file already exists",
        "if [ ! -f './demo-application-starter-3.3.0.zip' ]; then",
        "  echo 'Downloading Spring Boot starter project'",
        "  curl \\",
        "   --silent \\",
        "   --location \\",
        "   --output 'demo-application-starter-3.3.0.zip' \\",
        "   'https://start.spring.io/starter.zip?type=maven-project&language=java&bootVersion=3.3.0&baseDir=demo-application&groupId=demo&artifactId=demo-application&name=Demo%20Application&description=A%20simple%20application%20used%20to%20demonstrate%20different%20architecture%20styles&packageName=demo&packaging=jar&javaVersion=21&dependencies=web,data-jpa,h2,flyway'",
        "fi"
      ]
    },
    {
      "type": "Markdown",
      "id": "bf1eeefc-5487-4225-ad26-536c1aea7062",
      "contents": [
        "This command first checks whether a file named `./demo-application-starter-3.3.0.zip` already exists and only proceeds with the download if it does not, preventing unnecessary downloads if you already have the file.",
        "",
        "If you download the ZIP file manually, ensure it is saved in your working directory and renamed to `demo-application-starter-3.3.0.zip` to ensure the following commands work as expected.",
        "",
        "Extract the ZIP file:"
      ]
    },
    {
      "type": "Command",
      "id": "f5a9edcd-5eea-41a4-a55f-34023d3a3f86",
      "commands": [
        "unzip './demo-application-starter-3.3.0.zip'"
      ]
    },
    {
      "type": "Markdown",
      "id": "004df147-b34f-4425-a933-8fb2875a9190",
      "contents": [
        "The ZIP file will be extracted in a directory with the same name as the Maven artifact id, `demo-application`. Explore the application directory."
      ]
    },
    {
      "type": "Command",
      "id": "fa1af61d-bf09-4f4d-9359-ba8f3b93f7a1",
      "commands": [
        "tree './demo-application'"
      ],
      "output": {
        "caption": "The directory structure should like the following:"
      }
    },
    {
      "type": "Markdown",
      "id": "ba3bef42-8558-4f8c-9acf-e2a8f0508b29",
      "contents": [
        "The Spring Initializr includes some files that we don’t need, such as:",
        "",
        "- `./HELP.md` file: contains some information about the project layout and how to start",
        "- `./src/main/resources/static` directory: this empty directory was added to the project since we selected the Spring Web dependency",
        "- `./src/main/resources/templates` directory: this empty directory was added to the project since we selected the Spring Web dependency",
        "- `./src/test/java/demo/DemoApplicationTests.java` file: we will be adding our own tests",
        "",
        "Let’s start by removing the unnecessary files."
      ]
    },
    {
      "type": "Command",
      "id": "ab2bab34-072f-4929-8c48-b2f8537ffc69",
      "commands": [
        "rm './HELP.md'",
        "rm -r './src/main/resources/static'",
        "rm -r './src/main/resources/templates'",
        "rm './src/test/java/demo/DemoApplicationTests.java'"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "ebb2b2a8-efcd-4114-b363-0bc9e2c819f7",
      "contents": [
        "Let’s now have a loot at the `src` directory."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "256bead9-9655-45c8-a971-7a65eb80c1a6",
      "commands": [
        "tree './src'"
      ],
      "output": {
        "caption": "The directory structure should now look this."
      },
      "tags": [
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "df3b3e33-f7f1-4927-844f-2187f6c31fd3",
      "contents": [
        "By default, the Spring Initializr creates the main class with the project’s name (_Demo Application_ in our case) suffixed with _Application_ if this is not already there (`DemoApplication.java` in our case). Rename the main class to `Main.java`. While this is not strictly necessary, the rest of the code examples assume that the main class is called `Main.java`.",
        "",
        "> **Why renaming the main class?**",
        ">",
        "> This is more of a personal choice than anything. An application or a service tend to have one entry point and I like to call this `Main.java` and have this at the top package (`demo` in our example)."
      ]
    },
    {
      "type": "Command",
      "id": "9153f7c3-0ace-4e14-a829-3e76d541f7b2",
      "commands": [
        "mv \\",
        " './src/main/java/demo/DemoApplication.java' \\",
        " './src/main/java/demo/Main.java'"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "e5094a62-c313-48a5-b085-b61badb50177",
      "contents": [
        "We have just renamed the file. Now we need to rename the class too, to match the file name. In Java a public class much match the enclosing file name. Change the class name in the source code and replace tabs with spaces.",
        "",
        "Note that we have renamed the file using the command line. If rename the file from your IDE, it will also rename the class for you.",
        "",
        "The following command use of the `patch` command to apply changes to an existing file. If the file is not in the expected state, the patch will fail."
      ]
    },
    {
      "type": "Command",
      "id": "e4a995c2-e65a-490d-b8cd-a4d79fc6e81c",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/Main.java' << EOF",
        "--- a/src/main/java/demo/Main.java",
        "+++ b/src/main/java/demo/Main.java",
        "@@ -4,10 +4,9 @@",
        " import org.springframework.boot.autoconfigure.SpringBootApplication;",
        "",
        " @SpringBootApplication",
        "-public class DemoApplication {",
        "+public class Main {",
        " ",
        "-\tpublic static void main(String[] args) {",
        "-\t\tSpringApplication.run(DemoApplication.class, args);",
        "-\t}",
        "-",
        "+    public static void main(final String[] args) {",
        "+        SpringApplication.run(Main.class, args);",
        "+    }",
        " }",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "6f189961-36b3-4843-8bac-46145b6de655",
      "contents": [
        "The main class should now look like this."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "253ef45f-1d86-4917-bb24-f8d4d7184779",
      "path": "./demo-application/src/main/java/demo/Main.java"
    },
    {
      "type": "Markdown",
      "id": "76f6e6c3-2be2-44f7-a0b5-05bea428388b",
      "contents": [
        "The created `pom.xml` uses a mixture of tabs and spaces. Format the `pom.xml` file.",
        "",
        "While this has no impact on the application per se, it is good to apply a consistent formatting rule (in this case spaces instead of tabs). I also like to group the dependencies by their functionality, such as database."
      ]
    },
    {
      "type": "Command",
      "id": "e2cea3ca-8625-4316-bfc1-d94884acb5b8",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml\t2077-04-29 12:34:56",
        "+++ b/pom.xml\t2077-04-29 12:34:56",
        "@@ -1,54 +1,60 @@",
        " <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
        " <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
        "-\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">",
        "-\t<modelVersion>4.0.0</modelVersion>",
        "-\t<parent>",
        "-\t\t<groupId>org.springframework.boot</groupId>",
        "-\t\t<artifactId>spring-boot-starter-parent</artifactId>",
        "-\t\t<version>3.3.0</version>",
        "-\t\t<relativePath/> <!-- lookup parent from repository -->",
        "-\t</parent>",
        "-\t<groupId>demo</groupId>",
        "-\t<artifactId>demo-application</artifactId>",
        "-\t<version>0.0.1-SNAPSHOT</version>",
        "-\t<name>Demo Application</name>",
        "-\t<description>A simple application used to demonstrate different architecture styles</description>",
        "-\t<properties>",
        "-\t\t<java.version>21</java.version>",
        "-\t</properties>",
        "-\t<dependencies>",
        "-\t\t<dependency>",
        "-\t\t\t<groupId>org.springframework.boot</groupId>",
        "-\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>",
        "-\t\t</dependency>",
        "-\t\t<dependency>",
        "-\t\t\t<groupId>org.springframework.boot</groupId>",
        "-\t\t\t<artifactId>spring-boot-starter-web</artifactId>",
        "-\t\t</dependency>",
        "-\t\t<dependency>",
        "-\t\t\t<groupId>org.flywaydb</groupId>",
        "-\t\t\t<artifactId>flyway-core</artifactId>",
        "-\t\t</dependency>",
        "+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">",
        "+    <modelVersion>4.0.0</modelVersion>",
        " ",
        "-\t\t<dependency>",
        "-\t\t\t<groupId>com.h2database</groupId>",
        "-\t\t\t<artifactId>h2</artifactId>",
        "-\t\t\t<scope>runtime</scope>",
        "-\t\t</dependency>",
        "-\t\t<dependency>",
        "-\t\t\t<groupId>org.springframework.boot</groupId>",
        "-\t\t\t<artifactId>spring-boot-starter-test</artifactId>",
        "-\t\t\t<scope>test</scope>",
        "-\t\t</dependency>",
        "-\t</dependencies>",
        "+    <parent>",
        "+        <groupId>org.springframework.boot</groupId>",
        "+        <artifactId>spring-boot-starter-parent</artifactId>",
        "+        <version>3.3.0</version>",
        "+        <relativePath/> <!-- lookup parent from repository -->",
        "+    </parent>",
        " ",
        "-\t<build>",
        "-\t\t<plugins>",
        "-\t\t\t<plugin>",
        "-\t\t\t\t<groupId>org.springframework.boot</groupId>",
        "-\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>",
        "-\t\t\t</plugin>",
        "-\t\t</plugins>",
        "-\t</build>",
        "+    <groupId>demo</groupId>",
        "+    <artifactId>demo-application</artifactId>",
        "+    <version>0.0.1-SNAPSHOT</version>",
        "+    <name>Demo Application</name>",
        "+    <description>A simple application used to demonstrate different architecture styles</description>",
        " ",
        "+    <properties>",
        "+        <java.version>21</java.version>",
        "+    </properties>",
        "+",
        "+    <dependencies>",
        "+        <!-- Web -->",
        "+        <dependency>",
        "+            <groupId>org.springframework.boot</groupId>",
        "+            <artifactId>spring-boot-starter-web</artifactId>",
        "+        </dependency>",
        "+",
        "+        <!-- Database -->",
        "+        <dependency>",
        "+            <groupId>com.h2database</groupId>",
        "+            <artifactId>h2</artifactId>",
        "+        </dependency>",
        "+        <dependency>",
        "+            <groupId>org.flywaydb</groupId>",
        "+            <artifactId>flyway-core</artifactId>",
        "+        </dependency>",
        "+        <dependency>",
        "+            <groupId>org.springframework.boot</groupId>",
        "+            <artifactId>spring-boot-starter-data-jpa</artifactId>",
        "+        </dependency>",
        "+",
        "+        <!-- Testing -->",
        "+        <dependency>",
        "+            <groupId>org.springframework.boot</groupId>",
        "+            <artifactId>spring-boot-starter-test</artifactId>",
        "+            <scope>test</scope>",
        "+        </dependency>",
        "+    </dependencies>",
        "+",
        "+    <build>",
        "+        <plugins>",
        "+            <plugin>",
        "+                <groupId>org.springframework.boot</groupId>",
        "+                <artifactId>spring-boot-maven-plugin</artifactId>",
        "+            </plugin>",
        "+        </plugins>",
        "+    </build>",
        " </project>",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "23ee6ed6-031f-476a-9c4d-975ef6bf96ef",
      "contents": [
        "The `pom.xml` file should now look like this."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "201f7a6f-c814-4729-aa6d-c253195479c6",
      "path": "./demo-application/pom.xml"
    },
    {
      "type": "Markdown",
      "id": "32c76fc4-0393-4e1b-acfa-ea85750da2e9",
      "contents": [
        "Spring Boot application support a [banner file](https://docs.spring.io/spring-boot/reference/features/spring-application.html#features.spring-application.banner) which is printed when the application starts. Add a banner to our application."
      ]
    },
    {
      "type": "Command",
      "id": "b4cbc37b-f7c5-4d07-a9bb-c4d6ae6ae028",
      "commands": [
        "cat << EOF > './src/main/resources/banner.txt'",
        "███╗   ███╗ ██████╗ ███╗   ██╗ ██████╗ ██╗     ██╗████████╗██╗  ██╗██╗ ██████╗     ██╗██╗      █████╗ ██╗   ██╗███████╗██████╗ ███████╗██████╗ ██╗",
        "████╗ ████║██╔═══██╗████╗  ██║██╔═══██╗██║     ██║╚══██╔══╝██║  ██║██║██╔════╝    ██╔╝██║     ██╔══██╗╚██╗ ██╔╝██╔════╝██╔══██╗██╔════╝██╔══██╗╚██╗",
        "██╔████╔██║██║   ██║██╔██╗ ██║██║   ██║██║     ██║   ██║   ███████║██║██║         ██║ ██║     ███████║ ╚████╔╝ █████╗  ██████╔╝█████╗  ██║  ██║ ██║",
        "██║╚██╔╝██║██║   ██║██║╚██╗██║██║   ██║██║     ██║   ██║   ██╔══██║██║██║         ██║ ██║     ██╔══██║  ╚██╔╝  ██╔══╝  ██╔══██╗██╔══╝  ██║  ██║ ██║",
        "██║ ╚═╝ ██║╚██████╔╝██║ ╚████║╚██████╔╝███████╗██║   ██║   ██║  ██║██║╚██████╗    ╚██╗███████╗██║  ██║   ██║   ███████╗██║  ██║███████╗██████╔╝██╔╝",
        "╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝ ╚══════╝╚═╝   ╚═╝   ╚═╝  ╚═╝╚═╝ ╚═════╝     ╚═╝╚══════╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚══════╝╚═════╝ ╚═╝",
        "Layered Monolithic Application as a Single Project",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "cdf66482-de4e-4884-b3b1-b4ca1f04e03b",
      "contents": [
        "The `banner.txt` file should now look like this."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "92452045-f6c9-45f4-9500-99094d9128d5",
      "path": "./demo-application/src/main/resources/banner.txt"
    },
    {
      "type": "Markdown",
      "id": "f2ea2d75-15c8-49a9-a5a3-30db53ac9e7f",
      "contents": [
        "Build the project"
      ]
    },
    {
      "type": "Command",
      "id": "66876f2e-887c-456b-b0b1-57e0f8216548",
      "commands": [
        "./mvnw clean verify"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "4d44aa90-2b72-48a5-b125-d13261e89763",
      "contents": [
        "> **Why using the `verify` Maven phase?**",
        "> ",
        "> The [Maven `verify` phase](https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html) runs both the unit tests and the integration tests. While that may be slow while developing, it is best to start with it and the switch to package if the integration tests becomes too heavy. Please note that long-running tests may be an indication that some parts of the application and/or tests may require attention."
      ]
    },
    {
      "type": "Markdown",
      "id": "be01b726-2cea-47da-ab08-333ddcabe367",
      "contents": [
        "The application built successfully."
      ]
    },
    {
      "type": "Markdown",
      "id": "e49f3ebe-2e6c-4f92-8da5-e325a167a235",
      "contents": [
        "Commit these changes so that you can always revert back to this point.",
        "",
        "The following example uses my name (`Albert Attard`) and email address (`albert.attard@oracle.com`). Please don’t forget to update these with your details."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "f0b9205f-5586-46a4-b825-f321e09795f9",
      "commands": [
        "CAT << EOF >> '.gitignore'",
        "",
        "### Ignore the SW commands scripts as these are temporary files that do not need to be version controlled ###",
        ".sw-commands-*.sh",
        "EOF",
        "",
        "MESSAGE='Create project'",
        "git init --initial-branch main",
        "git config user.name 'Albert Attard'",
        "git config user.email 'albert.attard@oracle.com'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'Create a simple Spring Boot project using the Spring initializer and customized it to cater our needs.'",
        "git tag --annotate 'v1.0' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "bcd38e92-744d-45a2-b8bb-6b61b97426dd",
      "contents": [
        "By now we have a simple application that runs, but does nothing. Our application needs to perform the following tasks:",
        "",
        "- Provide item information (mainly the _name_ and its _description_) from our catalogue.",
        "- Allow new catalogue items to be added.",
        "- View the contents of a cart.",
        "- Allow new items to be added to a shopping cart.",
        "",
        "Given that the cart has a dependency on the catalogue, it is best to start with the catalogue features first. That’s the topic of the next section."
      ]
    },
    {
      "type": "Heading",
      "id": "07f90f66-e538-4292-b9ad-f65b43bc4ccd",
      "level": "H3",
      "title": "The catalogue feature"
    },
    {
      "type": "Markdown",
      "id": "b7bcc17f-2871-4e19-9592-bdd84d60924d",
      "contents": [
        "The catalogue feature will persist the data in the database and will make this data available through a REST/HTTP endpoint. We will have three layers as shown below.",
        "",
        "![Three layers and communication flow](./assets/images/Three%20layers%20and%20communication%20flow.png)",
        "",
        "Note that each layer is expected to communicate with the layer underneath it, and it cannot bypass it. For example, the business layer is not expected to interact with the database directly."
      ]
    },
    {
      "type": "Markdown",
      "id": "2df227df-fce4-4457-8cd3-2a2d62c203ee",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "b6a85707-2704-41e0-9716-cde5c7503fe8",
      "commands": [
        "git tag --annotate 'v2.0' --message 'Before adding the catalogue feature'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "dbf52f62-253a-4a0f-b416-26c04527c9db",
      "contents": [
        "You can list all current tags using the [`git tag` command](https://git-scm.com/book/en/v2/Git-Basics-Tagging) to list the current tags."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "b7cfee3a-ab4f-4584-b592-89a17d615453",
      "commands": [
        "git tag --sort=taggerdate -n | cat"
      ],
      "output": {
        "caption": "So far we have the following tags."
      },
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "dcc0e0bb-04ac-4953-a01a-87b0f95a868c",
      "contents": [
        "We will start working on the first two tasks, which are:",
        "",
        "- Provide item information (mainly the _name_ and its _description_) from our catalogue.",
        "- Allow new catalogue items to be added.",
        "",
        "To achieve these, we need to create the following:",
        "",
        "- A database migration script, `V1__create_catalogue.sql`, to create and populate the catalogue item table called `catalogue_item`.",
        "- An entity class, `CatalogueItemEntity`, to represent this table in the database.",
        "- A repository interface, `CatalogueItemRepository`, to read (and write) data from the `catalogue_item` table for us.",
        "- A service, `CatalogueItemService`, to fetch data from the repository and return it to the rest layer.",
        "- Transfer objects (_TO_), `CatalogueItemTo` and `NewCatalogueItemTo`, to represent the JSON objects exchanged between the user and the application.",
        "- A REST controller, `CatalogueItemController`, to receive web requests from the user and reply with JSON objects.",
        "",
        "The interaction between these classes is illustrated in the following diagram.",
        "",
        "![Overview of classes and packages](./assets/images/Overview%20of%20classes%20and%20packages.png)",
        "",
        "Let’s delve a bit deeper into each part, step by step, starting from the bottom and working our way up. Note that we will not explain each part in detail here, as this will be covered later when we create the actual files.",
        "",
        "- The script `V1__create_catalogue.sql` will contain the SQL code to create and populate the table. The application will not use this file directly after it has been executed and the database updated.",
        "- The class `CatalogueItemEntity` represents the `catalogue_item` table in the database. This class represents the catalogue item internally within our application. Note that this class is never sent to the user; its interaction stops at the `CatalogueItemController` class. We will discuss how this is converted in a bit.",
        "- The class `CatalogueItemRepository` provides methods to read and write data (in the form of `CatalogueItemEntity`) from the database. The service layer will use this repository to access the database.",
        "- The class `CatalogueItemService` is where all the business logic will reside. This layer allows us to test the business logic without constantly interacting with the database. Whenever the REST controller needs anything from the database, it will go through this service class.",
        "- The class `CatalogueItemController` interacts with the user using the REST/HTTP protocol. It directs the user’s requests to the appropriate service functionality. This REST controller will expose two endpoints: one that returns the details of a single catalogue item and another that allows the addition of a new catalogue item.",
        "- The class `CatalogueItemTo` represents the `CatalogueItemEntity` to the user. When the REST controller receives the `CatalogueItemEntity` from the service, it converts it to `CatalogueItemTo` and sends the latter to the user.",
        "- The class `NewCatalogueItemTo` represents the new catalogue item to be added. This is first converted to `CatalogueItemEntity` by the REST controller before being passed to the service.",
        "",
        "These are all the files that we will be creating in this section. We will tackle both features together and build these layer by layer as we go. This is not necessarily the best option, and we will evaluate it at the end of the section."
      ]
    },
    {
      "type": "Heading",
      "id": "b79e84a3-62d1-44aa-95fc-aff4a57f6a84",
      "level": "H4",
      "title": "The data access object (dao) layer"
    },
    {
      "type": "Markdown",
      "id": "8dfdde2b-5faf-42fd-b801-eb269453338e",
      "contents": [
        "The catalogue entity comprises a _caption_ and a _description_ together with an _id_. This information will be saved into a database table, named `catalogue_item`. For simplicity and practicality, this table will also be pre-populated with some records so that we can then query the data and verify that everything is working as expected.",
        "",
        "In this workshop, we will be using [Flyway DB](https://flywaydb.org/) to create and update the database using version control mechanisms. [Liquibase](https://www.liquibase.com/) is an alternative to FlywayDB that perform similar functionalities. Both of these are great tools and I simply default to FlywayDB just because I am more familiar with it. Flyway DB, by default, looks under the `./src/main/resources/db/migration` directory and execute any pending scripts to keep the database up to date.",
        "",
        "Create the database creation script."
      ]
    },
    {
      "type": "Command",
      "id": "47c6361f-f492-4399-b52a-9eed4c4003d0",
      "commands": [
        "cat << EOF > './src/main/resources/db/migration/V1__create_catalogue.sql'",
        "CREATE TABLE catalogue_item (",
        "  id          INT AUTO_INCREMENT NOT NULL,",
        "  caption     VARCHAR(128) NOT NULL,",
        "  description TEXT NOT NULL,",
        "  PRIMARY KEY (id)",
        ");",
        "",
        "INSERT INTO catalogue_item (caption, description) VALUES",
        "  ('Leather Sofa',  'A very nice and comfortable sofa'),",
        "  ('Wooden Table',  'A large table ideal for 6 to 8 people'),",
        "  ('Plastic Chair', 'A robust plastic chair ideal for children and adults alike'),",
        "  ('Mug',           'The ideal way to start the day'),",
        "  ('LED TV',        'A very large TV set, ideal for those who love to binge-watch TV shows');",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "2b43fb8e-b993-46ca-abf8-ec86de2e6faf",
      "contents": [
        "The `./src/main/resources/db/migration/V1__create_catalogue.sql` database migration script should look like the following"
      ]
    },
    {
      "type": "DisplayFile",
      "id": "6a4a2f0a-a5ea-4d34-bfd2-608afb3dd61e",
      "path": "./demo-application/src/main/resources/db/migration/V1__create_catalogue.sql"
    },
    {
      "type": "Markdown",
      "id": "e05dcb96-a667-4392-a146-67571869fd6c",
      "contents": [
        "The [Java Persistence API (JPA)](https://www.oracle.com/java/technologies/persistence-jsp.html) reduces the boilerplate code required to read and write from and to a database. [Spring Data JPA](https://spring.io/projects/spring-data-jpa) takes this a step further as all we need to define are the entities and the repositories interfaces (without implementation).",
        "",
        "In this workshop we will make use of the Spring Data JPA to keep the boilerplate code to minimums. With that said, I am not a big fan of JPA and I prefer writing the code instead.",
        "",
        "Create data access objects (DAO) package"
      ]
    },
    {
      "type": "Command",
      "id": "95073b7a-255b-4993-bf1f-46819bb0dd3f",
      "commands": [
        "mkdir -p './src/main/java/demo/dao'"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "f65757f3-bd4a-458e-9fc7-3ef102fc12bd",
      "contents": [
        "So far we have one table, called `catalogue_item`. Thus, we need one entity class, called `CatalogueItemEntity`. Create the `CatalogueItemEntity` in the `demo.dao` package.",
        "",
        "Create the entity class that will be used to represent the catalogue items in the database."
      ]
    },
    {
      "type": "Command",
      "id": "bdba7e1d-1e7c-48d6-a35d-a290093e673f",
      "commands": [
        "cat << EOF > './src/main/java/demo/dao/CatalogueItemEntity.java'",
        "package demo.dao;",
        "",
        "import jakarta.persistence.Entity;",
        "import jakarta.persistence.GeneratedValue;",
        "import jakarta.persistence.GenerationType;",
        "import jakarta.persistence.Id;",
        "",
        "import java.io.Serial;",
        "import java.io.Serializable;",
        "import java.util.Objects;",
        "import java.util.function.Function;",
        "",
        "import static java.util.Objects.requireNonNull;",
        "",
        "@Entity(name = \"catalogue_item\")",
        "public class CatalogueItemEntity implements Serializable {",
        "",
        "    @Serial",
        "    private static final long serialVersionUID = 1L;",
        "",
        "    @Id",
        "    @GeneratedValue(strategy = GenerationType.IDENTITY)",
        "    private Long id;",
        "    private String caption;",
        "    private String description;",
        "",
        "    protected CatalogueItemEntity() {}",
        "",
        "    public CatalogueItemEntity(final String caption, final String description) {",
        "        this.caption = caption;",
        "        this.description = description;",
        "    }",
        "",
        "    public CatalogueItemEntity(final long id, final String caption, final String description) {",
        "        this.id = id;",
        "        this.caption = caption;",
        "        this.description = description;",
        "    }",
        "",
        "    public Long id() {",
        "        return id;",
        "    }",
        "",
        "    public String caption() {",
        "        return caption;",
        "    }",
        "",
        "    public String description() {",
        "        return description;",
        "    }",
        "",
        "    public <T> T map(final Function<CatalogueItemEntity, T> mapper) {",
        "        requireNonNull(mapper, \"Mapper cannot be nul\");",
        "        return mapper.apply(this);",
        "    }",
        "",
        "    @Override",
        "    public boolean equals(final Object object) {",
        "        return object instanceof final CatalogueItemEntity other",
        "                && Objects.equals(id, other.id)",
        "                && Objects.equals(caption, other.caption)",
        "                && Objects.equals(description, other.description);",
        "    }",
        "",
        "    @Override",
        "    public int hashCode() {",
        "        return Objects.hash(id, caption, description);",
        "    }",
        "",
        "    @Override",
        "    public String toString() {",
        "        return \"CatalogueItemEntity[id=%d, caption=%s, description=%s]\".formatted(id, caption, description);",
        "    }",
        "}",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "557dbc2d-74cd-41b6-8355-c0e5e25080e9",
      "contents": [
        "The entity class `./src/main/java/demo/dao/CatalogueItemEntity.java` should look like the following example."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "edb0964c-6780-4cf1-be3b-9832bea430a4",
      "path": "./demo-application/src/main/java/demo/dao/CatalogueItemEntity.java"
    },
    {
      "type": "Markdown",
      "id": "cbd7cc0c-394f-4046-9afc-c8ea539b8277",
      "contents": [
        "Create DAO repository class (interface), `CatalogueItemRepository`, that extends the Spring JPA [`ListCrudRepository<>` interface](https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/ListCrudRepository.html).",
        "",
        "The `ListCrudRepository` in Spring Data JPA is an interface that provides CRUD (Create, Read, Update, Delete) operations for managing entities in a database. It extends the [`CrudRepository` interface](https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/CrudRepository.html) and adds methods that return `List` of entities instead of `Iterable`, which can be more convenient to use in many scenarios. This repository interface simplifies database interactions by offering a set of methods for common operations without requiring custom implementations."
      ]
    },
    {
      "type": "Command",
      "id": "59c5b10a-6dc9-4d81-9199-6f5a2649e90c",
      "commands": [
        "cat << EOF > './src/main/java/demo/dao/CatalogueItemRepository.java'",
        "package demo.dao;",
        "",
        "import org.springframework.data.repository.ListCrudRepository;",
        "",
        "public interface CatalogueItemRepository extends ListCrudRepository<CatalogueItemEntity, Long> {}",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "9f4af95f-ddab-43db-9f1d-dedeac658f8a",
      "contents": [
        "The `CatalogueItemRepository` interface should look like the following example."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "8157a1aa-a19b-4cdf-9cd8-0665ec9df280",
      "path": "./demo-application/src/main/java/demo/dao/CatalogueItemRepository.java"
    },
    {
      "type": "Markdown",
      "id": "1a48e3ae-4a16-4fdd-b1e6-1f3076fc0a66",
      "contents": [
        "Note that despite having no methods, the implementation provided by Spring Data JPA will be able to read and write entities to the database. This simplifies the data access a lot as we don’t have to worry about it.",
        "",
        "We rarely expose the repositories to the external users. Instead, we hide the data access behind a service layer where we also put any business logic.",
        "",
        "> **Why do we separate the data access from the business logic?**",
        ">",
        "> Testing the data layer requires a database. While in-memory databases, such as [H2](https://www.h2database.com/html/main.html) or [HSQLDB](https://hsqldb.org/), are a great substitute for development, it is always recommended to run the tests against the same database that will be used in production. There may be subtle differences between the in-memory databases and the database running in production which may produce undesired behaviour under certain circumstances.",
        ">",
        "> Running many tests that require database connectivity becomes harder to maintain and tends to run slower, thus increasing the testing time. As hinted before we want to keep the testing time as low as possible and yet grant us the possibility to test and simulate all conditions.",
        ">",
        "> Splitting the database layer from the business logic or service layer allows us to mock the database layer and play out all scenarios without having to connect to the real database.",
        "",
        "This is the topic of the next section."
      ]
    },
    {
      "type": "Markdown",
      "id": "8c35e45a-fdb8-4d17-8e54-ba1555abfb00",
      "contents": [
        "Let’s see at the classes we have created so far."
      ]
    },
    {
      "type": "Command",
      "id": "68861d7a-a316-4e31-9208-a4a53c0a6f78",
      "commands": [
        "tree './src'"
      ],
      "output": {
        "caption": "The `src` directory should have the following structure."
      },
      "working_dir": "demo-application"
    },
    {
      "type": "Heading",
      "id": "06cac53f-e61a-4329-8b40-80fb4bbba06d",
      "level": "H4",
      "title": "The service layer"
    },
    {
      "type": "Markdown",
      "id": "745c9cec-a565-4d54-a629-91803bb0d820",
      "contents": [
        "Code related with the business logic, such as withdrawing money from a bank account, is usually saved in the business (or service) layer of the application. The bank service, in our example, will use the repository from the DAO layer to read the account balance and only allow the withdrawal if there is enough money. The service layer will determine whether the withdrawal should go through and then it should update the database accordingly using the repository from the DAO layer.",
        "",
        "The business logic does not deal with data rendering to the users. The mobile phone app, for example, will send a request to a controller (something that needs to be yet covered) which will intern delegate the request to the business layer. Then the business layer will simply reply back with the outcome. The controller is responsible for transmitting the result back to the mobile phone app.",
        "",
        "We have organised all the classes related with the data access under the `demo.dao` package. Let us now create a new package, called `demo.service`, where we will be saving the business related classes."
      ]
    },
    {
      "type": "Command",
      "id": "b42095fe-7ac5-491a-a606-08790264ec58",
      "commands": [
        "mkdir -p './src/main/java/demo/service'"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "93ada2d7-671d-4bd5-b86b-7a896fa83205",
      "contents": [
        "As mentioned before, the catalogue service class, that will be named `CatalogueItemService`, will act as a gateway between the database and anything that needs the data from the database. Unlike with Spring Data JPA, there are no shortcuts here, and we need to create the business logic."
      ]
    },
    {
      "type": "Command",
      "id": "d0efd84c-a59b-437b-92ee-fdb44708782b",
      "commands": [
        "cat << EOF > './src/main/java/demo/service/CatalogueItemService.java'",
        "package demo.service;",
        "",
        "import demo.dao.CatalogueItemEntity;",
        "import demo.dao.CatalogueItemRepository;",
        "import org.springframework.stereotype.Service;",
        "",
        "import java.util.Optional;",
        "",
        "import static java.util.Objects.requireNonNull;",
        "",
        "@Service",
        "public class CatalogueItemService {",
        "",
        "    private final CatalogueItemRepository repository;",
        "",
        "    public CatalogueItemService(final CatalogueItemRepository repository) {",
        "        this.repository = requireNonNull(repository, \"Repository cannot be null\");",
        "    }",
        "",
        "    public Optional<CatalogueItemEntity> findById(final long id) {",
        "        return repository.findById(id);",
        "    }",
        "",
        "    public CatalogueItemEntity add(final CatalogueItemEntity entity) {",
        "        requireNonNull(entity, \"Entity cannot be null\");",
        "        return repository.save(entity);",
        "    }",
        "}",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "f60f411b-3a52-4eca-a1b7-e20c0781a692",
      "contents": [
        "The service class, `./src/main/java/demo/service/CatalogueItemService.java`, should look like the following example."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "32ab38d4-083a-4076-9a26-a149d07f9911",
      "path": "./demo-application/src/main/java/demo/service/CatalogueItemService.java"
    },
    {
      "type": "Markdown",
      "id": "768ec011-95f1-4832-9947-61e4dc1803d0",
      "contents": [
        "The `CatalogueItemService` class takes an instance to the repository and exposes only two methods.",
        "",
        "- `findById()`: that given an id, it returns the catalogue item from the database if found, otherwise an [empty `Optional`](https://docs.oracle.com/en%2Fjava%2Fjavase%2F22%2Fdocs%2Fapi%2F%2F/java.base/java/util/Optional.html#empty()). The caller then decides what to do with this.\\",
        "  This addresses the first task that we need to perform, that is _Provide item information (mainly the name and its description) from our catalogue_.",
        "- `add()`: which adds the given catalogue item to the database.\\",
        "  This addresses the second task that we need to perform, that is _Allow new catalogue items to be added_.",
        "",
        "> **How come are we returning an empty `Optional` when the item with the given id is not found instead of throwing an exception?**",
        ">",
        "> This is a design decision and frameworks, such as [Spring MVC](https://docs.spring.io/spring-framework/reference/web/webmvc.html), also provide ways to centrally manage exceptions and reply back to the caller (user applications) with canned responses instead having to deal with these cases one by one. There is no one good way of implementing this.",
        ">",
        "> I went for this approach for two reasons.",
        "> - I prefer to delegate decision-making until the last moment. With the empty `Optional`, the caller can then decide what to do, whether to throw an exception or not. It also works well with functional programming style which I like a lot.",
        "> - Exceptions can be expensive and also tend to disrupt the program flow. Thus, I prefer a result object instead.",
        ">",
        "> Note that in this case we have two types of outcomes, either we find the item or not. In cases when we have more than two outcomes, then we need to use sealed types ([JEP 409: Sealed Classes](https://openjdk.org/jeps/409)) which work well with the switch statement following the implementation of [JEP 441: Pattern Matching for switch](https://openjdk.org/jeps/441)",
        "",
        "As hinted before, the business (or service) layer will not be dealing with the users requests. A controller will be handling that, which will in turn invoke the service layer. A request from a user will first hit the controller, which takes all the data the user sent and deserialises this into Java objects. These Java objects are then passed to the business layer, which will in turn pass them to the database layer. The database layer interacts with the database and passes the results back to the service layer, which in turn will pass the data up to the controller. Finally, the control will take the Java objects it received from the business layer and serialise them to then be sent to the user.",
        "",
        "So far we have created two out of the three layers that are needed by our application. The third and final layer will be created in the next section."
      ]
    },
    {
      "type": "Markdown",
      "id": "20c8b639-7cad-4179-a677-da7bcbf3f321",
      "contents": [
        "Let’s see at the classes we have created so far."
      ]
    },
    {
      "type": "Command",
      "id": "ffaaa8cd-1188-42b5-9815-b6334e4bae1c",
      "commands": [
        "tree './src'"
      ],
      "output": {
        "caption": "The `src` directory should have the following structure."
      },
      "working_dir": "demo-application"
    },
    {
      "type": "Heading",
      "id": "a5724a83-8a08-4396-a606-dce37aa03479",
      "level": "H4",
      "title": "The REST layer"
    },
    {
      "type": "Markdown",
      "id": "45e3aab9-da85-4074-9414-f8c4eef3477b",
      "contents": [
        "Our catalogue component will expose two REST endpoints. We will not be creating a web application to keep the examples as simple as possible and focus only on the aspects that are related to this workshop.",
        "",
        "We will be taking advantage of the [Spring Web](https://docs.spring.io/spring-framework/reference/web.html) to reduce our boilerplate code. Spring Web provides a series of annotations, such as [`@RestController` annotation](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html) and the [`@GetMapping` annotation](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/GetMapping.html) that instruct Spring Web to do a lot of things on our behalf allowing us to just focus on our application.",
        "",
        "We will start by creating a package, `demo.rest`, where all the classes related to the controllers will be saved."
      ]
    },
    {
      "type": "Command",
      "id": "ab78732e-222e-4e8c-b32d-ed97f38f4035",
      "commands": [
        "mkdir -p './src/main/java/demo/rest'"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "9aab27aa-bb65-4b40-a12b-04d68c2cca20",
      "contents": [
        "The user will be able to fetch an item from the catalogue giving its id and add an item to the catalogue. A common practice when dealing with data coming into and going out from the application is to introduce an anti-corruption layer.",
        "",
        "![Anti-corruption layer](./assets/images/Anti-corruption%20layer.png)",
        "",
        "An anti-corruption layer represents a set of classes that model the data coming into the application and then convert it to the business (domain or entity) data and vice versa. These classes allow us to shape the business data independent of the data being exchanged.",
        "",
        "> **Why introduce so much complexity?**",
        ">",
        "> This is a fair question especially when starting a new project. The data that is being exchanged is identical to the entity class. Many will argue that we should only introduce an anti corruption layer when this is required. And that’s a fair point.",
        ">",
        "> The data that the application exposes rarely maps the domain to 100%. While, yes it starts like that, once the application starts evolving and new columns/fields are added, these two views start digressing. What happens if we add sensitive information to one of our domain models (or entities) which is then exposed by mistake by another endpoint that we were not aware of?",
        ">",
        "> By having two sets of classes, one representing the business object, `CatalogueItemEntity` in our case and the transfer objects (_TO_) we avoid this problem. Also, we can shape the data as needed by each end without affecting the other.",
        "",
        "> **What is a Transfer Object (_TO_)?**",
        ">",
        "> A Transfer Object (_TO_), also known as a Data Transfer Object (DTO), is a simple Java object used to encapsulate and transfer data between different layers or components of an application. It primarily serves to carry data without containing any business logic, facilitating communication and reducing the number of method calls in distributed systems.",
        ">",
        "> For example, when the user fetches a catalogue item, the catalogue item entity is transformed into a transfer object which is then serialised as a JSON object and sent over the network.",
        "",
        "Create the `CatalogueItemTo` transfer object within the `demo.rest`"
      ]
    },
    {
      "type": "Command",
      "id": "36c3f296-90b7-4df1-aaca-74db91b39f88",
      "commands": [
        "cat << EOF > './src/main/java/demo/rest/CatalogueItemTo.java'",
        "package demo.rest;",
        "",
        "import demo.dao.CatalogueItemEntity;",
        "",
        "import java.util.function.Function;",
        "",
        "import static java.util.Objects.requireNonNull;",
        "",
        "public record CatalogueItemTo(long id, String caption, String description) {",
        "",
        "    public static CatalogueItemTo of(final CatalogueItemEntity entity) {",
        "        requireNonNull(entity, \"Entity cannot be null\");",
        "        return new CatalogueItemTo(entity.id(), entity.caption(), entity.description());",
        "    }",
        "",
        "    public <T> T map(final Function<CatalogueItemTo, T> mapper) {",
        "        requireNonNull(mapper, \"Mapper cannot be nul\");",
        "        return mapper.apply(this);",
        "    }",
        "}",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "bda5f333-bbde-47a3-80d9-b430805c49ea",
      "contents": [
        "The transfer object class `./src/main/java/demo/rest/CatalogueItemTo.java` should look like the following example."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "ca2fd748-024b-4397-ad4a-843affc5609f",
      "path": "./demo-application/src/main/java/demo/rest/CatalogueItemTo.java"
    },
    {
      "type": "Markdown",
      "id": "4a64fed1-d1af-4755-b5d1-70b7f1653c64",
      "contents": [
        "> **Would you recommend creating a method within the `CatalogueItemEntity`, such as `CatalogueItemEntity.asTo()`, that creates an instance of the `CatalogueItemTo`?**",
        ">",
        "> No. The business entities should not be aware of the transfer objects. The business entities should only be aware of the business logic and independent of outward facing classes.",
        "",
        "The `CatalogueItemTo` comprises three fields, the `id`, `caption` and `description` and is returned by the application when fetching a catalogue item. The `id` is auto incremented and this is only known once the entity is persisted in the database. Therefore, when a new item is added, the `id` is not known to the caller.",
        "",
        "This means that we need to have a new transfer object that represents the object being created. This object will only have a `caption` and a `description` but will not have an `id`. Create a new transfer object, named `NewCatalogueItemTo`, with only these two fields.",
        ""
      ]
    },
    {
      "type": "Command",
      "id": "92056b19-32ce-435d-a351-a9695c95fab6",
      "commands": [
        "cat << EOF > './src/main/java/demo/rest/NewCatalogueItemTo.java'",
        "package demo.rest;",
        "",
        "import demo.dao.CatalogueItemEntity;",
        "",
        "public record NewCatalogueItemTo(String caption, String description) {",
        "    public CatalogueItemEntity toEntity() {",
        "        return new CatalogueItemEntity(caption, description);",
        "    }",
        "}",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "08b2fd1d-89ca-4b99-8f24-02ca08a63117",
      "contents": [
        "The transfer object class `./src/main/java/demo/rest/NewCatalogueItemTo.java` should look like the following example."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "9d3fdabe-8cea-4ccc-8fb1-03a5be543b57",
      "path": "./demo-application/src/main/java/demo/rest/NewCatalogueItemTo.java"
    },
    {
      "type": "Markdown",
      "id": "e9f0b731-dee2-4342-ac4e-15b61414a24a",
      "contents": [
        "Notice the difference between these two classes, or records. The `NewCatalogueItemTo` is an input class and has a `toEntity()` method that creates a business entity (`CatalogueItemEntity`). On the other hand, the `CatalogueItemTo` class does not have a `toEntity()` method as this is an output class. It has a static factory method (`of()`) that creates the transfer object from a given entity. The following table captures these differences.",
        "",
        "| Transfer Object      | Type   | Mapping method                            | Return Type           |",
        "| -------------------- | ------ | ----------------------------------------- | --------------------- |",
        "| `CatalogueItemTo`    | Output | `CatalogueItemTo.of(CatalogueItemEntity)` | `CatalogueItemTo`     |",
        "| `NewCatalogueItemTo` | Input  | `NewCatalogueItemTo.toEntity()`           | `CatalogueItemEntity` |",
        "",
        "The transfer objects just represent the data being transferred. We need to add a controller that receives the REST requests and pass these to the business (service) layer. Create the REST controller."
      ]
    },
    {
      "type": "Command",
      "id": "2a64f880-00cb-44e6-b4db-67f1d5ad3879",
      "commands": [
        "cat << EOF > './src/main/java/demo/rest/CatalogueItemController.java'",
        "package demo.rest;",
        "",
        "import demo.service.CatalogueItemService;",
        "import org.springframework.http.ResponseEntity;",
        "import org.springframework.web.bind.annotation.GetMapping;",
        "import org.springframework.web.bind.annotation.PathVariable;",
        "import org.springframework.web.bind.annotation.PostMapping;",
        "import org.springframework.web.bind.annotation.RequestBody;",
        "import org.springframework.web.bind.annotation.RequestMapping;",
        "import org.springframework.web.bind.annotation.RestController;",
        "",
        "import java.net.URI;",
        "",
        "import static java.util.Objects.requireNonNull;",
        "",
        "@RestController",
        "@RequestMapping(\"/catalogue/item\")",
        "public class CatalogueItemController {",
        "",
        "    private final CatalogueItemService service;",
        "",
        "    public CatalogueItemController(final CatalogueItemService service) {",
        "        this.service = requireNonNull(service, \"Service cannot be null\");",
        "    }",
        "",
        "    @GetMapping(\"/{id}\")",
        "    public ResponseEntity<CatalogueItemTo> get(@PathVariable(value = \"id\") final long id) {",
        "        return service.findById(id)",
        "                .map(CatalogueItemTo::of)",
        "                .map(ResponseEntity::ok)",
        "                .orElseGet(() -> ResponseEntity.notFound().build());",
        "    }",
        "",
        "    @PostMapping()",
        "    public ResponseEntity<CatalogueItemTo> add(@RequestBody final NewCatalogueItemTo item) {",
        "        return item.toEntity()",
        "                .map(service::add)",
        "                .map(CatalogueItemTo::of)",
        "                .map(e -> ResponseEntity.created(location(e)).body(e));",
        "    }",
        "",
        "    private static URI location(final CatalogueItemTo item) {",
        "        requireNonNull(item, \"Catalogue item cannot be null\");",
        "        return URI.create(\"/catalogue/item/%d\".formatted(item.id()));",
        "    }",
        "}",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "757f3715-088b-4b8a-9d4e-89ec4d346f5f",
      "contents": [
        "The controller `./src/main/java/demo/rest/CatalogueItemController.java` should look like the following example."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "fdde5ff9-dc6c-4d52-82d2-7df2a7bf92b3",
      "path": "./demo-application/src/main/java/demo/rest/CatalogueItemController.java"
    },
    {
      "type": "Markdown",
      "id": "a8f7ffa0-4670-4a1b-91a3-06814e3dd39c",
      "contents": [
        "Our controller exposes two endpoints, the get item (`GET /catalogue/item/{ID}`) and the add item (`POST /catalogue/item`). The get item (`GET /catalogue/item/{ID}`) endpoint fetches the item from the service, then converts the `CatalogueItemEntity` to `CatalogueItemTo`, which is then returned to the caller as a JSON object, and if it is not found it returns a `404` error."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "3b39ba48-91cc-440b-bc30-5be96ff36a51",
      "path": "./demo-application/src/main/java/demo/rest/CatalogueItemController.java",
      "from_line": 26,
      "number_of_lines": 7
    },
    {
      "type": "Markdown",
      "id": "f70be6e8-949d-4e86-a2ef-9abe79fe0d85",
      "contents": [
        "The add item (`POST /catalogue/item`) endpoint converts the `NewCatalogueItemTo` to a `CatalogueItemEntity` (without an `id`) and then passes this to the service. The service adds the item to the database through the repository and then returns the item back. The service returns a new instance of `CatalogueItemEntity` with the created `id`, which is converted to `CatalogueItemTo` and returned to the caller. Note that the post request also returns the path that the caller can use to get this item."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "ae7e47fe-a511-4559-9b3f-65e6370722bc",
      "path": "./demo-application/src/main/java/demo/rest/CatalogueItemController.java",
      "from_line": 34,
      "number_of_lines": 7
    },
    {
      "type": "Markdown",
      "id": "d7233484-0396-44b4-b95d-1cd2d6cfc73d",
      "contents": [
        "As you can tell, I like functional programming, and it is my go-to style when possible. I am not saying that this is the best style, it is just a preference I have. Note that functional programming tends to perform worse that traditional programming (using ifs and loops) as it tend to become hard for the CPU to optimise such code.",
        "",
        "We have created a lot of code and not one single line of tests. When working in a production environment I tend to start with the test and then walk my way back, in a [test driven development](https://martinfowler.com/bliki/TestDrivenDevelopment.html) approach. Given that this can be hard to digest, I suppressed my urges and pushed the tests to the end.",
        "",
        "Let us start by creating the directory where the test class will reside."
      ]
    },
    {
      "type": "Command",
      "id": "cd263bbd-240b-4809-93a9-3b65339f8223",
      "commands": [
        "mkdir -p './src/test/java/demo/rest'"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "76e52a3f-f238-4ebe-8b87-b8b1ce01337b",
      "contents": [
        "Now, let us test both endpoints using the [`TestRestTemplate`](https://docs.spring.io/spring-boot/api/java/org/springframework/boot/test/web/client/TestRestTemplate.html)."
      ]
    },
    {
      "type": "Command",
      "id": "88f23c23-4f38-4de4-928d-f518081db424",
      "commands": [
        "cat << EOF > './src/test/java/demo/rest/CatalogueItemControllerTest.java'",
        "package demo.rest;",
        "",
        "import demo.rest.CatalogueItemTo;",
        "import demo.rest.NewCatalogueItemTo;",
        "import org.junit.jupiter.api.Nested;",
        "import org.junit.jupiter.api.Test;",
        "import org.springframework.beans.factory.annotation.Autowired;",
        "import org.springframework.boot.test.context.SpringBootTest;",
        "import org.springframework.boot.test.web.client.TestRestTemplate;",
        "import org.springframework.http.HttpStatus;",
        "import org.springframework.http.ResponseEntity;",
        "",
        "import java.util.regex.Pattern;",
        "",
        "import static org.assertj.core.api.Assertions.assertThat;",
        "",
        "@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)",
        "class CatalogueItemControllerTest {",
        "",
        "    @Autowired",
        "    private TestRestTemplate restTemplate;",
        "",
        "    @Nested",
        "    class GetCatalogueItemTest {",
        "",
        "        @Test",
        "        void returnTheCatalogueItemWhenGivenAnExistingId() {",
        "            final ResponseEntity<CatalogueItemTo> response = getCatalogueItemWithId(1);",
        "            assertThat(response.getStatusCode())",
        "                    .isEqualTo(HttpStatus.OK);",
        "            assertThat(response.getBody())",
        "                    .isEqualTo(new CatalogueItemTo(1L, \"Leather Sofa\", \"A very nice and comfortable sofa\"));",
        "        }",
        "",
        "        @Test",
        "        void returnNotFoundWhenGivenAnIdThatDoesNotExists() {",
        "            final ResponseEntity<CatalogueItemTo> response = getCatalogueItemWithId(10);",
        "            assertThat(response.getStatusCode())",
        "                    .isEqualTo(HttpStatus.NOT_FOUND);",
        "        }",
        "",
        "        private ResponseEntity<CatalogueItemTo> getCatalogueItemWithId(final long id) {",
        "            return restTemplate.getForEntity(\"/catalogue/item/%d\".formatted(id), CatalogueItemTo.class);",
        "        }",
        "    }",
        "",
        "    @Nested",
        "    class AddCatalogueItemTest {",
        "",
        "        @Test",
        "        void returnTheNewIdOfTheAddedCatalogueItem() {",
        "            final NewCatalogueItemTo item = new NewCatalogueItemTo(\"Green Plant\", \"Put a little life in your living room!!\");",
        "",
        "            final ResponseEntity<CatalogueItemTo> response = restTemplate.postForEntity(\"/catalogue/item\", item, CatalogueItemTo.class);",
        "            assertThat(response.getStatusCode())",
        "                    .isEqualTo(HttpStatus.CREATED);",
        "",
        "            final long id = assertThatHeaderLocationHasCatalogueItemId(response);",
        "",
        "            assertThat(response.getBody())",
        "                    .isEqualTo(new CatalogueItemTo(id, item.caption(), item.description()));",
        "        }",
        "",
        "        private static long assertThatHeaderLocationHasCatalogueItemId(final ResponseEntity<CatalogueItemTo> response) {",
        "            assertThat(response.getHeaders())",
        "                    .isNotNull();",
        "            assertThat(response.getHeaders().getLocation())",
        "                    .isNotNull();",
        "",
        "            final String location = response.getHeaders().getLocation().getPath();",
        "            assertThat(location)",
        "                    .matches(Pattern.compile(\"/catalogue/item/\\\\\\d\"));",
        "",
        "            return Long.parseLong(location.substring(16));",
        "        }",
        "    }",
        "}",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "0edcf5c5-0a16-4cde-bb34-7c0a11d825a4",
      "contents": [
        "The `./src/test/java/demo/rest/CatalogueItemControllerTest.java` test class should look like the following example."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "4697eb29-bdb0-458f-a6c9-f3c0e4f49ac4",
      "path": "./demo-application/src/test/java/demo/rest/CatalogueItemControllerTest.java"
    },
    {
      "type": "Markdown",
      "id": "8e617477-565f-4e12-88f8-96693fd1f379",
      "contents": [
        "Let’s break this test class into smaller parts",
        "",
        "This is an integration test, and we will be testing the whole application. Spring will start our application on a random port, and we will be making actual REST/HTTP requests to our application.",
        "",
        "Note that there is no reference to the controller (`CatalogueItemController`) or the services (`CatalogueItemService`) or repository (`CatalogueItemRepository`). In some cases, these classes are mocked so that we can simulate all paths. Given that this is a small application that uses an in-memory database, I decided not to mock any layers and test everything. This is normally discouraged because while tests with large scope can yield high confidence, they tend to fare poorly in pinpointing the source of the problem.",
        "",
        "If the test passes, we know that all layers are working well, and that’s all good. But if the test fails, the issue can be in any of the involved layers. Thus, the tests, given its broad scope, does not help you identify where the issue is.",
        "",
        "Some may argue that integration tests, such this one, tend to be slow. Yes, integration tests that involve databases or external systems tend to be slow, and I would recommend monitoring their performance and mock out the slow parts when needed. In our case, we are using an in-memory database, which means the database is running in the same process as our application. If we measure the performance of this test we will find that it is not as slow. Thus, we can start simple and evolve as needed."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "dd914034-d6fe-4ccc-9104-7b53eb3d6dc4",
      "path": "./demo-application/src/test/java/demo/rest/CatalogueItemControllerTest.java",
      "from_line": 17,
      "number_of_lines": 2
    },
    {
      "type": "Markdown",
      "id": "6673de66-eba2-4873-ac88-ff5d4c6ee0a0",
      "contents": [
        "Spring tests will create and wire an instance of `TestRestTemplate` for us. We will be using this to make requests to our application and then convert the response from JSON to Java objects.",
        "",
        "The [Spring MVC Test framework](https://docs.spring.io/spring-framework/reference/testing/spring-mvc-test-framework.html) is an alternative approach which will not start the whole application and provide useful hooks to make requests and assert responses. I prefer to limit the amount of mocking and test the real things as much as possible. With that being said, I do refactor the tests and adopt mocking when these improve the test performance without hindering the test coverage."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "c67decfc-92d5-42b7-a97a-bd3a691ac78b",
      "path": "./demo-application/src/test/java/demo/rest/CatalogueItemControllerTest.java",
      "from_line": 20,
      "number_of_lines": 2
    },
    {
      "type": "Markdown",
      "id": "9d4569c2-8075-4b1d-8803-93a5cf6c9d7d",
      "contents": [
        "We have two endpoints, the get item (`GET /catalogue/item/{ID}`) endpoint and the add item (`POST /catalogue/item`) endpoint. We will be testing these separately, each in their respective [nested (`@Nested`) Junit class](https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/Nested.html). This allows us to group and organise our tests. An alternative approach is to create a test class for every endpoint. I usually start with one test class, organise the tests by nested classes and refactor when the test classes get too long."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "c4a105c3-d670-4d73-ad39-6e155f5496c2",
      "path": "./demo-application/src/test/java/demo/rest/CatalogueItemControllerTest.java",
      "from_line": 23,
      "number_of_lines": 23
    },
    {
      "type": "Markdown",
      "id": "f9114de1-7361-461f-aed0-a314d4491090",
      "contents": [
        "Our test is testing both scenarios, one when the item is found and another when the item is not found.",
        "",
        "The add item endpoint \"always\" succeeds. We have no validations whatsoever and the request will always work. In a real application we will have validation, in which case it is recommended testing all validations to make sure that invalid entries do not make it through.",
        "",
        "> **If we validate the input in the UI, should we validate the input on the backend as well?**",
        ">",
        "> YES. I didn't forget the caps lock. You cannot trust the frontend with the validation. As you will see with the testing, we can simply make a [cURL](https://curl.se/) request to the application and push in invalid input.",
        ">",
        "> Frontend validation improves users experience as the user is prompted immediately whether their input is invalid and provides hints on how to address this. On the other hand the backend validation improves the data integrity as it ensures that the data coming into the application is valid and meets all validations criteria.",
        "",
        "> **What happens if we pass a very long caption?**",
        ">",
        "> That is a very good question. The application will fail to save the entry to the database. The database is not expecting a caption not longer than 128 letters (defined as `VARCHAR(128)`) and it will fail if we pass something longer.",
        ">",
        "> Ideally we have validation to ensure that this does not happen and in such cases we should test that these validations are working well. I left this out to keep this workshop focused, but I would not do that in real life. Always make sure that the transfer object is validated and all validations are tested.",
        "",
        "Given that we are only testing one case and not covering the edge cases where the input does not fit in the database table, we only have one test case."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "f342ee99-2c50-477d-9006-ec78aee389c2",
      "path": "./demo-application/src/test/java/demo/rest/CatalogueItemControllerTest.java",
      "from_line": 47,
      "number_of_lines": 30
    },
    {
      "type": "Markdown",
      "id": "26699faa-67db-4a07-b1b1-461d78a2cc4e",
      "contents": [
        "Build the project and run our test."
      ]
    },
    {
      "type": "Command",
      "id": "0cc5cf19-6b6b-45ce-87a1-e69e647a7f74",
      "commands": [
        "./mvnw clean verify"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "f8862204-79ff-4b56-b2f7-2ba3f3c1b7cd",
      "contents": [
        "The test should pass",
        "",
        "```",
        "...",
        "[INFO] ------------------------------------------------------------------------",
        "[INFO] BUILD SUCCESS",
        "[INFO] ------------------------------------------------------------------------",
        "...",
        "```",
        "",
        "As part of the process, Maven creates two JAR files."
      ]
    },
    {
      "type": "Command",
      "id": "fb69b3d3-943b-4e37-99af-ca455df78529",
      "commands": [
        "tree -L 1 --prune './demo'"
      ],
      "output": {
        "caption": "The application JAR files"
      },
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "c6928616-edbf-4ca5-a77d-051f1d908923",
      "contents": [
        "The `demo-application-0.0.1-SNAPSHOT.jar` contains the whole application and its dependencies, while the `demo-application-0.0.1-SNAPSHOT.jar.original` contains only our code.",
        "",
        "> **Which one should we use?**",
        ">",
        "> We should use the `demo-application-0.0.1-SNAPSHOT.jar` JAR file as only it contains everything. The `demo-application-0.0.1-SNAPSHOT.jar.original` is missing al dependencies and will not run as standalone JAR file."
      ]
    },
    {
      "type": "Markdown",
      "id": "f93918f7-1ec9-438c-908b-c2bdf01628bc",
      "contents": [
        "Try the catalogue features of the application by running the `./demo/demo-application-0.0.1-SNAPSHOT.jar` JAR file."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "49426b17-b9f4-489a-99fb-1258eda38e8e",
      "commands": [
        "# Start the application in the background",
        "java -jar './demo/demo-application-0.0.1-SNAPSHOT.jar' > './demo/output.txt' 2>&1 &",
        "",
        "# Wait for the application to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:8080/catalogue/item/1')\" -ne '200' ]; do echo 'Waiting for the application to start'; sleep 1; done"
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "592567cf-6eee-43ea-8506-f1397ed9eea9",
      "contents": [
        "This starts our application in the background and waits for it to start.",
        "",
        "Make a few requests to the catalogue items endpoint. We have the following catalogue items in the database.",
        "",
        "| `id` | `caption`     | `description`                                                         |",
        "| ---: | ------------- | --------------------------------------------------------------------- |",
        "|    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "|    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "|    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "|    4 | Mug           | The ideal way to start the day                                        |",
        "|    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "7fed6adf-8a28-4acb-92e6-7e345781e460",
      "commands": [
        "curl --silent 'http://localhost:8080/catalogue/item/1' | jq"
      ],
      "output": {
        "caption": "The catalogue item with id `1`",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "3269adc5-21b0-4359-8f8d-b4f6c286a67d",
      "contents": [
        "Stop the application once ready."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "16b3bc2b-4432-48a4-a028-0521bd273e5d",
      "commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "4b79a871-2305-409d-97e9-a3c875ac4fc4",
      "contents": [
        "Let’s see at the classes we have created so far."
      ]
    },
    {
      "type": "Command",
      "id": "f802c7fe-253e-496a-8252-b551b48249e3",
      "commands": [
        "tree './src'"
      ],
      "output": {
        "caption": "The `src` directory should have the following structure."
      },
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "6a7f1ca8-138c-4462-ac57-e8206a495116",
      "contents": [
        "Commit these changes so that you can always revert back to this point."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "140cc98d-784b-452a-8cb0-2ba72fb47a94",
      "commands": [
        "MESSAGE='Add the catalogue feature'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'Create the database tables and classes to support this feature.'",
        "git tag --annotate 'v2.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "82427f2c-4639-4c7a-9e6f-82690fe0dbb4",
      "contents": [
        "Let’s list all the tags we have so far."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "80503caa-7336-4cf1-b765-7205247f3a3e",
      "commands": [
        "git tag --sort=taggerdate -n | cat"
      ],
      "output": {
        "caption": "We now have the following tags"
      },
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "f5c7cb4f-c16f-44b7-abc2-ada34f6c7395",
      "contents": [
        "Our catalogue is now feature complete. The catalogue can return information about a single catalogue item and supports adding new items. The cart feature is next on our list, and that’s the topic of the next section."
      ]
    },
    {
      "type": "Heading",
      "id": "49cafea4-848f-41a9-8355-16f4830775ee",
      "level": "H3",
      "title": "The cart feature"
    },
    {
      "type": "Markdown",
      "id": "dbe0781d-9f1f-465b-80a5-5680b6dab2b2",
      "contents": [
        "The cart feature will persist the data in the database and will make this data available through a REST/HTTP endpoint. We will use the same three layers we have created before."
      ]
    },
    {
      "type": "Markdown",
      "id": "7a8c92e2-076e-442d-bd98-8b5a3adfc902",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "7f92482e-dd33-4a81-b4ed-8dd7f5705be1",
      "commands": [
        "git tag --annotate 'v3.0' --message 'Before adding the cart feature'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "5c522c6a-7e6d-4c25-a9ea-5773c58659cd",
      "contents": [
        "We have already completed the first two tasks from our list:",
        "",
        "- ~~Provide item information (mainly the _name_ and its _description_) from our catalogue~~.",
        "- ~~Allow new catalogue items to be added~~.",
        "- View the contents of a cart.",
        "- Allow new items to be added to a shopping cart.",
        "",
        "We will now focus on the last two tasks. To achieve these, we need to create the following:",
        "",
        "- A database migration script, `V2__create_cart.sql`, to create and populate the cart and cart item tables called `cart` and `cart_item` respectively.",
        "- An entity class, `CartEntity`, to represent cart table in the database.",
        "- An entity class, `CartItemEntity`, to represent cart item table in the database.",
        "- A composite primary key class, `CartItemEntityPrimaryKey`, to represent cart item table composite primary key.",
        "- A repository interface, `CartRepository`, to read (and write) data from the `cart` and `cart_item` tables for us.",
        "- A service, `CartService`, to fetch data from the repository and return it to the rest layer.",
        "- Transfer objects (_TO_), `CartTo` and `CartItemTo`, to represent the JSON objects exchanged between the user and the application.",
        "- A REST controller, `CartController`, to receive web requests from the user and reply with JSON objects.",
        "",
        "This is quite similar to the catalogue."
      ]
    },
    {
      "type": "Heading",
      "id": "76c9bfee-8834-403d-8046-f7906dd2b803",
      "level": "H4",
      "title": "The data access object (dao) layer"
    },
    {
      "type": "Markdown",
      "id": "1aebdbea-80de-4fd5-9b58-bd9244368fc1",
      "contents": [
        "The cart entity comprises a list of items and their respective quantity. This information will be saved into two database tables, named `cart` and `cart_item`. For simplicity and practicality, this table will also be pre-populated with some records so that we can then query the data and verify that everything is working as expected.",
        "",
        "Create a new version (`./src/main/resources/db/migration/V2__create_cart.sql`) of the database creation script.",
        "",
        "> **Can we edit the existing file (`V1__create_catalogue.sql`)?**",
        ">",
        "> Flyway keeps track of what files have been played and applied. If we modify a file that was already played, then flyway will raise an error (throw an exception) and our application will fail to start.",
        ">",
        "> With that being said, we are using an in-memory database, which means that our database is created every time the application starts. So in our case, we could have simply modified the first version of the SQL file. Furthermore, the same files are usually updated during development, but before these are pushed to the central repository and applied to production.",
        ">",
        "> Here I am assuming that the catalogue made it to production and the `V1__create_catalogue.sql` SQL file cannot be changed without causing any issues.",
        "",
        "Create a new database migration script."
      ]
    },
    {
      "type": "Command",
      "id": "e0dffcd2-c2ff-48e2-b719-815b7e772e96",
      "commands": [
        "cat << EOF > './src/main/resources/db/migration/V2__create_cart.sql'",
        "CREATE TABLE cart (",
        "  id INT AUTO_INCREMENT NOT NULL,",
        "  PRIMARY KEY (id)",
        ");",
        "",
        "CREATE TABLE cart_item (",
        "  cart_id     INT NOT NULL,",
        "  item_id     INT NOT NULL,",
        "  quantity    INT NOT NULL,",
        "  PRIMARY KEY (cart_id, item_id),",
        "  CONSTRAINT fk_cart_item_cart_id           FOREIGN KEY (cart_id) REFERENCES cart(id),",
        "  CONSTRAINT fk_cart_item_catalogue_item_id FOREIGN KEY (item_id) REFERENCES catalogue_item(id)",
        ");",
        "",
        "INSERT INTO cart () VALUES",
        "  (),",
        "  (),",
        "  ();",
        "",
        "INSERT INTO cart_item (cart_id, item_id, quantity) VALUES",
        "  (1, 1, 1),",
        "  (1, 5, 1),",
        "  (2, 2, 1),",
        "  (2, 3, 6),",
        "  (3, 4, 4);",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "71b8e5ec-aefa-4983-85cd-510898f8cd5d",
      "contents": [
        "The new database migration script (`./src/main/resources/db/migration/V2__create_cart.sql`) should look like the following example."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "2b991f25-2b71-4c07-bbc2-de11554dcffd",
      "path": "./demo-application/src/main/resources/db/migration/V2__create_cart.sql"
    },
    {
      "type": "Markdown",
      "id": "423705cd-b40a-4cd4-ac58-2fe103948355",
      "contents": [
        "This is a rehearsed example and I know that we will be having some duplicate code where we check if something is `null` and act accordingly. We will be creating the utilities class and methods before we actually need them.",
        "",
        "Create a `demo.common` package where we will be placing utilities and common code, like our `Mapper.java` class."
      ]
    },
    {
      "type": "Command",
      "id": "9c85326c-4947-4fd3-9cc5-2db55d413c4d",
      "commands": [
        "mkdir -p './src/main/java/demo/common'"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "f937d603-4ebd-4b52-8ed7-b7340d58db9a",
      "contents": [
        "Create a mapper class that takes an object and applies the mapping function only if the object is not `null`.",
        "",
        "```java",
        "final String string = null;",
        "final Integer length = mapIfNotNull(null, String::length);",
        "/* length will be null as the given string is null, but the method does not fail with a NullPointerException. */",
        "```",
        "",
        "Create the `Mapper.java` class."
      ]
    },
    {
      "type": "Command",
      "id": "4ab49705-083a-47e5-829c-cb2424b74d9c",
      "commands": [
        "cat << EOF > './src/main/java/demo/common/Mapper.java'",
        "package demo.common;",
        "",
        "import java.util.Optional;",
        "import java.util.function.Function;",
        "",
        "import static java.util.Objects.requireNonNull;",
        "",
        "public final class Mapper {",
        "",
        "    public static <T, R> R mapIfNotNull(final T object, final Function<T, R> mapper) {",
        "        requireNonNull(mapper, \"Mapper cannot be nul\");",
        "",
        "        return Optional.ofNullable(object)",
        "                .map(mapper)",
        "                .orElse(null);",
        "    }",
        "",
        "    private Mapper() {}",
        "}",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "16f9403e-f788-4fbd-9fa4-511aa2576e90",
      "contents": [
        "Create the cart DAO entity class in the (existing) `demo.dao` package where we have the catalogue DAO classes."
      ]
    },
    {
      "type": "Command",
      "id": "4c22b279-242b-4e79-936f-525c1dc04e5e",
      "commands": [
        "cat << EOF > './src/main/java/demo/dao/CartEntity.java'",
        "package demo.dao;",
        "",
        "import jakarta.persistence.CascadeType;",
        "import jakarta.persistence.Entity;",
        "import jakarta.persistence.GeneratedValue;",
        "import jakarta.persistence.GenerationType;",
        "import jakarta.persistence.Id;",
        "import jakarta.persistence.OneToMany;",
        "",
        "import java.io.Serial;",
        "import java.io.Serializable;",
        "import java.util.List;",
        "import java.util.Objects;",
        "",
        "import static java.util.Objects.requireNonNull;",
        "",
        "@Entity(name = \"cart\")",
        "public class CartEntity implements Serializable {",
        "",
        "    @Serial",
        "    private static final long serialVersionUID = 1L;",
        "",
        "    @Id",
        "    @GeneratedValue(strategy = GenerationType.IDENTITY)",
        "    private Long id;",
        "",
        "    @OneToMany(mappedBy = \"id.cart\", cascade = CascadeType.ALL)",
        "    private List<CartItemEntity> items;",
        "",
        "    protected CartEntity() {}",
        "",
        "    public Long id() {",
        "        return id;",
        "    }",
        "",
        "    public List<CartItemEntity> items() {",
        "        return items;",
        "    }",
        "",
        "    public void addItem(final CatalogueItemEntity item, final int quantity) {",
        "        requireNonNull(item, \"Catalogue item cannot be null\");",
        "",
        "        final CartItemEntityPrimaryKey cartItemId = new CartItemEntityPrimaryKey(this, item);",
        "        final CartItemEntity cartItem = new CartItemEntity(cartItemId, quantity);",
        "        items.add(cartItem);",
        "    }",
        "",
        "    public CartItemEntity findCartItemWithId(final Long id) {",
        "        return items.stream()",
        "                .filter(i -> id.equals(i.itemId()))",
        "                .findFirst()",
        "                .orElse(null);",
        "    }",
        "",
        "    @Override",
        "    public boolean equals(final Object object) {",
        "        return object instanceof final CartEntity other",
        "                && Objects.equals(id, other.id)",
        "                && Objects.equals(items, other.items);",
        "    }",
        "",
        "    @Override",
        "    public int hashCode() {",
        "        return Objects.hash(id, items);",
        "    }",
        "",
        "    @Override",
        "    public String toString() {",
        "        return \"CartEntity[id=%d, items=%s]\".formatted(id, items);",
        "    }",
        "}",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "9d68eb7f-c168-4cbf-b462-11f04e4f5caf",
      "contents": [
        "Create the cart item DAO entity class in the same package."
      ]
    },
    {
      "type": "Command",
      "id": "37a25030-8d68-4461-adcd-9c37d50d7edc",
      "commands": [
        "cat << EOF > './src/main/java/demo/dao/CartItemEntity.java'",
        "package demo.dao;",
        "",
        "import jakarta.persistence.EmbeddedId;",
        "import jakarta.persistence.Entity;",
        "",
        "import java.io.Serial;",
        "import java.io.Serializable;",
        "import java.util.Objects;",
        "",
        "import static demo.common.Mapper.mapIfNotNull;",
        "",
        "@Entity(name = \"cart_item\")",
        "public class CartItemEntity implements Serializable {",
        "",
        "    @Serial",
        "    private static final long serialVersionUID = 1L;",
        "",
        "    @EmbeddedId",
        "    private CartItemEntityPrimaryKey id;",
        "    private int quantity;",
        "",
        "    protected CartItemEntity() {}",
        "",
        "    public CartItemEntity(final CartItemEntityPrimaryKey id, final int quantity) {",
        "        this.id = id;",
        "        this.quantity = quantity;",
        "    }",
        "",
        "    public CartItemEntityPrimaryKey id() {",
        "        return id;",
        "    }",
        "",
        "    public Long itemId() {",
        "        return mapIfNotNull(id, CartItemEntityPrimaryKey::itemId);",
        "    }",
        "",
        "    public String itemCaption() {",
        "        return mapIfNotNull(id, CartItemEntityPrimaryKey::itemCaption);",
        "    }",
        "",
        "    public int quantity() {",
        "        return quantity;",
        "    }",
        "",
        "    public void adjustQuantityBy(final int offset) {",
        "        this.quantity += offset;",
        "    }",
        "",
        "    @Override",
        "    public boolean equals(final Object object) {",
        "        return object instanceof final CartItemEntity other",
        "                && Objects.equals(id, other.id)",
        "                && quantity == other.quantity;",
        "    }",
        "",
        "    @Override",
        "    public int hashCode() {",
        "        return Objects.hash(id, quantity);",
        "    }",
        "",
        "    @Override",
        "    public String toString() {",
        "        return \"CartItemEntity[id=%s, quantity=%d]\".formatted(id, quantity);",
        "    }",
        "}",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "b3b5bbf1-6db5-4827-ac09-7729edda54c7",
      "contents": [
        "Create the cart item composite primary key in the same package."
      ]
    },
    {
      "type": "Command",
      "id": "259959e8-e12d-4f5b-af2e-885fbb6677ce",
      "commands": [
        "cat << EOF > './src/main/java/demo/dao/CartItemEntityPrimaryKey.java'",
        "package demo.dao;",
        "",
        "import jakarta.persistence.Embeddable;",
        "import jakarta.persistence.JoinColumn;",
        "import jakarta.persistence.ManyToOne;",
        "",
        "import java.io.Serial;",
        "import java.io.Serializable;",
        "import java.util.Objects;",
        "",
        "import static demo.common.Mapper.mapIfNotNull;",
        "",
        "@Embeddable",
        "public class CartItemEntityPrimaryKey implements Serializable {",
        "",
        "    @Serial",
        "    private static final long serialVersionUID = 1L;",
        "",
        "    @ManyToOne(optional = false)",
        "    @JoinColumn(name = \"cartId\")",
        "    private CartEntity cart;",
        "    @ManyToOne(optional = false)",
        "    @JoinColumn(name = \"itemId\")",
        "    private CatalogueItemEntity item;",
        "",
        "    protected CartItemEntityPrimaryKey() {}",
        "",
        "    public CartItemEntityPrimaryKey(final CartEntity cart, final CatalogueItemEntity item) {",
        "        this.cart = cart;",
        "        this.item = item;",
        "    }",
        "",
        "    public Long cartId() {",
        "        return mapIfNotNull(cart, CartEntity::id);",
        "    }",
        "",
        "    public Long itemId() {",
        "        return mapIfNotNull(item, CatalogueItemEntity::id);",
        "    }",
        "",
        "    public String itemCaption() {",
        "        return mapIfNotNull(item, CatalogueItemEntity::caption);",
        "    }",
        "",
        "    @Override",
        "    public boolean equals(final Object object) {",
        "        return object instanceof final CartItemEntityPrimaryKey other",
        "                && Objects.equals(cartId(), other.cartId())",
        "                && Objects.equals(itemId(), other.itemId());",
        "    }",
        "",
        "    @Override",
        "    public int hashCode() {",
        "        return Objects.hash(cartId(), itemId());",
        "    }",
        "",
        "    @Override",
        "    public String toString() {",
        "        return \"CartItemEntityPrimaryKey[cartId=%s, itemId=%s]\"",
        "                .formatted(cartId(), itemId());",
        "    }",
        "}",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "f50a2d9e-d1b0-4a00-8a6f-0ffde794ba4f",
      "contents": [
        "In hindsight, we can now see where the `mapIfNotNull` method is used. In real life, we will first create the entities, then notice this opportunity for refactoring and then apply the refactoring. In this example we took a shortcut in the interest of time.",
        "",
        "Create DAO repository class (interface), `CartRepository`, that extends the Spring JPA `ListCrudRepository<>` interface."
      ]
    },
    {
      "type": "Command",
      "id": "2ddab748-8387-4ade-b4cf-002f4a06cd18",
      "commands": [
        "cat << EOF > './src/main/java/demo/dao/CartRepository.java'",
        "package demo.dao;",
        "",
        "import org.springframework.data.repository.ListCrudRepository;",
        "",
        "public interface CartRepository extends ListCrudRepository<CartEntity, Long> {}",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "0872cdd2-7e19-457a-bc1f-5bb6a0836795",
      "contents": [
        "The completes the data layer. The service layer is next in line."
      ]
    },
    {
      "type": "Heading",
      "id": "6093b7e5-ac61-4946-b83f-16bfa7f303e5",
      "level": "H4",
      "title": "The service layer"
    },
    {
      "type": "Markdown",
      "id": "234e9053-b705-4011-b366-73077b08aa28",
      "contents": [
        "The cart service will provide two functions. It fetches a cart given its id, and it adds an item to the cart. Create the cart service."
      ]
    },
    {
      "type": "Command",
      "id": "7f0badaa-9337-4e4d-8327-3cb16d5fe221",
      "commands": [
        "cat << EOF > './src/main/java/demo/service/CartService.java'",
        "package demo.service;",
        "",
        "import demo.dao.CartEntity;",
        "import demo.dao.CartItemEntity;",
        "import demo.dao.CartRepository;",
        "import demo.dao.CatalogueItemEntity;",
        "import demo.dao.CatalogueItemRepository;",
        "import jakarta.transaction.Transactional;",
        "import org.springframework.stereotype.Service;",
        "",
        "import java.util.Optional;",
        "",
        "import static java.util.Objects.requireNonNull;",
        "",
        "@Service",
        "public class CartService {",
        "",
        "    private final CartRepository cartRepository;",
        "    private final CatalogueItemRepository itemRepository;",
        "",
        "    public CartService(final CartRepository cartRepository,",
        "                       final CatalogueItemRepository itemRepository) {",
        "        this.cartRepository = requireNonNull(cartRepository, \"Cart repository cannot be null\");",
        "        this.itemRepository = requireNonNull(itemRepository, \"Catalogue item repository cannot be null\");",
        "    }",
        "",
        "    public Optional<CartEntity> findById(final long id) {",
        "        return cartRepository.findById(id);",
        "    }",
        "",
        "    @Transactional",
        "    public Optional<CartEntity> addItemToCart(final long cartId, final long itemId) {",
        "        final Optional<CartEntity> optionalCart = cartRepository.findById(cartId);",
        "",
        "        /* Cart not found */",
        "        if (optionalCart.isEmpty()) {",
        "            return Optional.empty();",
        "        }",
        "",
        "        final CartEntity cart = optionalCart.get();",
        "",
        "        final CartItemEntity itemInCart = cart.findCartItemWithId(itemId);",
        "        if (itemInCart == null) {",
        "            final Optional<CatalogueItemEntity> optionalItem = itemRepository.findById(itemId);",
        "",
        "            /* Catalogue Item not found */",
        "            if (optionalItem.isEmpty()) {",
        "                return Optional.empty();",
        "            }",
        "",
        "            cart.addItem(optionalItem.get(), 1);",
        "        } else {",
        "            itemInCart.adjustQuantityBy(1);",
        "        }",
        "",
        "        final CartEntity savedCart = cartRepository.save(cart);",
        "        return Optional.of(savedCart);",
        "    }",
        "}",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "06f43b64-b4cf-4f92-94a6-fedde6147c44",
      "contents": [
        "The add item to cart is a bit more involved than the other methods and merits some explanation."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "44792ca1-c8d6-4b39-bfa1-0f98489abb89",
      "path": "./demo-application/src/main/java/demo/service/CartService.java",
      "from_line": 31,
      "number_of_lines": 28
    },
    {
      "type": "Markdown",
      "id": "1c477a8d-0510-42e1-91ec-752c2fc92ed1",
      "contents": [
        "We have the cater for the following cases",
        "",
        "- If a cart with the given `cartId` is not found, then return an empty optional.",
        "- If a catalogue item with the given `itemId` is not found, then return an empty optional.",
        "- If the cart does not contain this item, then add the item to the cart with quantity of 1, save this to the database and returned the saved entity.",
        "- If the cart already contains this item, then increment its quantity, save this to the database and returned the saved entity.",
        "",
        "Note that we only fetch the catalogue item from the database if this is not already in the cart. Otherwise, we will be fetching the same item twice, once when fetching the cart and the second time when fetching the item.",
        "",
        "This wraps up our service layer. The controller is next in our list."
      ]
    },
    {
      "type": "Heading",
      "id": "c61987e3-d455-4042-b2bf-0d60cc800128",
      "level": "H4",
      "title": "The REST layer"
    },
    {
      "type": "Markdown",
      "id": "0055210f-f95d-4b5b-a5da-2ca35179724b",
      "contents": [
        "Our cart component will expose two REST endpoints without a user interface, similar ot the catalogue component.",
        "",
        "Create the `CartItemTo` transfer object in the `demo.rest` package."
      ]
    },
    {
      "type": "Command",
      "id": "11163af2-7f37-4ad0-821c-fe9a077d310d",
      "commands": [
        "cat << EOF > './src/main/java/demo/rest/CartItemTo.java'",
        "package demo.rest;",
        "",
        "import demo.dao.CartItemEntity;",
        "",
        "import static java.util.Objects.requireNonNull;",
        "",
        "public record CartItemTo(Long id, String caption, int quantity) {",
        "",
        "    public static CartItemTo of(final CartItemEntity entity) {",
        "        requireNonNull(entity, \"Entity cannot be null\");",
        "",
        "        final Long id = entity.itemId();",
        "        final String caption = entity.itemCaption();",
        "        final int quantity = entity.quantity();",
        "",
        "        return new CartItemTo(id, caption, quantity);",
        "    }",
        "}",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "0f527196-dbaf-4105-8111-f0349d689440",
      "contents": [
        "Create the `CartTo` transfer object in the same `demo.rest` package."
      ]
    },
    {
      "type": "Command",
      "id": "c0490734-4499-4b37-abee-272d0e6ad20f",
      "commands": [
        "cat << EOF > './src/main/java/demo/rest/CartTo.java'",
        "package demo.rest;",
        "",
        "import demo.dao.CartEntity;",
        "",
        "import java.util.List;",
        "",
        "import static java.util.Objects.requireNonNull;",
        "",
        "public record CartTo(Long id, List<CartItemTo> items) {",
        "",
        "    public CartTo {",
        "        /* Defensive copy */",
        "        items = List.copyOf(items);",
        "    }",
        "",
        "    public static CartTo of(final CartEntity entity) {",
        "        requireNonNull(entity, \"Entity cannot be null\");",
        "",
        "        final Long id = entity.id();",
        "        final List<CartItemTo> items = entity.items().stream()",
        "                .map(CartItemTo::of)",
        "                .toList();",
        "",
        "        return new CartTo(id, items);",
        "    }",
        "}",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "159b1cd0-929a-4197-845d-77f805902e8d",
      "contents": [
        "Create the `CartController` REST controller in the same package."
      ]
    },
    {
      "type": "Command",
      "id": "cf44f627-63b0-483a-a3b9-4686cfbdb10e",
      "commands": [
        "cat << EOF > './src/main/java/demo/rest/CartController.java'",
        "package demo.rest;",
        "",
        "import demo.service.CartService;",
        "import org.springframework.http.ResponseEntity;",
        "import org.springframework.web.bind.annotation.GetMapping;",
        "import org.springframework.web.bind.annotation.PathVariable;",
        "import org.springframework.web.bind.annotation.PostMapping;",
        "import org.springframework.web.bind.annotation.RequestMapping;",
        "import org.springframework.web.bind.annotation.RestController;",
        "",
        "import static java.util.Objects.requireNonNull;",
        "",
        "@RestController",
        "@RequestMapping(\"/cart\")",
        "public class CartController {",
        "",
        "    private final CartService service;",
        "",
        "    public CartController(final CartService service) {",
        "        this.service = requireNonNull(service, \"Service cannot be null\");",
        "    }",
        "",
        "    @GetMapping(\"/{id}\")",
        "    public ResponseEntity<CartTo> get(@PathVariable(value = \"id\") final long id) {",
        "        return service.findById(id)",
        "                .map(CartTo::of)",
        "                .map(ResponseEntity::ok)",
        "                .orElseGet(() -> ResponseEntity.notFound().build());",
        "    }",
        "",
        "    @PostMapping(\"/{cartId}/item/{itemId}\")",
        "    public ResponseEntity<CartTo> addItemToCart(@PathVariable(value = \"cartId\") final long cartId,",
        "                                                @PathVariable(value = \"itemId\") final long itemId) {",
        "        return service.addItemToCart(cartId, itemId)",
        "                .map(CartTo::of)",
        "                .map(ResponseEntity::ok)",
        "                .orElseGet(() -> ResponseEntity.notFound().build());",
        "    }",
        "}",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "d7aaddad-0509-409a-9d39-d24007ee78f6",
      "contents": [
        "Finally, we need to make sure that all this is working as expected. Create cart REST controller test class"
      ]
    },
    {
      "type": "Command",
      "id": "7cc431ca-df6e-4da9-9d43-3ee003f7f504",
      "commands": [
        "cat << EOF > './src/test/java/demo/rest/CartControllerTest.java'",
        "package demo.rest;",
        "",
        "import demo.rest.CartItemTo;",
        "import demo.rest.CartTo;",
        "import org.junit.jupiter.api.Nested;",
        "import org.junit.jupiter.api.Test;",
        "import org.springframework.beans.factory.annotation.Autowired;",
        "import org.springframework.boot.test.context.SpringBootTest;",
        "import org.springframework.boot.test.web.client.TestRestTemplate;",
        "import org.springframework.http.HttpStatus;",
        "import org.springframework.http.ResponseEntity;",
        "",
        "import java.util.List;",
        "import java.util.Map;",
        "",
        "import static org.assertj.core.api.Assertions.assertThat;",
        "",
        "@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)",
        "class CartControllerTest {",
        "",
        "    @Autowired",
        "    private TestRestTemplate restTemplate;",
        "",
        "    @Nested",
        "    class GetCartTest {",
        "",
        "        @Test",
        "        void returnTheCartWithItemsWhenGivenAnExistingId() {",
        "            final ResponseEntity<CartTo> response = getCartWithId(1);",
        "            assertThat(response.getStatusCode())",
        "                    .isEqualTo(HttpStatus.OK);",
        "            assertThat(response.getBody())",
        "                    .isEqualTo(new CartTo(1L, List.of(",
        "                            new CartItemTo(1L, \"Leather Sofa\", 1),",
        "                            new CartItemTo(5L, \"LED TV\", 1)",
        "                    )));",
        "        }",
        "",
        "        @Test",
        "        void returnNotFoundWhenGivenAnIdThatDoesNotExists() {",
        "            final ResponseEntity<CartTo> response = getCartWithId(10);",
        "            assertThat(response.getStatusCode())",
        "                    .isEqualTo(HttpStatus.NOT_FOUND);",
        "        }",
        "",
        "        private ResponseEntity<CartTo> getCartWithId(final long id) {",
        "            return restTemplate.getForEntity(\"/cart/%d\".formatted(id), CartTo.class);",
        "        }",
        "    }",
        "",
        "    @Nested",
        "    class AddItemToCartTest {",
        "",
        "        @Test",
        "        void returnTheCartWithTheNewItemWhenTheItemIsNotAlreadyInTheCart() {",
        "            final ResponseEntity<CartTo> response = addItemToCart(2, 4);",
        "            assertThat(response.getStatusCode())",
        "                    .isEqualTo(HttpStatus.OK);",
        "            assertThat(response.getBody())",
        "                    .isEqualTo(new CartTo(2L, List.of(",
        "                            new CartItemTo(2L, \"Wooden Table\", 1),",
        "                            new CartItemTo(3L, \"Plastic Chair\", 6),",
        "                            new CartItemTo(4L, \"Mug\", 1)",
        "                    )));",
        "        }",
        "",
        "        @Test",
        "        void returnTheCartWithTheNewQuantityWhenTheItemIsAlreadyInTheCart() {",
        "            final ResponseEntity<CartTo> response = addItemToCart(3, 4);",
        "            assertThat(response.getStatusCode())",
        "                    .isEqualTo(HttpStatus.OK);",
        "            assertThat(response.getBody())",
        "                    .isEqualTo(new CartTo(3L, List.of(",
        "                            new CartItemTo(4L, \"Mug\", 5)",
        "                    )));",
        "        }",
        "",
        "        @Test",
        "        void returnNotFoundWhenGivenACartIdThatDoesNotExists() {",
        "            final ResponseEntity<CartTo> response = addItemToCart(10, 1);",
        "            assertThat(response.getStatusCode())",
        "                    .isEqualTo(HttpStatus.NOT_FOUND);",
        "        }",
        "",
        "        @Test",
        "        void returnNotFoundWhenGivenAnItemIdThatDoesNotExists() {",
        "            final ResponseEntity<CartTo> response = addItemToCart(1, 10);",
        "            assertThat(response.getStatusCode())",
        "                    .isEqualTo(HttpStatus.NOT_FOUND);",
        "        }",
        "",
        "        private ResponseEntity<CartTo> addItemToCart(final long cartId, final long itemId) {",
        "            return restTemplate.postForEntity(\"/cart/%d/item/%d\".formatted(cartId, itemId), Map.of(), CartTo.class);",
        "        }",
        "    }",
        "}",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "c5a34bc5-7c7a-4614-97f7-b31495ad8149",
      "contents": [
        "Build the project"
      ]
    },
    {
      "type": "Command",
      "id": "961fd865-9573-4247-9af8-2d201a354d98",
      "commands": [
        "./mvnw clean verify"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "095f75df-ddaa-455f-84f8-51ff6ad91b47",
      "contents": [
        "The test should pass",
        "",
        "```",
        "...",
        "[INFO] ------------------------------------------------------------------------",
        "[INFO] BUILD SUCCESS",
        "[INFO] ------------------------------------------------------------------------",
        "...",
        "```"
      ]
    },
    {
      "type": "Markdown",
      "id": "c5f91f7b-4491-4337-889e-a5dee0b660e6",
      "contents": [
        "Try the catalogue and cart features in the application"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "d7f21aa9-d593-4110-a9c3-3c2f532faaa0",
      "commands": [
        "# Start the application in the background",
        "java -jar './demo/demo-application-0.0.1-SNAPSHOT.jar' > './demo/output.txt' 2>&1 &",
        "",
        "# Wait for the application to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:8080/cart/1')\" -ne '200' ]; do echo 'Waiting for the application to start'; sleep 1; done"
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "f64c3fbb-8463-4eba-8c31-c1a30a8cad85",
      "contents": [
        "This starts our application in the background and waits for it to start.",
        "",
        "Make a few requests to the catalogue items endpoint. We have the following catalogue items in the database.",
        "",
        "| `id` | `caption`     | `description`                                                         |",
        "| ---: | ------------- | --------------------------------------------------------------------- |",
        "|    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "|    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "|    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "|    4 | Mug           | The ideal way to start the day                                        |",
        "|    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "bcf57554-db58-4486-a037-3fd2bddf42c7",
      "commands": [
        "curl --silent 'http://localhost:8080/catalogue/item/1' | jq"
      ],
      "output": {
        "caption": "The catalogue item with id `1`",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "eb0a65e5-f11b-41f5-a533-5999598f5cb3",
      "contents": [
        "The database has three carts, as shown in the following tables.",
        "",
        "| `cart_id` | `item_id` | `caption`     | `quantity` |",
        "| --------: | --------: | ------------- | ---------: |",
        "|         1 |         1 | Leather Sofa  |          1 |",
        "|         1 |         5 | LED TV        |          1 |",
        "|         2 |         2 | Wooden Table  |          1 |",
        "|         2 |         3 | Plastic Chair |          6 |",
        "|         3 |         4 | Mug           |          4 |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "b4e43191-c185-494f-b570-8586b3bd1067",
      "commands": [
        "curl --silent 'http://localhost:8080/cart/1' | jq"
      ],
      "output": {
        "caption": "The cart with id `1` and its items",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "368a47f3-a596-4820-b6da-8aa42b1ff17c",
      "contents": [
        "Stop the application once ready."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "68554825-6738-4571-b9be-b71d2423e8f4",
      "commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "2b3cb68b-4acb-4820-ab9e-9e0bf332f682",
      "contents": [
        "Let’s see at the classes we have created so far."
      ]
    },
    {
      "type": "Command",
      "id": "70097cc1-7943-4589-b020-abc05100bb8c",
      "commands": [
        "tree './src'"
      ],
      "output": {
        "caption": "The `src` directory should have the following structure."
      },
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "90872e96-0a80-425e-bbb5-cecf1f22b7d2",
      "contents": [
        "Commit these changes so that you can always revert back to this point."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "eedfb22c-e727-4f79-b2f9-24fe82270000",
      "commands": [
        "MESSAGE='Add the cart feature'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'Create the database tables and classes to support this feature.'",
        "git tag --annotate 'v3.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "d149c95f-7b3d-4ea5-ad71-464742094a46",
      "contents": [
        "At this point the application is feature complete. The application has a catalogue listing all items available at this store and supports a shopping cart where users can add items to.",
        "",
        "Our application uses a very popular and well tested architecture style known as layered monolithic application. But this is not the only architecture style, as we will see in the next section."
      ]
    },
    {
      "type": "Heading",
      "id": "b7672843-e7b3-4a28-ae34-e85548248648",
      "level": "H3",
      "title": "Layered monolithic architecture tradeoffs"
    },
    {
      "type": "Markdown",
      "id": "32aebf43-7970-4f96-b9d5-99e1bdc84c47",
      "contents": [
        "A quick google search (if you are old like me or ChatGPT query if you are young like my kids) about the tradeoffs of a layered monolithic architecture style yields a lot of results, similar to the following.",
        "",
        "- **Scalability limitations**: Monolithic applications are challenging to scale because you must scale the entire application rather than individual components. This can lead to inefficient use of resources.",
        "- **Tight coupling**: All components in a monolithic application are tightly coupled. Changes in one part of the application can impact other parts, making it difficult to update or refactor code.",
        "- **Deployment challenges**: Deploying a monolithic application can be complex because any change, no matter how small, requires the entire application to be rebuilt and redeployed. This can slow down the development cycle and increase downtime.",
        "- **Reduced flexibility**: It is harder to adopt new technologies or frameworks for specific parts of the application because all components are interdependent. This reduces the flexibility to innovate or improve individual parts of the system.",
        "- **Maintenance difficulties**: As the codebase grows, maintaining a monolithic application becomes increasingly difficult. Understanding the impact of changes and debugging issues can be time-consuming and complex.",
        "- **Risk of single points of failure**: Since all functionalities are packaged together, a failure in any part of the application can bring down the entire system, leading to a higher risk of complete system outages.",
        "- **Limited parallel development**: It is challenging for multiple teams to work on different parts of the application simultaneously without causing conflicts. This can slow down development and reduce team productivity.",
        "- **Long build and test cycles**: Building and testing a monolithic application can take a long time, especially as the codebase grows. This can delay the feedback loop and slow down the development process.",
        "- **Complexity in understanding the entire system**: As the application grows, it becomes harder for developers to understand the entire system. This can lead to knowledge silos and make onboarding new developers more challenging.",
        "",
        "I am confident that one or more of these resonate with challenges you are experiencing or have experience. While some folks will simply take such a list and run with it, I would like to try something else instead. I would like to know, and ideally measure, how these and other similar disadvantages are impacting our application. I would like to measure the effectiveness of the architecture in a meaningful and reproducible way. Instead of simply speculate I would like to link our architecture style with the success, or lack of, of the application.",
        "",
        "How do we measure the effectiveness of our architecture style?"
      ]
    },
    {
      "type": "Heading",
      "id": "73ca4600-8381-4552-af6b-4fc049a98a7c",
      "level": "H4",
      "title": "Measuring what matters"
    },
    {
      "type": "Markdown",
      "id": "ee5479da-e0c1-40ef-b796-b0d18cbb5b6b",
      "contents": [
        "The book [Accelerate: The Science Behind DevOps: Building and Scaling High Performing Technology Organizations](https://itrevolution.com/product/accelerate/) by [Nicole Forsgren, PhD](https://nicolefv.com/), [Jez Humble](https://www.thoughtworks.com/en-de/profiles/j/jez-humble), and [Gene Kim](https://itrevolution.com/author/gene-kim/) presents the findings of a four-year quantitative research study conducted by the authors across thousands of projects and organisations. They collected more than 23 thousand surveys from various organisations, including start-ups, small companies, large enterprises, highly regulated industries, and more.",
        "",
        "They discovered the famous [four key metrics](https://cloud.google.com/blog/products/devops-sre/using-the-four-keys-to-measure-your-devops-performance), which distinguish high-performing organisations from less effective ones:",
        "",
        "- **Deployment frequency** (_throughput_): How often an organisation successfully releases to production.",
        "- **Lead time for changes** (_throughput_): The amount of time it takes a commit to get into production. This is different from cycle time, which is the time for a feature to be released to production.",
        "- **Change failure rate** (_quality_): The percentage of deployments causing a failure in production.",
        "- **Time to restore service** (_quality_): How long it takes an organisation to recover from a failure in production.",
        "",
        "These metrics are now referred to as the [DORA metrics](https://dora.dev/), continuing the research initiated by the authors when they published Accelerate.",
        "",
        "One key difference between traditional metrics and these four key metrics is that the four key metrics can be measured quantitatively. Additionally, the Accelerate book provides guidelines on what constitutes good performance, enabling organisations to compare themselves with high-performing peers and identify areas for improvement.",
        "",
        "It’s important to note that some organisations have heavily invested in DORA metrics in pursuit of maximising software development productivity. Unfortunately, this pursuit, while costly, didn’t always yield the expected results. DORA metrics provide means of measuring engineering processes but fall short in addressing _people_ and _products_.",
        "",
        "![People Procedures and Products](./assets/images/People%20Procedures%20and%20Products.png)",
        "",
        "When building a product, we are testing a hypothesis. Take our e-commerce application as an example. Why are we building an e-commerce application? We are building it because we believe we can sell our products online. That’s our hypothesis. How will our engineering decisions impact that? By deploying quicker, we can deliver features that customers want sooner, and **hopefully** increase sales. In this case, our hypothesis is **increasing sales**. DORA metrics measure deployment frequency but do not measure sales, which is the reason behind our efforts.",
        "",
        "Some organisations, typically older and larger, deploy once or twice a year, which harms their ability to react quickly to changing markets. Others, usually smaller and younger, deploy hundreds of times daily, allowing them to respond swiftly to market demands. While the ability to deploy on demand is important, deployment frequency alone means nothing. What’s the point of deploying 100 times a day a product that no one wants?",
        "",
        "> **Are you saying that the DORA metrics are bad?**",
        ">",
        "> No. DORA metrics are excellent for measuring the procedures used by people to deliver value through products. They highlight obstacles that hinder value delivery. However, DORA metrics do not measure the value we aim to deliver. A slow and fragile build process prevents solutions from reaching production. Conversely, a fast and reliable build process ensures that solutions reach production swiftly.",
        ">",
        "> DORA metrics do not cover the product side of the equation, which is crucial to understand. We might build the most sophisticated application using the best engineering principles, yet no one uses it. We might excel in DORA metrics, yet our organisation fails to generate revenue from the application.",
        ">",
        "> Applications are built by people. Are the people happy at work? While the engineering side might be perfect, high turnover might occur due to other organisational factors.",
        "",
        "DORA metrics cover a third of the picture. We need to maintain team morale and provide value to users through our products. Measuring the entire process is essential.",
        "",
        "This is where the [SPACE framework](https://queue.acm.org/detail.cfm?id=3454124) comes into play. While DORA metrics focus on the engineering aspect, the SPACE framework recommends a broader approach, covering aspects such as productivity and developer satisfaction. The SPACE framework is not as easily adaptable as DORA metrics, as it recommends five categories with relevant metrics in each.",
        "",
        "- **Satisfaction & Well-Being**: Do developers recommend their team and organisation to others? How fulfilled are developers with their work, team, tools, and culture? How healthy and happy are developers?",
        "- **Performance**: How long does it take (_velocity_) for a process to complete? What is the produced _quality_?",
        "- **Activity**: The number of actions or outputs completed in the course of performing work.",
        "- **Communication & Collaboration**: How well do people and teams communicate and work together?",
        "- **Efficiency & Flow**: How well can developers and teams make progress on their work or complete it without interruptions or delays?",
        "",
        "> **What is the difference between the DORA metrics and the SPACE framework?**",
        ">",
        "> The DORA metrics focus on process, engineering, and delivery of features through software development.",
        ">",
        "> The SPACE framework looks at it from the perspective of the developer and the team, although it can also be used to evaluate the system as a whole.",
        "",
        "The following diagram contrasts DORA metrics with the SPACE framework, highlighting the gaps that DORA metrics have.",
        "",
        "![DORA metrics and SPACE framework](./assets/images/DORA%20metrics%20and%20SPACE%20framework.png)",
        "",
        "In this workshop, we will contrast different architecture styles by answering the following questions with a score between 1 and 5, where 1 is poor and 5 is excellent. We will do this in the context of our (small) application, meaning you should not apply these results universally. Instead, you can use these questions to evaluate other projects.",
        "",
        "| Question                                                                                    | Score (1-5) |",
        "| ------------------------------------------------------------------------------------------- | ----------: |",
        "| Would you recommend this project to others?                                                 |             |",
        "| Would you recommend your team to others?                                                    |             |",
        "| Would you recommend your organisation to others?                                            |             |",
        "| How much do the users love the application?                                                 |             |",
        "| How is the application meeting its set goals?                                               |             |",
        "| How easy is it to make changes to the application?                                          |             |",
        "| How safe do you feel in making changes to the application and deploying them to production? |             |",
        "| How easy is it to deploy changes to production?                                             |             |",
        "",
        "I am not claiming these are the most important questions, and I recommend discussing them with your team before adopting them. ",
        "",
        "> **Is a monolithic application inherently not scalable?**",
        ">",
        "> No, that is a big misconception. When I ask developers why they chose the microservices architecture style, the most common reply is scalability. When I ask these developers to provide me with an example, their answer usually goes something like: we can run the application over multiple services and scale up those services that need load without scaling up the whole application, as shown next.",
        ">",
        "> ![Horizontal scaling monolithic and distributed applications](./assets/images/Horizontal%20scaling%20monolithic%20and%20distributed%20applications.png)",
        ">",
        "> That is true. With monolithic applications, it is all or nothing, which can be a problem for very large applications as they would need large machines to run on. Splitting the application into smaller services can address this problem, as we can scale the parts that need more resources without scaling the whole application. That being said, I have rarely encountered such large monolithic applications myself, and the ones I learned about were more batch processing applications rather than user-facing applications.",
        ">",
        "> It is important to note that in this example, the monolithic application can scale horizontally. This means that, while inefficient, it can still scale. Some monolithic applications cannot scale horizontally and their only option is vertical scaling. Unlike horizontal scaling, vertical scaling has a limit. While we can always buy a new virtual machine from the cloud, we cannot buy something bigger than the largest available option.",
        ">",
        "> ![Vertical scaling monolithic applications](./assets/images/Vertical%20scaling%20monolithic%20applications.png)",
        ">",
        "> These types of applications cannot scale beyond a certain point. The thing that holds them back from scaling is state. Any application that maintains state is hard to scale. Databases are a clear example. A relational database runs on a single instance, and when we need more power, we have to scale vertically. This is because the database needs access to the whole dataset to maintain [ACID transactions](https://en.wikipedia.org/wiki/ACID). Other types of databases sacrifice ACID transactions in favour of [BASE](https://en.wikipedia.org/wiki/Eventual_consistency) to gain horizontal scalability. The point here is that the software architecture style does not prevent scalability, but the state does.",
        ">",
        "> This brings us to an important point: you can scale only as much as your weakest link allows. Suppose we have an application that can scale infinitely but is connected to a relational database. What happens when we scale more than the database can handle? The database will crash. I have seen this happen several times, where the application scaled beyond what the database could support.",
        ">",
        "> Scalability is not only related to usage. Scalability also relates to the size of the application and the team maintaining it. As the application grows, so does the team. The architecture style significantly impacts scalability limits, and past a certain threshold, the application can become unmaintainable. But this is not necessarily inherent to monoliths. It is more of an organisational problem. The application can be organised in a way that promotes growth, but it can also be organised in ways that hinder growth, whether it is monolithic or distributed.",
        ">",
        "> In conclusion, monolithic architectures can scale both at runtime by reducing state and at development time by organising them better. We will discuss this more later on.",
        "",
        "The following list describes each question in more detail and provides the motivation behind it. I like to include such explanations in the questionnaire so that everyone understands what is being asked.",
        "",
        "- **Would you recommend this project to others?**\\",
        "  This question measures how satisfied people are with their projects. Sometimes we ask this question more directly, such as “_How satisfied are you with this project_?” While high satisfaction often correlates with recommendation, I prefer the recommendation approach because a great project might not meet my expectations due to personal preferences. For instance, I might prefer a different technology stack, so I wouldn’t be satisfied but might still recommend it to someone who likes that stack. Conversely, a project might be too complex or too simple for different individuals.",
        "",
        "- **Would you recommend your team to others?**\\",
        "  Projects are rarely managed by one person; teams significantly impact individuals. Being in a team of uncooperative individuals does not help. This question measures how well the team works together and how welcoming it is to newcomers.",
        "",
        "- **Would you recommend your organisation to others?**\\",
        "  This question measures overall satisfaction with the company. If you are happy at your workplace, you would recommend it to others. If you feel mistreated or treated unfairly, you wouldn’t.",
        "",
        "- **How much do the users love the application?**\\",
        "  Are users engaging with the application? Are they getting the expected value? This question focuses on user engagement and satisfaction.",
        "",
        "- **How is the application meeting its set goals?**\\",
        "  This is where results matter. We might have millions of users, but is the application meeting its targets? For example, if we aim to convert 10% of free users to paid users, is this happening?",
        "",
        "- **How easy is it to make changes to the application?**\\",
        "  Complex applications can be hard to modify. How easy is it to add new features or make changes?",
        "",
        "- **How safe do you feel in making changes to the application and deploying them to production?**\\",
        "  Feeling safe is crucial. Developers hesitant to push changes due to a lack of tests or skills will hinder progress. How confident are you in deploying changes to production?",
        "",
        "- **How easy is it to deploy changes to production?**\\",
        "  Once changes are ready, how easily can they be deployed? Some teams have automated deployment pipelines, while others have elaborate procedures that slow down deployment.",
        "",
        "Now that we understand how to measure this architecture style, let’s try answering these questions. Note that some questions may not apply to this workshop as it is not a real application with real users. Thus, we will only focus on the following four questions.",
        "",
        "| Question                                                                                    | Score (1-5) |",
        "| ------------------------------------------------------------------------------------------- | ----------: |",
        "| Would you recommend this project to others?                                                 |             |",
        "| How easy is it to make changes to the application?                                          |             |",
        "| How safe do you feel in making changes to the application and deploying them to production? |             |",
        "| How easy is it to deploy changes to production?                                             |             |",
        "",
        "We will use these four questions to assess each architecture style and then compare.",
        "",
        "**Please do not proceed before submitting your scores**, as otherwise you may be influenced by the scores shown here.",
        "",
        "| Question                                                                                    | Score (1-5) |",
        "| ------------------------------------------------------------------------------------------- | ----------: |",
        "| Would you recommend this project to others?                                                 |           5 |",
        "| How easy is it to make changes to the application?                                          |           4 |",
        "| How safe do you feel in making changes to the application and deploying them to production? |           4 |",
        "| How easy is it to deploy changes to production?                                             |           5 |",
        "",
        "This application scored quite high in my opinion. The motivation behind these scores is discussed in the next sections."
      ]
    },
    {
      "type": "Heading",
      "id": "d05820e5-290d-4d6a-be8b-e91b25ba91ba",
      "level": "H4",
      "title": "Technical partitioning"
    },
    {
      "type": "Markdown",
      "id": "b91fb5df-d2ba-4fa7-ae3a-f4d3dbb3929f",
      "contents": [
        "The project organisation does not reflect the domain.",
        "",
        "The layered monolithic architecture style is a very common architecture style where the application is partitioned technically. The classes are grouped by technology stack. For example, the rest controllers are all under the `demo.rest` package and all the data access classes are under the `demo.dao` package. By just looking at the packages, one cannot tell what this application is doing."
      ]
    },
    {
      "type": "Command",
      "id": "e2a414e3-7816-4dfb-8d21-4a9dded04b93",
      "commands": [
        "tree -L 2 'src/main/java'"
      ],
      "output": {
        "caption": "This command shows the top packages, which are"
      },
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "5857cf1a-b510-4a75-aa35-9f350f62303c",
      "contents": [
        "A book recommendations application, a dating application, or a games library application would all have the same package structure as our application which has nothing to do with domain. This means that technical partitioning hides any business domain information as it groups classes based on their roles.",
        "",
        "This is why I gave the question “_How easy is it to make changes to the application?_” a score of 4. A score of 4 is relatively good but as the application grows this becomes tricky and can impact the score negatively. Also, too much abstraction can have an impact on this score, as it will be hard to understand what is doing what."
      ]
    },
    {
      "type": "Heading",
      "id": "5d4e1922-486e-45bb-976c-ecc2f1851f06",
      "level": "H4",
      "title": "Locality"
    },
    {
      "type": "Markdown",
      "id": "f4c0569e-556e-47ee-8d0c-682ac0a2b8e4",
      "contents": [
        "Technical partitioning falls short on locality.",
        "",
        "> **What’s locality?**",
        ">",
        "> Locality, in software development, refers to the degree to which a programmer can understand the functionality or behaviour of an application by examining only a small, localised portion of the source code. This characteristic is particularly valuable in large-scale applications, which consist of numerous interconnected components. High locality allows developers to make changes, debug, and enhance parts of the system without needing a comprehensive understanding of the entire codebase. Enhancing locality can involve organising code into well-defined modules or components, each with clear, self-contained responsibilities. This modular structure not only facilitates easier maintenance and comprehension but also supports better scalability and reusability across the application.",
        "",
        "When we added the cart feature, we had to add classes to all packages, thus this change was not local. If a new developer is added to the team, and they would like to work on the cart or catalogue, then they need to visit all packages. The following diagram shows how the classes are spread across the project.",
        "",
        "![Layered monolithic architecture packages](./assets/images/Layered%20monolithic%20architecture%20packages.png)",
        "",
        "An alternative approach to technical partitioning would be domain partitioning, which is the subject of this section.",
        "",
        "This too had an impact on my score for the question “_How easy is it to make changes to the application?_” a score of 4. I believe that locality has a positive impact on this question as all changes are made to classes that are closed to each other."
      ]
    },
    {
      "type": "Heading",
      "id": "a0bdb3fc-2303-41bf-b605-8896cdc93101",
      "level": "H4",
      "title": "All or nothing"
    },
    {
      "type": "Markdown",
      "id": "fd88e6ea-ecf0-4a71-8f29-162a31c12422",
      "contents": [
        "In a monolithic architecture, having everything in one place is very convenient. We have one JAR file which can be packaged as a container image and easily deployed. That’s why “_How easy is it to deploy changes to production?_” scored 5.",
        "",
        " However, this convenience is a double-edged sword. While it is handy to have everything together, even the smallest change requires the entire application to be redeployed.",
        "",
        "This might not be very noticeable in our small application, but consider a scenario where the catalogue team wants to deploy a change. This means that both the cart and the catalogue need to be built and redeployed. Bugs can only be introduced with new deployments, putting the whole application at risk even when a small change occurs in a distant part of the application. A memory leak introduced by a minor change can bring the entire application to a halt.",
        "",
        "This is why I rated our application a 4 for the question “_How safe do you feel in making changes to the application and deploying them to production?_”."
      ]
    },
    {
      "type": "Heading",
      "id": "a17baabe-5fd4-4965-a179-ebdb7985343a",
      "level": "H2",
      "title": "Refactoring to Modular Monolithic Architecture"
    },
    {
      "type": "Markdown",
      "id": "7a1aec1d-9a62-45f2-b715-1a239fac2cea",
      "contents": [
        "Modular monolithic architecture is a way to improve on the code locality by partitioning the application by domain. In other words, all classes that belong to the catalogue functionality will go to the `demo.catalogue` package and the cart functionality will go to the `demo.cart` package. Note that no technical (or roles) packages are used. All classes related to the catalogue functionality will go to the `demo.catalogue` package and anyone working on this feature, can simply focus on this package and do not have to look at the other packages unless they need to. The following diagram shows how our project will be reorganised.",
        "",
        "![Refactoring from layered to modular monolithic architecture style](./assets/images/Refactoring%20from%20layered%20to%20modular%20monolithic%20architecture%20style.png)",
        "",
        "Before starting, we need to make sure that the application is in a working state, and it is well covered with tests. We need to make sure that any changes are about to make do not break existing functionality, and it does not introduce new bugs. Please note that in this refactoring we are not introducing new functionality, but simply recognising our code to improve locality."
      ]
    },
    {
      "type": "Command",
      "id": "257864f4-2755-4d06-9931-f8c37055266d",
      "commands": [
        "./mvnw clean verify"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "1c48e728-e7ee-421d-ac11-2447d20a0dde",
      "contents": [
        "At this point you will start appreciating the benefits of tests. We can be sure that if the tests still pass, then our application is still in a good state. We could not assert that without tests."
      ]
    },
    {
      "type": "Markdown",
      "id": "af7b8cd6-04fb-40a9-a767-a82c1a8aff96",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "d27fc1e2-7ec2-4994-9aef-9c33f4b1531a",
      "commands": [
        "git tag --annotate 'v4.0' --message 'Before partitioning by domain'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "2d433d92-df1a-4f4c-bae9-d0c4683a8c73",
      "contents": [
        "Let’s list all the tags we have so far."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "e0aea006-acd5-4536-90aa-8d2152942ec7",
      "commands": [
        "git tag --sort=taggerdate -n | cat"
      ],
      "output": {
        "caption": "We now have the following tags"
      },
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Heading",
      "id": "43f5f66a-2ff9-445c-aa04-9aff45f249d3",
      "level": "H3",
      "title": "Refactoring the Catalogue classes"
    },
    {
      "type": "Markdown",
      "id": "913ebe16-0952-4b6a-b604-fe9f2027922c",
      "contents": [
        "Ideally, these changes are made through an IDE which will take care of update the packages and imports automatically. The following commands do not take advantage of the IDEs thus we need to also handle the updates manually.",
        "",
        "Create the `demo.catalogue` package and move all catalogue related classes to this package."
      ]
    },
    {
      "type": "Command",
      "id": "ad7abe38-1693-4371-9c1f-92efc4007113",
      "commands": [
        "mkdir -p './src/main/java/demo/catalogue'",
        "mv './src/main/java/demo/dao/CatalogueItemEntity.java'      './src/main/java/demo/catalogue/'",
        "mv './src/main/java/demo/dao/CatalogueItemRepository.java'  './src/main/java/demo/catalogue/'",
        "mv './src/main/java/demo/rest/CatalogueItemController.java' './src/main/java/demo/catalogue/'",
        "mv './src/main/java/demo/rest/CatalogueItemTo.java'         './src/main/java/demo/catalogue/'",
        "mv './src/main/java/demo/rest/NewCatalogueItemTo.java'      './src/main/java/demo/catalogue/'",
        "mv './src/main/java/demo/service/CatalogueItemService.java' './src/main/java/demo/catalogue/'"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "abba3fec-91e1-483d-8e77-3555d3ef8de4",
      "contents": [
        "The above commands moved the files physically without updating the packages and imports as needed. Update packages and imports as needed."
      ]
    },
    {
      "type": "Command",
      "id": "b17dbc10-b514-4119-ab74-da75198451ee",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/catalogue/CatalogueItemController.java' << EOF",
        "--- a/src/main/java/demo/catalogue/CatalogueItemController.java",
        "+++ b/src/main/java/demo/catalogue/CatalogueItemController.java",
        "@@ -1,6 +1,5 @@",
        "-package demo.rest;",
        "+package demo.catalogue;",
        " ",
        "-import demo.service.CatalogueItemService;",
        " import org.springframework.http.ResponseEntity;",
        " import org.springframework.web.bind.annotation.GetMapping;",
        " import org.springframework.web.bind.annotation.PathVariable;",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Command",
      "id": "b38ec749-a281-4a9b-9ca6-e95e8849bf5a",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/catalogue/CatalogueItemEntity.java' << EOF",
        "--- a/src/main/java/demo/catalogue/CatalogueItemEntity.java",
        "+++ b/src/main/java/demo/catalogue/CatalogueItemEntity.java",
        "@@ -1,4 +1,4 @@",
        "-package demo.dao;",
        "+package demo.catalogue;",
        " ",
        " import jakarta.persistence.Entity;",
        " import jakarta.persistence.GeneratedValue;",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Command",
      "id": "0a8cb71f-78b1-472b-b38c-354b6c4f970c",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/catalogue/CatalogueItemRepository.java' << EOF",
        "--- a/src/main/java/demo/catalogue/CatalogueItemRepository.java",
        "+++ b/src/main/java/demo/catalogue/CatalogueItemRepository.java",
        "@@ -1,4 +1,4 @@",
        "-package demo.dao;",
        "+package demo.catalogue;",
        " ",
        " import org.springframework.data.repository.ListCrudRepository;",
        " ",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Command",
      "id": "7bb4d803-e378-4996-9d0b-da687aec067d",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/catalogue/CatalogueItemService.java' << EOF",
        "--- a/src/main/java/demo/catalogue/CatalogueItemService.java",
        "+++ b/src/main/java/demo/catalogue/CatalogueItemService.java",
        "@@ -1,7 +1,5 @@",
        "-package demo.service;",
        "+package demo.catalogue;",
        " ",
        "-import demo.dao.CatalogueItemEntity;",
        "-import demo.dao.CatalogueItemRepository;",
        " import org.springframework.stereotype.Service;",
        " ",
        " import java.util.Optional;",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Command",
      "id": "bcc5b4e5-aba3-43f9-a615-0dbd48d081f7",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/catalogue/CatalogueItemTo.java' << EOF",
        "--- a/src/main/java/demo/catalogue/CatalogueItemTo.java",
        "+++ b/src/main/java/demo/catalogue/CatalogueItemTo.java",
        "@@ -1,7 +1,5 @@",
        "-package demo.rest;",
        "+package demo.catalogue;",
        " ",
        "-import demo.dao.CatalogueItemEntity;",
        "-",
        " import java.util.function.Function;",
        " ",
        " import static java.util.Objects.requireNonNull;",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Command",
      "id": "ca1a4fa3-b010-4c04-9e3f-0f5f9bff8439",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/catalogue/NewCatalogueItemTo.java' << EOF",
        "--- a/src/main/java/demo/catalogue/NewCatalogueItemTo.java",
        "+++ b/src/main/java/demo/catalogue/NewCatalogueItemTo.java",
        "@@ -1,7 +1,5 @@",
        "-package demo.rest;",
        "+package demo.catalogue;",
        " ",
        "-import demo.dao.CatalogueItemEntity;",
        "-",
        " public record NewCatalogueItemTo(String caption, String description) {",
        "     public CatalogueItemEntity toEntity() {",
        "         return new CatalogueItemEntity(caption, description);",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "e9a583bc-a55d-4ff0-a9f5-20fbf4b0c008",
      "contents": [
        "Create the `demo.catalogue` package in the test source and move the catalogue test class to this package."
      ]
    },
    {
      "type": "Command",
      "id": "85e172c9-7985-4f77-b36b-87282974ab0d",
      "commands": [
        "mkdir -p './src/test/java/demo/catalogue'",
        "mv './src/test/java/demo/rest/CatalogueItemControllerTest.java' './src/test/java/demo/catalogue/'"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "078cf193-5cf9-4497-a74d-edf1e360bf76",
      "contents": [
        "The above commands moves the files physically without updating the packages and imports as needed. Update packages and imports as needed."
      ]
    },
    {
      "type": "Command",
      "id": "174809bc-a7f1-4dda-bb3a-ec460d97d185",
      "commands": [
        "patch -f -p1 -u './src/test/java/demo/catalogue/CatalogueItemControllerTest.java' << EOF",
        "--- a/src/test/java/demo/catalogue/CatalogueItemControllerTest.java",
        "+++ b/src/test/java/demo/catalogue/CatalogueItemControllerTest.java",
        "@@ -1,6 +1,4 @@",
        "-package demo.rest;",
        "+package demo.catalogue;",
        " ",
        "-import demo.rest.CatalogueItemTo;",
        "-import demo.rest.NewCatalogueItemTo;",
        " import org.junit.jupiter.api.Nested;",
        " import org.junit.jupiter.api.Test;",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "69fee0e1-0be8-4c90-9679-a346768f26c3",
      "contents": [
        "So far we have only updated the catalogue classes. Some of the cart classes may refer to the catalogue class and compiling the code now will fail. We will update these classes in the coming section."
      ]
    },
    {
      "type": "Heading",
      "id": "75071e74-0de0-4f65-9afd-136b864b82a0",
      "level": "H3",
      "title": "Refactoring the Cart classes"
    },
    {
      "type": "Markdown",
      "id": "7c8843b1-80c7-4b5e-b167-04f232f07fd6",
      "contents": [
        "Create the `demo.cart` package and move all cart related classes to this package."
      ]
    },
    {
      "type": "Command",
      "id": "19ce7593-77d7-4555-877b-2bb3266bb14f",
      "commands": [
        "mkdir -p './src/main/java/demo/cart'",
        "mv './src/main/java/demo/dao/CartEntity.java'               './src/main/java/demo/cart/'",
        "mv './src/main/java/demo/dao/CartItemEntity.java'           './src/main/java/demo/cart/'",
        "mv './src/main/java/demo/dao/CartItemEntityPrimaryKey.java' './src/main/java/demo/cart/'",
        "mv './src/main/java/demo/dao/CartRepository.java'           './src/main/java/demo/cart/'",
        "mv './src/main/java/demo/rest/CartController.java'          './src/main/java/demo/cart/'",
        "mv './src/main/java/demo/rest/CartItemTo.java'              './src/main/java/demo/cart/'",
        "mv './src/main/java/demo/rest/CartTo.java'                  './src/main/java/demo/cart/'",
        "mv './src/main/java/demo/service/CartService.java'          './src/main/java/demo/cart/'"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "cd502348-9409-4925-8f5b-590a45719261",
      "contents": [
        "The technical (or role) packages, `dao`, `rest` and `services` are not needed anymore and can be removed."
      ]
    },
    {
      "type": "Command",
      "id": "1caa38cb-532b-4735-bc4b-e027c3017315",
      "commands": [
        "rm -r './src/main/java/demo/dao'",
        "rm -r './src/main/java/demo/rest'",
        "rm -r './src/main/java/demo/service'"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "eda25c4a-f1cf-446b-9d86-6ab477bb9b7b",
      "contents": [
        "The previous move commands moves the files physically without updating the packages and imports as needed. Update packages and imports as needed."
      ]
    },
    {
      "type": "Command",
      "id": "1554affe-ca41-446c-a55d-1d604ee9b864",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartController.java' << EOF",
        "--- a/src/main/java/demo/cart/CartController.java",
        "+++ b/src/main/java/demo/cart/CartController.java",
        "@@ -1,6 +1,5 @@",
        "-package demo.rest;",
        "+package demo.cart;",
        " ",
        "-import demo.service.CartService;",
        " import org.springframework.http.ResponseEntity;",
        " import org.springframework.web.bind.annotation.GetMapping;",
        " import org.springframework.web.bind.annotation.PathVariable;",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Command",
      "id": "b3f84cad-9d25-47ac-8f58-532612d8199a",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartEntity.java' << EOF",
        "--- a/src/main/java/demo/cart/CartEntity.java",
        "+++ b/src/main/java/demo/cart/CartEntity.java",
        "@@ -1,3 +1,4 @@",
        "-package demo.dao;",
        "+package demo.cart;",
        " ",
        "+import demo.catalogue.CatalogueItemEntity;",
        " import jakarta.persistence.CascadeType;",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Command",
      "id": "095be520-ab0e-4fbf-85c4-348d0eccc0fe",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartItemEntity.java' << EOF",
        "--- a/src/main/java/demo/cart/CartItemEntity.java",
        "+++ b/src/main/java/demo/cart/CartItemEntity.java",
        "@@ -1,4 +1,4 @@",
        "-package demo.dao;",
        "+package demo.cart;",
        " ",
        " import jakarta.persistence.EmbeddedId;",
        " import jakarta.persistence.Entity;",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Command",
      "id": "baf97e09-a862-4563-b47b-6bc20010033a",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartItemEntityPrimaryKey.java' << EOF",
        "--- a/src/main/java/demo/cart/CartItemEntityPrimaryKey.java",
        "+++ b/src/main/java/demo/cart/CartItemEntityPrimaryKey.java",
        "@@ -1,3 +1,4 @@",
        "-package demo.dao;",
        "+package demo.cart;",
        " ",
        "+import demo.catalogue.CatalogueItemEntity;",
        " import jakarta.persistence.Embeddable;",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Command",
      "id": "7babde70-7bb5-499d-af42-0b7fd5939ed3",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartItemTo.java' << EOF",
        "--- a/src/main/java/demo/cart/CartItemTo.java",
        "+++ b/src/main/java/demo/cart/CartItemTo.java",
        "@@ -1,7 +1,5 @@",
        "-package demo.rest;",
        "+package demo.cart;",
        " ",
        "-import demo.dao.CartItemEntity;",
        "-",
        " import static java.util.Objects.requireNonNull;",
        " ",
        " public record CartItemTo(Long id, String caption, int quantity) {",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Command",
      "id": "4301fbfa-05ea-4019-b28c-f45c3aa6672f",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartRepository.java' << EOF",
        "--- a/src/main/java/demo/cart/CartRepository.java",
        "+++ b/src/main/java/demo/cart/CartRepository.java",
        "@@ -1,4 +1,4 @@",
        "-package demo.dao;",
        "+package demo.cart;",
        " ",
        " import org.springframework.data.repository.ListCrudRepository;",
        " ",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Command",
      "id": "de814287-e0f7-49a2-9c63-06ff25d3c883",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartService.java' << EOF",
        "--- a/src/main/java/demo/cart/CartService.java",
        "+++ b/src/main/java/demo/cart/CartService.java",
        "@@ -1,10 +1,7 @@",
        "-package demo.service;",
        "+package demo.cart;",
        " ",
        "-import demo.dao.CartEntity;",
        "-import demo.dao.CartItemEntity;",
        "-import demo.dao.CartRepository;",
        "-import demo.dao.CatalogueItemEntity;",
        "-import demo.dao.CatalogueItemRepository;",
        "+import demo.catalogue.CatalogueItemEntity;",
        "+import demo.catalogue.CatalogueItemRepository;",
        " import jakarta.transaction.Transactional;",
        " import org.springframework.stereotype.Service;",
        " ",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Command",
      "id": "38d876ed-45a8-409f-98c0-608dc803dfdf",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartTo.java' << EOF",
        "--- a/src/main/java/demo/cart/CartTo.java",
        "+++ b/src/main/java/demo/cart/CartTo.java",
        "@@ -1,7 +1,5 @@",
        "-package demo.rest;",
        "+package demo.cart;",
        " ",
        "-import demo.dao.CartEntity;",
        "-",
        " import java.util.List;",
        " ",
        " import static java.util.Objects.requireNonNull;",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "47a0ac33-9eed-4d5b-a40b-c4b60c00077c",
      "contents": [
        "Create the `demo.cart` package in the test source and move the cart test class to this package."
      ]
    },
    {
      "type": "Command",
      "id": "e790261b-33cd-41cc-9ba6-bd76fda094fb",
      "commands": [
        "mkdir -p './src/test/java/demo/cart'",
        "mv './src/test/java/demo/rest/CartControllerTest.java' './src/test/java/demo/cart/'"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "5e2e022d-75c7-425c-810e-9f34ec03fb57",
      "contents": [
        "The technical (or role) test package `rest` is not needed anymore and can be removed."
      ]
    },
    {
      "type": "Command",
      "id": "d09a83e4-68e2-4629-a9dd-62b9f1adf232",
      "commands": [
        "rm -r './src/test/java/demo/rest'"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "5b3be94f-9bcb-4c9b-acc0-5efa0ed437a0",
      "contents": [
        "The previous move commands moves the files physically without updating the packages and imports as needed. Update packages and imports as needed."
      ]
    },
    {
      "type": "Command",
      "id": "63c6236c-7575-4a7e-9d47-aad4ad279ef2",
      "commands": [
        "patch -f -p1 -u './src/test/java/demo/cart/CartControllerTest.java' << EOF",
        "--- a/src/test/java/demo/rest/CartControllerTest.java",
        "+++ b/src/test/java/demo/rest/CartControllerTest.java",
        "@@ -1,7 +1,5 @@",
        "-package demo.rest;",
        "+package demo.cart;",
        " ",
        "-import demo.rest.CartItemTo;",
        "-import demo.rest.CartTo;",
        " import org.junit.jupiter.api.Nested;",
        " import org.junit.jupiter.api.Test;",
        " import org.springframework.beans.factory.annotation.Autowired;",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "0f083f82-fffa-4cc1-b242-364d2a2ff9db",
      "contents": [
        "This completes our refactoring. But before we move on, let’s take a second and update the banner file to reflect the new architecture style."
      ]
    },
    {
      "type": "Command",
      "id": "e65d697c-2e29-4a18-968f-4f4baf461277",
      "commands": [
        "patch -f -p1 -u './src/main/resources/banner.txt' << EOF",
        "--- a/src/main/resources/banner.txt",
        "+++ b/src/main/resources/banner.txt",
        "@@ -1,7 +1,7 @@",
        "-███╗   ███╗ ██████╗ ███╗   ██╗ ██████╗ ██╗     ██╗████████╗██╗  ██╗██╗ ██████╗     ██╗██╗      █████╗ ██╗   ██╗███████╗██████╗ ███████╗██████╗ ██╗",
        "-████╗ ████║██╔═══██╗████╗  ██║██╔═══██╗██║     ██║╚══██╔══╝██║  ██║██║██╔════╝    ██╔╝██║     ██╔══██╗╚██╗ ██╔╝██╔════╝██╔══██╗██╔════╝██╔══██╗╚██╗",
        "-██╔████╔██║██║   ██║██╔██╗ ██║██║   ██║██║     ██║   ██║   ███████║██║██║         ██║ ██║     ███████║ ╚████╔╝ █████╗  ██████╔╝█████╗  ██║  ██║ ██║",
        "-██║╚██╔╝██║██║   ██║██║╚██╗██║██║   ██║██║     ██║   ██║   ██╔══██║██║██║         ██║ ██║     ██╔══██║  ╚██╔╝  ██╔══╝  ██╔══██╗██╔══╝  ██║  ██║ ██║",
        "-██║ ╚═╝ ██║╚██████╔╝██║ ╚████║╚██████╔╝███████╗██║   ██║   ██║  ██║██║╚██████╗    ╚██╗███████╗██║  ██║   ██║   ███████╗██║  ██║███████╗██████╔╝██╔╝",
        "-╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝ ╚══════╝╚═╝   ╚═╝   ╚═╝  ╚═╝╚═╝ ╚═════╝     ╚═╝╚══════╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚══════╝╚═════╝ ╚═╝",
        "-Layered Monolithic Application as a Single Project",
        "+███╗   ███╗ ██████╗ ███╗   ██╗ ██████╗ ██╗     ██╗████████╗██╗  ██╗██╗ ██████╗     ██╗███╗   ███╗ ██████╗ ██████╗ ██╗   ██╗██╗      █████╗ ██████╗ ██╗",
        "+████╗ ████║██╔═══██╗████╗  ██║██╔═══██╗██║     ██║╚══██╔══╝██║  ██║██║██╔════╝    ██╔╝████╗ ████║██╔═══██╗██╔══██╗██║   ██║██║     ██╔══██╗██╔══██╗╚██╗",
        "+██╔████╔██║██║   ██║██╔██╗ ██║██║   ██║██║     ██║   ██║   ███████║██║██║         ██║ ██╔████╔██║██║   ██║██║  ██║██║   ██║██║     ███████║██████╔╝ ██║",
        "+██║╚██╔╝██║██║   ██║██║╚██╗██║██║   ██║██║     ██║   ██║   ██╔══██║██║██║         ██║ ██║╚██╔╝██║██║   ██║██║  ██║██║   ██║██║     ██╔══██║██╔══██╗ ██║",
        "+██║ ╚═╝ ██║╚██████╔╝██║ ╚████║╚██████╔╝███████╗██║   ██║   ██║  ██║██║╚██████╗    ╚██╗██║ ╚═╝ ██║╚██████╔╝██████╔╝╚██████╔╝███████╗██║  ██║██║  ██║██╔╝",
        "+╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝ ╚══════╝╚═╝   ╚═╝   ╚═╝  ╚═╝╚═╝ ╚═════╝     ╚═╝╚═╝     ╚═╝ ╚═════╝ ╚═════╝  ╚═════╝ ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝",
        "+Modular Monolithic Application as a Single Project",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "30094a2a-2005-41ae-8a4c-0cf178568e2b",
      "contents": [
        "Build the project"
      ]
    },
    {
      "type": "Command",
      "id": "e59c3783-92e7-4ed9-81cf-2e4ef42e0692",
      "commands": [
        "./mvnw clean verify"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "cb228e47-eeaa-41a7-9390-57e69cf638a5",
      "contents": [
        "The tests all passed!!"
      ]
    },
    {
      "type": "Markdown",
      "id": "037b00fa-aa23-4fba-a29f-a2ef83406751",
      "contents": [
        "Try the application with the new modular monolithic architecture style."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "de6fd709-00bf-4913-ba11-9b797c97134e",
      "commands": [
        "# Start the application in the background",
        "java -jar './demo/demo-application-0.0.1-SNAPSHOT.jar' > './demo/output.txt' 2>&1 &",
        "",
        "# Wait for the application to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:8080/cart/1')\" -ne '200' ]; do echo 'Waiting for the application to start'; sleep 1; done"
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "22ecd4af-7bf4-405b-9f09-bba5e2af1cc2",
      "contents": [
        "This starts our application in the background and waits for it to start.",
        "",
        "Make a few requests to the catalogue items endpoint. We have the following catalogue items in the database.",
        "",
        "| `id` | `caption`     | `description`                                                         |",
        "| ---: | ------------- | --------------------------------------------------------------------- |",
        "|    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "|    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "|    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "|    4 | Mug           | The ideal way to start the day                                        |",
        "|    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "5f04149e-5e66-445e-824e-4d2b2145a7a3",
      "commands": [
        "curl --silent 'http://localhost:8080/catalogue/item/2' | jq"
      ],
      "output": {
        "caption": "The catalogue item with id `2`",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "85a5d7fa-2490-4f39-a300-cac533c9e634",
      "contents": [
        "The database has three carts, as shown in the following tables.",
        "",
        "| `cart_id` | `item_id` | `caption`     | `quantity` |",
        "| --------: | --------: | ------------- | ---------: |",
        "|         1 |         1 | Leather Sofa  |          1 |",
        "|         1 |         5 | LED TV        |          1 |",
        "|         2 |         2 | Wooden Table  |          1 |",
        "|         2 |         3 | Plastic Chair |          6 |",
        "|         3 |         4 | Mug           |          4 |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "20a6987d-2d87-4221-a0cd-623d9d9017a6",
      "commands": [
        "curl --silent 'http://localhost:8080/cart/2' | jq"
      ],
      "output": {
        "caption": "The cart with id `2` and its items",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "8b41449f-46c3-445a-b77f-20a4a103051e",
      "contents": [
        "Stop the application once ready."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "d283ca34-8fd9-4921-b005-8615e3a9af9b",
      "commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "fd625dc6-c843-4d09-be37-d71c57a482ec",
      "contents": [
        "Let’s see at the classes we have created so far and how these are organised."
      ]
    },
    {
      "type": "Command",
      "id": "872a4a7b-3c5e-4775-ab26-6cdb0ed4786e",
      "commands": [
        "tree './src'"
      ],
      "output": {
        "caption": "The `src` directory should have the following structure."
      },
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "89fd83ca-85aa-4a5f-8285-e6e49cd80812",
      "contents": [
        "Commit these changes so that you can always revert back to this point."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "04871243-696f-4970-9fa6-6bcb48b4d361",
      "commands": [
        "MESSAGE='Partition classes by domain'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'The project started as a layered monolith. This refactor organises classes by domain (domain partitioning) instead of technically.' \\",
        "  --message 'This is the first step towards a modular architecture.'",
        "git tag --annotate 'v4.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Heading",
      "id": "f8e989db-9554-4e95-9c32-e385d43f57e2",
      "level": "H3",
      "title": "Modular monolithic architecture tradeoffs"
    },
    {
      "type": "Markdown",
      "id": "c0edf722-3bfb-4464-b523-c8cce79267b5",
      "contents": [
        "The application is now organised by domain and provides clear boundaries between different domains within the organisation. For the organisation to process and handle orders it needs to introduce a payment and fulfilment component. All payment related code will go to the _payment_ package and the fulfilment related code will go to the _fulfilment_ package.",
        "",
        "As the application grows, the team grows too and having everything in one project may not be ideal. It is very easy to split this project into different projects  now that it is organised by domain.",
        "",
        "Please note that the cart still needs the catalogue  as it depends on it.",
        "",
        ">**Why would we split this into multiple projects?**",
        ">",
        "> There are many reasons why we would like to do that. Let’s consider the payments component. This component may require reviews by auditors before a new release could be released. Having all the code in one project means that every time the code is changed, then the whole project needs to be reviewed, even if the payment code is not changed.",
        ">",
        "> Furthermore, building and testing the whole application can be quite slow. I came across applications with millions of lines of code that take about an hour to build and test the whole application. This is quite slow, especially when working in an iterative approach.",
        ">",
        "> Moving the payment code into its own repository can mitigate these and other problems. Teams can be assigned to specific projects and only they can change the code while other teams may be able to open pull requests if needed. Each project can have their own build flow, which can be different based on the code. The shopping cart and the payment projects may have different requirements and a different workflow. In case of the payment project, an auditor may need to review and approve the code, for example, something that is not required by the shopping cart project.",
        "",
        ">**Do you recommend one (big) code repository, or a repository per project?**",
        ">",
        "> There is more than meets the eye, here.",
        ">",
        "> Splitting the project into smaller projects does not also require moving each project into its own source code repository. An organisation can decide to put everything in one (big) repository. Google is famously known for this and they have a team of engineers looking after the huge (to say the least) repository and they have a set of tools that work with this repository.",
        ">",
        "> The one repository has several advantages. A refactor that affects multiple projects can happen in one commit. This can then trigger a build of the affected projects (not necessarily the whole thing) and then deployed. Note that in this case we still have one monolithic application that is deployed as a single application. Changing one project, or many projects, will always involve a new deployment of the whole application.",
        ">",
        "> Large repositories have their challenges too. Say that our projects involve thousands of classes with millions of lines of code, pulling the whole repository will take a long time and take a lot of space. Big companies have teams looking after large repositories and have created custom tools to help developers navigate it. Smaller organisations that do not have such bandwidth, should consider the implications of large repositories and consider smaller ones.",
        ">",
        "> The next option is to have a repository per team. A team may be responsible for several projects, all of which are found in the same repository. This allows the team to quickly refactor their code across projects as all are found in a single repository. This type of organisation finds a middle ground between large repositories and very small, one repository per project.",
        ">",
        "> Changes across repositories require coordination. Having code spread across multiple repositories makes it hard to find who is accessing what. Say a team needs to change one of their interfaces. They cannot look up the code and refactor both ends, not calculate the effort needed to make such a change. Additional tools may be needed to address these problems. It is important to avoid lockstep changes as this will undermine any benefits gained when splitting the project into smaller parts.",
        "",
        "> **Are there any disadvantages when splitting the project into multiple projects?**",
        ">",
        "> Yes. There is no such thing as a free lunch.",
        ">",
        "> Let us put aside the challenges related to the multiple repositories, which was covered in the previous question.",
        ">",
        "> With one project, we have one built process that builds everything and then creates one artefact or a set of artefacts, usually in the form of JAR files, which is then deployed together. There is no need to make sure that the correct artefacts are being pulled as this is all generated during the build process.",
        ">",
        "> With multiple projects and possible different build flows, there needs to be an assurance that the application works as expected once all the artefacts, usually in the form of JAR files, from all projects are pulled together. There is a chance that the wrong version is used which will cause the application to behave erroneously. These challenges are not present with one project and one build flow as all the code is built together.",
        ">",
        "> Like in many other aspects of software development and architecture, everything is a tradeoff and we need to weigh the options and decide accordingly. Also note that what was viable a year ago, may not be anymore, and we need to re-evaluate our axioms as context changes."
      ]
    },
    {
      "type": "Heading",
      "id": "ae8378e5-9b09-4bf8-81e0-acc74acfc2a5",
      "level": "H4",
      "title": "Scoring the new modular monolithic architecture"
    },
    {
      "type": "Markdown",
      "id": "71a73040-6af0-47a3-b774-634ff224fa67",
      "contents": [
        "**Please do not proceed before submitting your scores**, as otherwise you may be influenced by the scores shown here.",
        "",
        "| Question                                                                                    | Modular Monolith | Layered Monolith |",
        "| ------------------------------------------------------------------------------------------- | ---------------: | ---------------: |",
        "| Would you recommend this project to others?                                                 |                5 |                5 |",
        "| How easy is it to make changes to the application?                                          |          **5 ↑** |                4 |",
        "| How safe do you feel in making changes to the application and deploying them to production? |                4 |                4 |",
        "| How easy is it to deploy changes to production?                                             |                5 |                5 |",
        "",
        "This application scored quite high in my opinion. The motivation behind these scores is discussed in the next sections."
      ]
    },
    {
      "type": "Heading",
      "id": "3e0eaf4e-fd90-44af-8140-11fa346682cd",
      "level": "H4",
      "title": "Domain partitioning"
    },
    {
      "type": "Markdown",
      "id": "0f4c0c5e-b60f-46e8-9e35-f395f7d3c5b6",
      "contents": [
        "Domain partitioning organises the code by the domain it belongs to."
      ]
    },
    {
      "type": "Command",
      "id": "075a8924-5d4f-4ed5-ae78-f7b3b8946906",
      "commands": [
        "tree -L 2 'src/main/java'"
      ],
      "output": {
        "caption": "This command shows the top packages, which are"
      },
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "752ee238-abf0-4362-98f3-21de9dde1176",
      "contents": [
        "By looking at the top-level packages, we can discern what this application is about. The top-level package reflects the business language too. For instance, if we want to add an image to the catalogue items, which package should we work in? That’s not a tricky question – it’s the `demo.catalogue` package. Similarly, if we need to allow the user to remove items from the shopping cart, where should we look? Look no further than the `demo.cart` package.",
        "",
        "This simplifies the application and earns this architectural style a 5 in “_How easy is it to make changes to the application?_” Many believe that this architecture style achieves a good balance as it brings in the advantages of smaller services without the complexity of distributed applications."
      ]
    },
    {
      "type": "Heading",
      "id": "fc48f754-0626-47be-807a-cac26f8669b7",
      "level": "H4",
      "title": "All or nothing"
    },
    {
      "type": "Markdown",
      "id": "0f4fb782-2305-454c-a986-c76387db61c8",
      "contents": [
        "We have organised the packages differently which improves locality, but that does not change the fact that this is still a monolithic application. While this improves the score of “_How easy is it to make changes to the application?_”, we will have to deploy the whole application with every change. That is why my score for “_How safe do you feel in making changes to the application and deploying them to production?_” remained 4."
      ]
    },
    {
      "type": "Heading",
      "id": "c39bcdd5-3d06-41f4-a4c0-63117ce79e23",
      "level": "H2",
      "title": "Split the application into multiple projects"
    },
    {
      "type": "Markdown",
      "id": "e0c948e3-5b4f-4e35-a456-59fa3ddce5e5",
      "contents": [
        "In this section we will be splitting the single project into multiple projects. We will do this in four steps, where each main component is separated from the main application, as shown below.",
        "",
        "![Extracting each component as separate projects](./assets/images/Extracting%20each%20component%20as%20separate%20projects.png).",
        "",
        "Each split is discussed in detail later on and don’t worry if you cannot understand why the application is being extracted in this way.",
        "",
        "Please note that this is quite a small project, and it does not usually warrant such a split. As discussed in the previous section, splitting the project into smaller ones adds to the overhead and in this case may not be justified.",
        "",
        "> **So why are we splitting it?**",
        ">",
        "> We are splitting this project into smaller projects each having its own repository to first show how this refactoring can be undertaken and also to provide a platform to discuss the challenges of such undertaking.",
        "",
        "Our project comprises two features, catalogue and cart, and a common project. These three will be moved into three distinct projects. We will take the first grow and then shrink approach. The current project contains the whole application. We will start by copying the whole project, and then we will remove anything that is not needed, hence grown and then shrink. This will be described in detail as we start the refactoring."
      ]
    },
    {
      "type": "Heading",
      "id": "bfe040f7-39f4-4879-bdb4-6b2eb573c3b5",
      "level": "H3",
      "title": "Extract the common component"
    },
    {
      "type": "Markdown",
      "id": "fa45f552-3d1c-48f1-a023-34d2c4b80a0e",
      "contents": [
        "The application has the `demo.common` package that contains code that does not belong to any of the domain areas and provides utility functionality. The cart and catalogue features may use such functionality.",
        "",
        "In this section we will extract this code into a separate project and repository. In this refactoring we assumed the one project one repository approach. With the risk of repeating  myself, this may have not been the right decision given the small size of this project, but we opted into this option as we want to highlight how this can be done and also, together with its challenges.",
        "",
        "![Extracting the common into independent project](./assets/images/Extracting%20the%20common%20into%20independent%20project.png)",
        "",
        "In this refactoring we will cover the following steps",
        "",
        "1. Copy the existing application project (_grow_).",
        "2. Remove the code that is not related to the common project (_start shrinking_).",
        "3. Build the new project and verify that it works as expected.",
        "4. Refactor the existing application to use the new common project (_shrink_).",
        "",
        "At the end we will end up with two projects that are built independently and deployed as a single monolithic application. Kindly note that while we have two projects, this is still deployed as a monolithic application."
      ]
    },
    {
      "type": "Heading",
      "id": "62d630f5-88ba-40f1-af00-6d28aec23c56",
      "level": "H4",
      "title": "Step 1: Copy the existing application project (_grow_)"
    },
    {
      "type": "Markdown",
      "id": "daa2ca94-ea72-4a29-8814-4350307ebac2",
      "contents": [
        "Copy the project."
      ]
    },
    {
      "type": "Command",
      "id": "6ee89fd2-3b29-4c31-9794-3c54b4465561",
      "commands": [
        "rm -rf 'demo-application-common'",
        "cp -R './demo-application' './demo-application-common'"
      ]
    },
    {
      "type": "Markdown",
      "id": "16495f54-60a0-4468-8698-072a7095c829",
      "contents": [
        "That was easy!!"
      ]
    },
    {
      "type": "Heading",
      "id": "9815eac5-d9cd-4a7a-8f73-b3b2d6a9789b",
      "level": "H4",
      "title": "Step 2: Remove the code that is not related to the common project (_start shrinking_)"
    },
    {
      "type": "Markdown",
      "id": "99efe7b2-fcee-48a1-a073-3fd38c3a81b9",
      "contents": [
        "Remove all the files that are not needed by the common project."
      ]
    },
    {
      "type": "Command",
      "id": "2b01514b-bde0-4519-a475-71679b4da1ae",
      "commands": [
        "rm -rf './demo-application-common/.git'",
        "rm -rf './demo-application-common/src/main/java/demo/cart'",
        "rm -rf './demo-application-common/src/main/java/demo/catalogue'",
        "rm -rf './demo-application-common/src/main/resources'",
        "rm './demo-application-common/src/main/java/demo/Main.java'",
        "rm -rf './demo-application-common/src/test'",
        "rm -rf './demo-application-common/target'"
      ]
    },
    {
      "type": "Markdown",
      "id": "12efd672-6654-4893-a921-ca06e20cbdd6",
      "contents": [
        "After these changes we should end up with one class, the `Mapper.java` class, and the necessary maven files and directories."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "9a51243f-62f3-4057-b674-ccd29708d731",
      "commands": [
        "tree -a './demo-application-common'"
      ],
      "output": {},
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Markdown",
      "id": "663f2b8c-7c07-4a2f-ba20-4be5fae54be0",
      "contents": [
        "The `pom.xml` need to be updated as this is configured for the main project. Different from the main project, this project is very lean and does not have any dependencies. Rename the `artifactId` and remove the unnecessary dependencies."
      ]
    },
    {
      "type": "Command",
      "id": "6ba8f3a9-bc64-4e93-941d-ce5361f6d2a9",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml",
        "+++ b/pom.xml",
        "@@ -3,58 +3,13 @@",
        "          xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">",
        "     <modelVersion>4.0.0</modelVersion>",
        " ",
        "-    <parent>",
        "-        <groupId>org.springframework.boot</groupId>",
        "-        <artifactId>spring-boot-starter-parent</artifactId>",
        "-        <version>3.3.0</version>",
        "-        <relativePath/> <!-- lookup parent from repository -->",
        "-    </parent>",
        "-",
        "     <groupId>demo</groupId>",
        "-    <artifactId>demo-application</artifactId>",
        "+    <artifactId>demo-application-common</artifactId>",
        "     <version>0.0.1-SNAPSHOT</version>",
        "-    <name>Demo Application</name>",
        "-    <description>A simple application used to demonstrate different architecture styles</description>",
        "+    <name>Common</name>",
        "+    <description>A utilities project containing common code used by different projects</description>",
        " ",
        "     <properties>",
        "-        <java.version>21</java.version>",
        "+        <maven.compiler.release>21</maven.compiler.release>",
        "     </properties>",
        "-",
        "-    <dependencies>",
        "-        <!-- Web -->",
        "-        <dependency>",
        "-            <groupId>org.springframework.boot</groupId>",
        "-            <artifactId>spring-boot-starter-web</artifactId>",
        "-        </dependency>",
        "-",
        "-        <!-- Database -->",
        "-        <dependency>",
        "-            <groupId>com.h2database</groupId>",
        "-            <artifactId>h2</artifactId>",
        "-        </dependency>",
        "-        <dependency>",
        "-            <groupId>org.flywaydb</groupId>",
        "-            <artifactId>flyway-core</artifactId>",
        "-        </dependency>",
        "-        <dependency>",
        "-            <groupId>org.springframework.boot</groupId>",
        "-            <artifactId>spring-boot-starter-data-jpa</artifactId>",
        "-        </dependency>",
        "-",
        "-        <!-- Testing -->",
        "-        <dependency>",
        "-            <groupId>org.springframework.boot</groupId>",
        "-            <artifactId>spring-boot-starter-test</artifactId>",
        "-            <scope>test</scope>",
        "-        </dependency>",
        "-    </dependencies>",
        "-",
        "-    <build>",
        "-        <plugins>",
        "-            <plugin>",
        "-                <groupId>org.springframework.boot</groupId>",
        "-                <artifactId>spring-boot-maven-plugin</artifactId>",
        "-            </plugin>",
        "-        </plugins>",
        "-    </build>",
        " </project>",
        "EOF"
      ],
      "working_dir": "demo-application-common"
    },
    {
      "type": "Markdown",
      "id": "447a9f20-ca94-4d14-8834-3fbc4c7fe52c",
      "contents": [
        "The `pom.xml` file of the new common project should look like the following example."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "20883d15-1c63-4b36-afe3-d983d03cfeb0",
      "path": "./demo-application-common/pom.xml"
    },
    {
      "type": "Markdown",
      "id": "0f710455-15e3-4a32-8d2a-ba3a9d44494c",
      "contents": [
        "Note that the common project’s `pom.xml` file does not inherit from the Spring Boot’s pom, and thus we cannot use the following property to set the java version.",
        "",
        "```xml",
        "    <properties>",
        "        <java.version>21</java.version>",
        "    </properties>",
        "```",
        "",
        "This now is replaced by [Maven’s compiler release property](https://maven.apache.org/plugins/maven-compiler-plugin/examples/set-compiler-release.html).",
        "",
        "```xml",
        "    <properties>",
        "        <maven.compiler.release>21</maven.compiler.release>",
        "    </properties>",
        "```"
      ]
    },
    {
      "type": "Heading",
      "id": "66ad0d9c-20c4-43a6-ace5-6a24b8d4a1c9",
      "level": "H4",
      "title": "Step 3: Build the new project and verify that it works as expected"
    },
    {
      "type": "Markdown",
      "id": "aa14b46c-699d-470e-afa5-26a333c52788",
      "contents": [
        "Build the extracted common project and install (save) it in the local Maven repository (`~/.m2`) for the other projects to find it."
      ]
    },
    {
      "type": "Command",
      "id": "50a599c5-aaac-4224-a710-bf9f373321fa",
      "commands": [
        "./mvnw clean install"
      ],
      "working_dir": "demo-application-common"
    },
    {
      "type": "Markdown",
      "id": "3e4040f4-6a8d-4fc9-8fe3-bbe37283d052",
      "contents": [
        "> **Why are we saving it in the local Maven repository?**",
        ">",
        "> We have extracted the common code into a separate project. The rest of the application needs to access this code. Putting it in the local repository will make this code accessible to any (local) project that imports it.",
        ">",
        "> Generally, the common project will need to be published to a common repository, such as the [Maven central repository](https://mvnrepository.com/repos/central) or an internal repository only accessible to the organisation, where other teams and projects can access the JAR file.",
        ">",
        "> Please note that, for simplicity, this will only put the project in the local Maven repository and can only be accessible from this computer and not from other computers.",
        "",
        "The project’s JAR file will be saved in the local Maven repository (`~/.m2/repository/demo/demo-application-common`)."
      ]
    },
    {
      "type": "Command",
      "id": "bbaf6b19-6c59-4b36-be76-358fdadbfb71",
      "commands": [
        "tree \"${HOME}/.m2/repository/demo/demo-application-common\""
      ],
      "output": {
        "caption": "The common project artefacts in the Maven local repository."
      },
      "tags": [
        "optional"
      ],
      "working_dir": "demo-application-common"
    },
    {
      "type": "Markdown",
      "id": "6e4e97e8-c115-46ad-bbf6-c44d6088fe9b",
      "contents": [
        "Commit these changes so that you can always revert back to this point.",
        "",
        "The following example uses my name (`Albert Attard`) and email address (`albert.attard@oracle.com`). Please don’t forget to update these with your details."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "ef4de4a2-3b45-4791-9007-ffdeb0c86139",
      "commands": [
        "MESSAGE='Create project'",
        "git init --initial-branch main",
        "git config user.name 'Albert Attard'",
        "git config user.email 'albert.attard@oracle.com'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'This project contains the common components found in the demo-application, which were simply copied here. Later on these will be removed from the demo-application and this project will be added as a dependency.' \\",
        "  --message 'This is the first of four steps involved in refactoring the modular single project monolith into modular multi-project monolith.'",
        "git tag --annotate 'v1.0' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-common"
    },
    {
      "type": "Heading",
      "id": "74704dc6-182d-4265-a77a-1fda1e465c79",
      "level": "H4",
      "title": "Step 4: Refactor the existing application to use the new common project (_shrink_)"
    },
    {
      "type": "Markdown",
      "id": "8ba1bdcc-8ed9-46f2-a37f-cc16c2476f7c",
      "contents": [
        "Now let’s turn our attention back to the existing application (`demo-application`). The existing application still has its own copy of the `Mapper.java` class. But before we can remove this class, we must import the newly extracted `demo-application-common` project as a dependency into the existing application."
      ]
    },
    {
      "type": "Markdown",
      "id": "4567e819-d8d4-4f5d-a41f-ac33f00fbbf4",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "b694b4fd-7edb-4e17-b981-2b3755526ffe",
      "commands": [
        "git tag --annotate 'v5.0' --message 'Before extracting the common component'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "e1e71077-b780-4f77-aeca-d8adcccb5a37",
      "contents": [
        "The common project is now available in our local Maven repository (`~/.m2`). This means that other (local) projects can refer to this dependency.",
        "",
        "Update the main project and add the common project as a dependency."
      ]
    },
    {
      "type": "Command",
      "id": "c6e663e9-1871-482a-a87a-34cc7722d048",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml",
        "+++ b/pom.xml",
        "@@ -21,6 +21,13 @@",
        "     </properties>",
        " ",
        "     <dependencies>",
        "+        <!-- Common -->",
        "+        <dependency>",
        "+            <groupId>demo</groupId>",
        "+            <artifactId>demo-application-common</artifactId>",
        "+            <version>0.0.1-SNAPSHOT</version>",
        "+        </dependency>",
        "+",
        "         <!-- Web -->",
        "         <dependency>",
        "             <groupId>org.springframework.boot</groupId>",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "130b7da0-c2b8-45b5-9abe-65739e4252dc",
      "contents": [
        "The `demo-application`’s `pom.xml` file now should have a new dependency"
      ]
    },
    {
      "type": "DisplayFile",
      "id": "99019fe8-8c7e-4f03-8e9b-733fc135e92c",
      "path": "./demo-application/pom.xml",
      "from_line": 23,
      "number_of_lines": 7
    },
    {
      "type": "Markdown",
      "id": "116d1356-ee57-4683-8145-c36e7050824a",
      "contents": [
        "Remove the `demo.common` package as all its files. The project will get these classes from newly added dependency (`demo-application-common`)."
      ]
    },
    {
      "type": "Command",
      "id": "19cbf6b9-ba0e-42ee-b31b-885dbe8396dd",
      "commands": [
        "rm -rf './src/main/java/demo/common'"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "1a7cf1d4-9a2f-4ca7-a3d1-9b79698a8dbc",
      "contents": [
        "The `demo.common` package is now removed together with the `Mapper.java` class"
      ]
    },
    {
      "type": "Command",
      "id": "5dbc7ce6-e05e-4858-8f30-b5203995d966",
      "commands": [
        "tree './src/main/java'"
      ],
      "output": {
        "caption": "Only the cart and catalogue packages are left."
      },
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "45178a89-150d-4b94-98b2-2f73186c6d4c",
      "contents": [
        "Finally, modify the banner to reflect the new changes, that is a multiple project modular monolithic application."
      ]
    },
    {
      "type": "Command",
      "id": "03f58755-7e25-4b9d-a521-24987fc04847",
      "commands": [
        "patch -f -p1 -u './src/main/resources/banner.txt' << EOF",
        "--- a/src/main/resources/banner.txt",
        "+++ b/src/main/resources/banner.txt",
        "@@ -4,4 +4,4 @@",
        " ██║╚██╔╝██║██║   ██║██║╚██╗██║██║   ██║██║     ██║   ██║   ██╔══██║██║██║         ██║ ██║╚██╔╝██║██║   ██║██║  ██║██║   ██║██║     ██╔══██║██╔══██╗ ██║",
        " ██║ ╚═╝ ██║╚██████╔╝██║ ╚████║╚██████╔╝███████╗██║   ██║   ██║  ██║██║╚██████╗    ╚██╗██║ ╚═╝ ██║╚██████╔╝██████╔╝╚██████╔╝███████╗██║  ██║██║  ██║██╔╝",
        " ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝ ╚══════╝╚═╝   ╚═╝   ╚═╝  ╚═╝╚═╝ ╚═════╝     ╚═╝╚═╝     ╚═╝ ╚═════╝ ╚═════╝  ╚═════╝ ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝",
        "-Modular Monolithic Application as a Single Project",
        "+Modular Monolithic Application as a Multi-Project",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "49d1a716-b3e4-480a-ac6e-01e6894ca1b3",
      "contents": [
        "Build the project once more to verify that everything is still working as expected."
      ]
    },
    {
      "type": "Command",
      "id": "aea16353-f0d9-4c6e-8b78-409282e72c41",
      "commands": [
        "./mvnw clean verify"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "e1fa945a-0582-4b86-91fe-e755de817c55",
      "contents": [
        "Try the application now that the common parts are extracted as a standalone project."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "124d9470-2050-4820-a707-4fd0eeaeba23",
      "commands": [
        "# Start the application in the background",
        "java -jar './demo/demo-application-0.0.1-SNAPSHOT.jar' > './demo/output.txt' 2>&1 &",
        "",
        "# Wait for the application to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:8080/cart/1')\" -ne '200' ]; do echo 'Waiting for the application to start'; sleep 1; done"
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "ea986998-3888-444d-97b7-55068ebc2107",
      "contents": [
        "This starts our application in the background and waits for it to start.",
        "",
        "Make a few requests to the catalogue items endpoint. We have the following catalogue items in the database.",
        "",
        "| `id` | `caption`     | `description`                                                         |",
        "| ---: | ------------- | --------------------------------------------------------------------- |",
        "|    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "|    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "|    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "|    4 | Mug           | The ideal way to start the day                                        |",
        "|    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "d0b7aaf3-8ba1-4cea-bfc7-9de72a99a563",
      "commands": [
        "curl --silent 'http://localhost:8080/catalogue/item/3' | jq"
      ],
      "output": {
        "caption": "The catalogue item with id `3`",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "cc9ea6bd-a7c6-4e77-9a19-25ad74d2b8ea",
      "contents": [
        "The database has three carts, as shown in the following tables.",
        "",
        "| `cart_id` | `item_id` | `caption`     | `quantity` |",
        "| --------: | --------: | ------------- | ---------: |",
        "|         1 |         1 | Leather Sofa  |          1 |",
        "|         1 |         5 | LED TV        |          1 |",
        "|         2 |         2 | Wooden Table  |          1 |",
        "|         2 |         3 | Plastic Chair |          6 |",
        "|         3 |         4 | Mug           |          4 |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "f61b0051-4916-4222-833f-8b6676d3d531",
      "commands": [
        "curl --silent 'http://localhost:8080/cart/3' | jq"
      ],
      "output": {
        "caption": "The cart with id `3` and its items",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "cffacedc-1ea6-4590-970f-f8d5d22ae04f",
      "contents": [
        "Stop the application once ready."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "0903bdfd-6f9b-4c46-b542-52e9263aaea1",
      "commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "22a6058d-b09f-4b97-8561-7403a331efd1",
      "contents": [
        "Commit these changes so that you can always revert back to this point."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "7cec5833-25e0-4f6d-836f-0dbd259b9059",
      "commands": [
        "MESSAGE='Extract common component'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'The common components are moved from this project to the demo-application-common project and added a dependency.' \\",
        "  --message 'This is the first of four steps involved in refactoring the modular single project monolith into modular multi-project monolith.'",
        "git tag --annotate 'v5.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "bd213836-8705-4362-89f3-81999f843bde",
      "contents": [
        "This is the first and simplest refactoring. The catalogue and the cart are still pending and these are more complicated as we will see in the coming sections."
      ]
    },
    {
      "type": "Heading",
      "id": "79617b5c-9aa4-4b35-b1e9-1651dafddb32",
      "level": "H3",
      "title": "Extract the database migration component"
    },
    {
      "type": "Markdown",
      "id": "de84df2d-4e2c-440f-80ef-ba6d88fd0287",
      "contents": [
        "Our application uses a database and the database schema is being maintained by the [FlywayDB](https://flywaydb.org/) migration library. This presents our first challenge when splitting our monolithic single project into monolithic multi-projects. The idea in this refactoring is to split the cart and the catalogue into separate projects. Both of them make use of the database. Moving the migration schema code to either project is not recommended as that will prevent the other to change the schema without opening access to the whole organisation.",
        "",
        "This leaves us with two options, keep the database migration code in the main project or fork this out into a new project. We will go with the latter, which may not always be the right thing to do. Having it in its own project provides fine-grained access control. The teams can be granted access to the database project without providing access to the main project.",
        "",
        "![Extracting the db-migration into independent project](./assets/images/Extracting%20the%20db-migration%20into%20independent%20project.png)",
        "",
        "In this refactoring we will cover the following steps",
        "",
        "1. Copy the existing application project (_grow_).",
        "2. Remove the code that is not related to the database migration project (_start shrinking_).",
        "3. Build the new project and verify that it works as expected.",
        "4. Refactor the existing application to use the new database migration project (_shrink_).",
        "",
        "At the end we will end up with three projects that are built independently and deployed as a single monolithic application. Kindly note that while we have three projects, this is still deployed as a monolithic application."
      ]
    },
    {
      "type": "Heading",
      "id": "c9de8b0d-11dc-4241-a009-abb9db596511",
      "level": "H4",
      "title": "Step 1: Copy the existing application project (_grow_)"
    },
    {
      "type": "Markdown",
      "id": "7b5af700-c7df-41fa-ab29-b21a95920846",
      "contents": [
        "Copy the project."
      ]
    },
    {
      "type": "Command",
      "id": "2818ec13-bdb9-4fd0-ad9b-35ab99837c24",
      "commands": [
        "rm -rf './demo-application-db-migration'",
        "cp -R './demo-application' './demo-application-db-migration'"
      ]
    },
    {
      "type": "Markdown",
      "id": "0a936387-d6cf-45e2-80dd-da0226c335aa",
      "contents": [
        "Easy Peasy!"
      ]
    },
    {
      "type": "Heading",
      "id": "1598851c-4205-4bd9-907c-319b2d484130",
      "level": "H4",
      "title": "Step 2: Remove the code that is not related to the database migration project (_start shrinking_)"
    },
    {
      "type": "Markdown",
      "id": "b7f29ff9-a4d9-428f-82ed-5b7553682ce3",
      "contents": [
        "Remove the code that is not necessary by the database migration."
      ]
    },
    {
      "type": "Command",
      "id": "9980d364-b14b-4ace-ba66-2590cda2cb25",
      "commands": [
        "rm -rf './demo-application-db-migration/.git'",
        "rm -rf './demo-application-db-migration/src/main/java/'",
        "rm './demo-application-db-migration/src/main/resources/application.properties'",
        "rm './demo-application-db-migration/src/main/resources/banner.txt'",
        "rm -rf './demo-application-db-migration/src/test/'",
        "rm -rf './demo-application-db-migration/target'"
      ]
    },
    {
      "type": "Markdown",
      "id": "721e4007-7f73-44c4-a444-28094b0fa726",
      "contents": [
        "This project should now have the migration SQL scripts together with the Maven related files."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "0f2f15ac-5f01-49ad-b014-87a8bf9a3645",
      "commands": [
        "tree -a './demo-application-db-migration'"
      ],
      "output": {
        "caption": "Only the migration scripts are left in the project."
      },
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Markdown",
      "id": "a17a5594-de9f-4086-b579-7c163e0b0fbd",
      "contents": [
        "The `pom.xml` file of the new database migration project needs to be updated as this is configured for the main project. Different from the main project, this project is very lean and only requires the database related dependencies. Rename the `artifactId` and remove the unnecessary dependencies.",
        "",
        "Note that this project does not have any dependencies on the [Spring Framework](https://spring.io/projects/spring-framework) and [Spring Boot](https://spring.io/projects/spring-boot)."
      ]
    },
    {
      "type": "Todo",
      "id": "a81abc06-1346-4c01-b449-0ec99d8ef44c",
      "comments": [
        "Do we need to inherit from the Spring Boot parent pom?"
      ]
    },
    {
      "type": "Command",
      "id": "357fe95f-a4f2-483f-9f26-73e07c29f6a9",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml",
        "+++ b/pom.xml",
        "@@ -11,29 +11,16 @@",
        "     </parent>",
        " ",
        "     <groupId>demo</groupId>",
        "-    <artifactId>demo-application</artifactId>",
        "+    <artifactId>demo-application-db-migration</artifactId>",
        "     <version>0.0.1-SNAPSHOT</version>",
        "-    <name>Demo Application</name>",
        "-    <description>A simple application used to demonstrate different architecture styles</description>",
        "+    <name>DB Migration</name>",
        "+    <description>Contains all core related to the database migration</description>",
        " ",
        "     <properties>",
        "         <java.version>21</java.version>",
        "     </properties>",
        " ",
        "     <dependencies>",
        "-        <!-- Common -->",
        "-        <dependency>",
        "-            <groupId>demo</groupId>",
        "-            <artifactId>demo-application-common</artifactId>",
        "-            <version>0.0.1-SNAPSHOT</version>",
        "-        </dependency>",
        "-",
        "-        <!-- Web -->",
        "-        <dependency>",
        "-            <groupId>org.springframework.boot</groupId>",
        "-            <artifactId>spring-boot-starter-web</artifactId>",
        "-        </dependency>",
        "-",
        "         <!-- Database -->",
        "         <dependency>",
        "             <groupId>com.h2database</groupId>",
        "@@ -43,25 +30,5 @@",
        "             <groupId>org.flywaydb</groupId>",
        "             <artifactId>flyway-core</artifactId>",
        "         </dependency>",
        "-        <dependency>",
        "-            <groupId>org.springframework.boot</groupId>",
        "-            <artifactId>spring-boot-starter-data-jpa</artifactId>",
        "-        </dependency>",
        "-",
        "-        <!-- Testing -->",
        "-        <dependency>",
        "-            <groupId>org.springframework.boot</groupId>",
        "-            <artifactId>spring-boot-starter-test</artifactId>",
        "-            <scope>test</scope>",
        "-        </dependency>",
        "     </dependencies>",
        "-",
        "-    <build>",
        "-        <plugins>",
        "-            <plugin>",
        "-                <groupId>org.springframework.boot</groupId>",
        "-                <artifactId>spring-boot-maven-plugin</artifactId>",
        "-            </plugin>",
        "-        </plugins>",
        "-    </build>",
        " </project>",
        "EOF"
      ],
      "working_dir": "demo-application-db-migration"
    },
    {
      "type": "Markdown",
      "id": "ed4b2223-72b5-48fe-ab36-46fe5cbd15ed",
      "contents": [
        "The `pom.xml` file of the `demo-application-db-migration` project should look like the following example."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "03647329-e0c9-4831-a743-593e69d2f5b1",
      "path": "./demo-application-db-migration/pom.xml"
    },
    {
      "type": "Heading",
      "id": "8e2d7245-0b6e-4fdf-b689-b5c90e56aef5",
      "level": "H4",
      "title": "Step 3: Build the new project and verify that it works as expected"
    },
    {
      "type": "Markdown",
      "id": "81288453-e08b-4c15-93ae-113283437e62",
      "contents": [
        "Build the extracted database migration project and install (save) it in the local Maven repository (`~/.m2`) for the other projects to find it."
      ]
    },
    {
      "type": "Command",
      "id": "2279932f-5ee5-4ac9-ae92-9fd05ec1be4c",
      "commands": [
        "./mvnw clean install"
      ],
      "working_dir": "demo-application-db-migration"
    },
    {
      "type": "Markdown",
      "id": "f0cf1ae5-8395-4c13-a71b-0be2628b5859",
      "contents": [
        "The project’s JAR file will be saved in the local Maven repository (`~/.m2/repository/demo/demo-application-db-migration`)."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "1e216703-4e70-44fd-8f2f-7ca43331e9ec",
      "commands": [
        "tree \"${HOME}/.m2/repository/demo/demo-application-db-migration\""
      ],
      "output": {
        "caption": "The database migration project artefacts in the Maven local repository."
      },
      "tags": [
        "optional"
      ],
      "working_dir": "demo-application-db-migration"
    },
    {
      "type": "Markdown",
      "id": "6e966e81-ddf7-47d5-8610-a613f8d580e8",
      "contents": [
        "Commit these changes so that you can always revert back to this point.",
        "",
        "The following example uses my name (`Albert Attard`) and email address (`albert.attard@oracle.com`). Please don’t forget to update these with your details."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "6dbc41ab-5b02-4337-8d90-e9ec80d25223",
      "commands": [
        "MESSAGE='Create project'",
        "git init --initial-branch main",
        "git config user.name 'Albert Attard'",
        "git config user.email 'albert.attard@oracle.com'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'This project contains the database migration components found in the demo-application, which were simply copied here. Later on these will be removed from the demo-application and this project will be added as a dependency.' \\",
        "  --message 'This is the second of four steps involved in refactoring the modular single project monolith into modular multi-project monolith.'",
        "git tag --annotate 'v1.0' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-db-migration"
    },
    {
      "type": "Heading",
      "id": "58a064c8-c2a0-4987-8486-e133fdc290cb",
      "level": "H4",
      "title": "Step 4: Refactor the existing application to use the new database migration project (_shrink_)"
    },
    {
      "type": "Markdown",
      "id": "57a6a0c6-efb2-44ff-a66c-3dd0edb9a543",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "48eda2b4-c397-4fdd-a918-0cf6a429bf2d",
      "commands": [
        "git tag --annotate 'v6.0' --message 'Before extracting the database migration component'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "e0753cec-2f55-4d82-9110-a09baa156fe3",
      "contents": [
        "The database migration project is now available in our local Maven repository (`~/.m2`). This means that other (local) projects can refer to this dependency.",
        "",
        "Update the main project and add the database migration project as a dependency and remove the H2 database and FlywayDB dependencies. These two dependencies will be pulled in from the database migration project."
      ]
    },
    {
      "type": "Command",
      "id": "6e57ec3e-15c5-49cd-aefa-e1cfdd3763b9",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml",
        "+++ b/pom.xml",
        "@@ -36,14 +36,11 @@",
        " ",
        "         <!-- Database -->",
        "         <dependency>",
        "-            <groupId>com.h2database</groupId>",
        "-            <artifactId>h2</artifactId>",
        "+            <groupId>demo</groupId>",
        "+            <artifactId>demo-application-db-migration</artifactId>",
        "+            <version>0.0.1-SNAPSHOT</version>",
        "         </dependency>",
        "         <dependency>",
        "-            <groupId>org.flywaydb</groupId>",
        "-            <artifactId>flyway-core</artifactId>",
        "-        </dependency>",
        "-        <dependency>",
        "             <groupId>org.springframework.boot</groupId>",
        "             <artifactId>spring-boot-starter-data-jpa</artifactId>",
        "         </dependency>",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "5183ee31-4c1f-4a78-aba6-6e380107c1e1",
      "contents": [
        "The `pom.xml` file for the `demo-application` project should look like the following example."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "3838cba1-b518-4305-82ba-9d6325e05a93",
      "path": "./demo-application/pom.xml"
    },
    {
      "type": "Markdown",
      "id": "d16bd46a-a731-449d-85ca-27ac89ba495c",
      "contents": [
        "The migration directory with the SQL script is not needed anymore and needs to be removed from the main project."
      ]
    },
    {
      "type": "Command",
      "id": "51262396-527d-4519-9a74-41c909b66801",
      "commands": [
        "rm -rf './src/main/resources/db'"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "6c43caaf-1cc4-48cf-a1eb-bc54674f1554",
      "contents": [
        "Build the project to verify that these changes are working as expected. This will run the tests, which will fail if the dependencies where not properly refactored."
      ]
    },
    {
      "type": "Command",
      "id": "1a439e94-6026-431f-84e8-3d6712a3708d",
      "commands": [
        "./mvnw clean verify"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "d7b5653a-a2a5-43a2-9993-73209a1287e6",
      "contents": [
        "Try the application now that both the common and database migration are extracted as independent projects."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "38c92c4c-c3bf-4ac0-aeb6-31d5663fa756",
      "commands": [
        "# Start the application in the background",
        "java -jar './demo/demo-application-0.0.1-SNAPSHOT.jar' > './demo/output.txt' 2>&1 &",
        "",
        "# Wait for the application to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:8080/cart/1')\" -ne '200' ]; do echo 'Waiting for the application to start'; sleep 1; done"
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "a2c8e487-2893-4663-8dc2-f5a7cd7e3059",
      "contents": [
        "This starts our application in the background and waits for it to start.",
        "",
        "Make a few requests to the catalogue items endpoint. We have the following catalogue items in the database.",
        "",
        "| `id` | `caption`     | `description`                                                         |",
        "| ---: | ------------- | --------------------------------------------------------------------- |",
        "|    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "|    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "|    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "|    4 | Mug           | The ideal way to start the day                                        |",
        "|    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "ad213d27-df7e-4336-ba75-c82faa397dfd",
      "commands": [
        "curl --silent 'http://localhost:8080/catalogue/item/4' | jq"
      ],
      "output": {
        "caption": "The catalogue item with id `4`",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "20a36453-0002-444c-acfd-79b7835f4681",
      "contents": [
        "The database has three carts, as shown in the following tables.",
        "",
        "| `cart_id` | `item_id` | `caption`     | `quantity` |",
        "| --------: | --------: | ------------- | ---------: |",
        "|         1 |         1 | Leather Sofa  |          1 |",
        "|         1 |         5 | LED TV        |          1 |",
        "|         2 |         2 | Wooden Table  |          1 |",
        "|         2 |         3 | Plastic Chair |          6 |",
        "|         3 |         4 | Mug           |          4 |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "f5641777-44ff-4d5a-a084-cd9f3ee95222",
      "commands": [
        "curl --silent 'http://localhost:8080/cart/1' | jq"
      ],
      "output": {
        "caption": "The cart with id `1` and its items",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "224aab0f-a98f-4bb9-9e9e-323e0ae66ad5",
      "contents": [
        "Stop the application once ready."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "096fd247-1a12-4771-8f82-fa2ce9baaf09",
      "commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "d603899b-9bd4-43bb-b179-21efbe125dcd",
      "contents": [
        "Commit these changes so that you can always revert back to this point."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "04d7cd2e-d05b-474b-b9d1-3d08a5d2f27c",
      "commands": [
        "MESSAGE='Extract database migration component'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'The database migration component is moved from this project to the demo-application-db-migration project and added a dependency.' \\",
        "  --message 'This is the second of four steps involved in refactoring the modular single project monolith into modular multi-project monolith.'",
        "git tag --annotate 'v6.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "0ac61c4c-eeea-4994-a38e-971edfdf43c5",
      "contents": [
        "So far we have extracted two components from the main project, the common component and database migration component. This is still a monolithic application that is deployed as a single unit. The common component being a standalone project does not need to be recompiled and tested every time the application changes. Same applies to the database migration application.",
        "",
        "We still need to extract the catalogue and the cart components from the main project, which will still remain and acts as the single entry point to the application.",
        "",
        "> **The application has two main features: the catalogue and the cart. Which feature should be extracted first?**",
        ">",
        "> Previously, we successfully extracted two components—common and database migration—into separate projects, which are now dependencies of the main application.",
        ">",
        "> Currently, the cart component depends on the catalogue component. This dependency is crucial when deciding which component to extract next.",
        ">",
        "> If we extract the cart component first, we would face a [circular dependency](https://en.wikipedia.org/wiki/Circular_dependency) issue. This is because the main application, which includes the catalogue component, is required by the cart. In turn, if the cart is extracted, the main application would then depend on the cart component for its functionality, creating a dependency loop, as shown below.",
        ">",
        "> ![Circular dependency](./assets/images/Circular%20dependency.png)",
        ">",
        "> On the other hand, if we extract the catalogue component first, the structure becomes more straightforward. The main application will then comprise only the cart component, which depends on the extracted catalogue component. By doing so, the main application can maintain the cart component and simultaneously link to the catalogue features, effectively managing dependencies without creating a circular loop.",
        ">",
        "> Based on this analysis, the catalogue component should be extracted next. This approach simplifies dependency management and avoids the complications of circular dependencies, thereby streamlining the development process."
      ]
    },
    {
      "type": "Heading",
      "id": "119ade63-5d95-482a-9970-eec597522b20",
      "level": "H3",
      "title": "Extract the catalogue component"
    },
    {
      "type": "Markdown",
      "id": "5922b1b1-56b1-417e-a19f-69aefe6cf8c2",
      "contents": [
        "The next component to be extracted is the catalogue component. As discussed before, extracting the cart component first would introduce a [circular dependency](https://en.wikipedia.org/wiki/Circular_dependency).",
        "",
        "![Extracting the catalogue into independent project](./assets/images/Extracting%20the%20catalogue%20into%20independent%20project.png)",
        "",
        "In this refactoring we will cover the following steps",
        "",
        "1. Copy the existing application project (_grow_).",
        "2. Remove the code that is not related to the catalogue project (_start shrinking_).",
        "3. Build the new project and verify that it works as expected.",
        "4. Refactor the existing application to use the new catalogue project (_shrink_).",
        "",
        "At the end we will end up with four projects that are built independently and deployed as a single monolithic application. Kindly note that while we have four projects, this is still deployed as a monolithic application."
      ]
    },
    {
      "type": "Heading",
      "id": "dbd456a9-2537-4203-add8-9dbaf3c9a6bc",
      "level": "H4",
      "title": "Step:1 Copy the existing application project (_grow_)"
    },
    {
      "type": "Markdown",
      "id": "23f97e5d-aefd-4a4f-b07c-e0aa90cfa71d",
      "contents": [
        "Copy the project."
      ]
    },
    {
      "type": "Command",
      "id": "c1affff3-9f96-46a4-a464-1ba94dead1df",
      "commands": [
        "rm -rf './demo-application-catalogue'",
        "cp -R './demo-application' './demo-application-catalogue'"
      ]
    },
    {
      "type": "Markdown",
      "id": "8731e57a-9f50-4ea6-8b91-ea1ce7d9f399",
      "contents": [
        "Done!!"
      ]
    },
    {
      "type": "Heading",
      "id": "7a462afe-a380-4eaf-82f8-1815ea787993",
      "level": "H4",
      "title": "Step 2: Remove the code that is not related to the catalogue project (_start shrinking_)"
    },
    {
      "type": "Markdown",
      "id": "65801091-cecb-470d-b55d-6704810436e6",
      "contents": [
        "Remove all files and directories that are not related to the catalogue project."
      ]
    },
    {
      "type": "Command",
      "id": "dd866a75-f8d4-42a4-b297-aac521b61228",
      "commands": [
        "rm -rf './demo-application-catalogue/.git'",
        "rm -rf './demo-application-catalogue/src/main/java/demo/cart'",
        "rm -rf './demo-application-catalogue/src/main/resources'",
        "rm -rf './demo-application-catalogue/src/test/java/demo/cart'",
        "rm -rf './demo-application-catalogue/target'"
      ]
    },
    {
      "type": "Markdown",
      "id": "9dd7df0d-3d98-45df-98f3-ff42709273d7",
      "contents": [
        "Notice how easy it is to strip away the things that do not belong to the catalogue project. When we organised the project into a modular monolith, we paved the way for decomposition. All we need to keep here is the `demo.catalogue` package."
      ]
    },
    {
      "type": "Command",
      "id": "02e52dfc-e913-47bd-bb6d-43608cb5a2df",
      "commands": [
        "tree -a './demo-application-catalogue'"
      ],
      "output": {
        "caption": "Only the `demo.catalogue` package is left in the project and the main class."
      },
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Markdown",
      "id": "44ff7184-5859-4718-933f-4b88e4cbafc9",
      "contents": [
        "This project does not need to have a main class, but the tests make use of [`@SpringBootTest` annotation](https://docs.spring.io/spring-boot/api/java/org/springframework/boot/test/context/SpringBootTest.html). This means that we have to provide a spring configuration to the test, otherwise it will not work. The simplest way to do this is to copy the main class to the test directory. It may sound a bit unorthodox, but it does the trick.",
        "",
        "Move the main class to the test sources."
      ]
    },
    {
      "type": "Command",
      "id": "e9fa4492-36d4-43b4-8754-903b9788b4a2",
      "commands": [
        "mv './src/main/java/demo/Main.java' './src/test/java/demo/Main.java'"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "0f3a3da8-bb15-4a22-a1ba-d3508991f448",
      "contents": [
        "Change the artefact id and remove the [Spring Boot Maven Plugin](https://docs.spring.io/spring-boot/maven-plugin/index.html). Given that this is not the main application, but it will be just a dependency, we don’t need the Spring Boot Maven Plugin anymore."
      ]
    },
    {
      "type": "Command",
      "id": "967c13a2-8f1e-40de-b1fe-5217bc693cad",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml",
        "+++ b/pom.xml",
        "@@ -11,23 +11,16 @@",
        "     </parent>",
        " ",
        "     <groupId>demo</groupId>",
        "-    <artifactId>demo-application</artifactId>",
        "+    <artifactId>demo-application-catalogue</artifactId>",
        "     <version>0.0.1-SNAPSHOT</version>",
        "-    <name>Demo Application</name>",
        "-    <description>A simple application used to demonstrate different architecture styles</description>",
        "+    <name>Catalogue</name>",
        "+    <description>Contains all code related to the catalogue component</description>",
        " ",
        "     <properties>",
        "         <java.version>21</java.version>",
        "     </properties>",
        "",
        "     <dependencies>",
        "-        <!-- Common -->",
        "-        <dependency>",
        "-            <groupId>demo</groupId>",
        "-            <artifactId>demo-application-common</artifactId>",
        "-            <version>0.0.1-SNAPSHOT</version>",
        "-        </dependency>",
        "-",
        "         <!-- Web -->",
        "         <dependency>",
        "             <groupId>org.springframework.boot</groupId>",
        "@@ -52,13 +45,4 @@",
        "             <scope>test</scope>",
        "         </dependency>",
        "     </dependencies>",
        "-",
        "-    <build>",
        "-        <plugins>",
        "-            <plugin>",
        "-                <groupId>org.springframework.boot</groupId>",
        "-                <artifactId>spring-boot-maven-plugin</artifactId>",
        "-            </plugin>",
        "-        </plugins>",
        "-    </build>",
        " </project>",
        "EOF"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "10e68d7b-5a72-411c-aacd-47d80269e9c2",
      "contents": [
        "The `pom.xml` file of the new catalogue project should look like the following."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "9e0ede47-6131-4f62-8816-d5234d1102f7",
      "path": "./demo-application-catalogue/pom.xml"
    },
    {
      "type": "Markdown",
      "id": "9dae86d9-206b-4292-b5a6-eb47c0ffa80d",
      "contents": [
        "All changes are done and the project should now have the following structure."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "6d6f8430-58c0-4564-a030-7e0204edbccc",
      "commands": [
        "tree '.'"
      ],
      "output": {
        "caption": "Catalogue project structure."
      },
      "tags": [
        "optional"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Heading",
      "id": "e7f9fb90-9b39-47e8-838b-dec4be6f861f",
      "level": "H4",
      "title": "Step 3: Build the new project and verify that it works as expected"
    },
    {
      "type": "Markdown",
      "id": "bae1ca00-b92c-48cc-bcd6-143e47012db8",
      "contents": [
        "Build the extracted catalogue project and install (save) it in the local Maven repository (`~/.m2`) for the other projects to find it."
      ]
    },
    {
      "type": "Command",
      "id": "ad1f2026-884d-4411-b6a7-677afc770df5",
      "commands": [
        "./mvnw clean install"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "78fedddf-984f-44cb-af36-a0b033288bc5",
      "contents": [
        "The project’s JAR file will be saved in the local Maven repository (`~/.m2/repository/demo/demo-application-catalogue`)."
      ]
    },
    {
      "type": "Command",
      "id": "2067764b-9195-4578-a9d9-3fa71e8fc2f0",
      "commands": [
        "tree \"${HOME}/.m2/repository/demo/demo-application-catalogue\""
      ],
      "output": {
        "caption": "The catalogue project artefacts in the Maven local repository."
      },
      "tags": [
        "optional"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "0be19664-2f31-4db6-b27b-e97ee40b7d88",
      "contents": [
        "Commit these changes so that you can always revert back to this point.",
        "",
        "The following example uses my name (`Albert Attard`) and email address (`albert.attard@oracle.com`). Please don’t forget to update these with your details."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "8937c109-9be1-4ed8-8eff-fbc60e1656c7",
      "commands": [
        "MESSAGE='Create project'",
        "git init --initial-branch main",
        "git config user.name 'Albert Attard'",
        "git config user.email 'albert.attard@oracle.com'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'This project contains the catalogue components found in the demo-application, which were simply copied here. Later on these will be removed from the demo-application and this project will be added as a dependency.' \\",
        "  --message 'This is the third of four steps involved in refactoring the modular single project monolith into modular multi-project monolith.'",
        "git tag --annotate 'v1.0' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Heading",
      "id": "a5a1f12a-54ca-4294-9519-874e25ead561",
      "level": "H4",
      "title": "Step 4: Refactor the existing application to use the new catalogue project (_shrink_)"
    },
    {
      "type": "Markdown",
      "id": "49f5ec09-f7ee-4369-9912-5cb1b496deac",
      "contents": [
        "Now let’s turn our attention back to the existing application (`demo-application`). The existing application still has its own copy of the catalogue classes. But before we can remove these class, we must import the newly extracted `demo-application-catalogue` project as a dependency into the existing application."
      ]
    },
    {
      "type": "Markdown",
      "id": "3eced7de-f7b9-4cf3-9512-8b7221de8cbb",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "9ec08025-c579-41eb-b8a7-55caba6d092f",
      "commands": [
        "git tag --annotate 'v7.0' --message 'Before extracting the catalogue component'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "aa7245e7-2731-4c47-b21e-4eb2b1bb9b1b",
      "contents": [
        "The catalogue project is now available in our local Maven repository (`~/.m2`). This means that other (local) projects can refer to this dependency.",
        "",
        "Update the main project and add the catalogue project as a dependency."
      ]
    },
    {
      "type": "Command",
      "id": "216ead37-6829-43f1-9b41-738dd759f739",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml",
        "+++ b/pom.xml",
        "@@ -28,6 +28,13 @@",
        "             <version>0.0.1-SNAPSHOT</version>",
        "         </dependency>",
        " ",
        "+        <!-- Catalogue -->",
        "+        <dependency>",
        "+            <groupId>demo</groupId>",
        "+            <artifactId>demo-application-catalogue</artifactId>",
        "+            <version>0.0.1-SNAPSHOT</version>",
        "+        </dependency>",
        "+",
        "         <!-- Web -->",
        "         <dependency>",
        "             <groupId>org.springframework.boot</groupId>",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "b1321a29-e663-42cf-a5b9-9e82e8cc5570",
      "contents": [
        "The `demo-application`’s `pom.xml` file now should have a new dependency."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "6f1b26dd-751c-471f-ae4b-fade02a1a296",
      "path": "./demo-application/pom.xml",
      "from_line": 23,
      "number_of_lines": 14
    },
    {
      "type": "Markdown",
      "id": "cbac85c3-6100-4985-b8e1-d72ee029191a",
      "contents": [
        "Remove the `demo.catalogue` package as all its files from both the main and test sources. The project will get these classes from newly added dependency (`demo-application-catalogue`)."
      ]
    },
    {
      "type": "Command",
      "id": "b20e0930-7509-4724-8731-86cbe599516d",
      "commands": [
        "rm -rf './src/main/java/demo/catalogue'",
        "rm -rf './src/test/java/demo/catalogue'"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "37002cb7-055b-4ce4-a397-3fc9662cbbf1",
      "contents": [
        "The `demo-application` should not have any source code related to the catalogue application anymore."
      ]
    },
    {
      "type": "Command",
      "id": "23d7dc49-5823-4445-84c8-e55f9a4c0f63",
      "commands": [
        "tree './src'"
      ],
      "output": {
        "caption": "The `demo-application` source directory"
      },
      "tags": [
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "3a57950c-9959-4f1c-a5f2-f7cbf7a6f09b",
      "contents": [
        "Build the project once more to verify that everything is still working as expected."
      ]
    },
    {
      "type": "Command",
      "id": "4c84a133-96e1-4038-a6d7-26c21e762f8d",
      "commands": [
        "./mvnw clean verify"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "8917ee7f-5d53-4257-915d-67517361252c",
      "contents": [
        "Try the application now that the catalogue is extracted into a separate project."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "4b2acaa6-1117-4983-9ce8-2dc9792fa6bd",
      "commands": [
        "# Start the application in the background",
        "java -jar './demo/demo-application-0.0.1-SNAPSHOT.jar' > './demo/output.txt' 2>&1 &",
        "",
        "# Wait for the application to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:8080/cart/1')\" -ne '200' ]; do echo 'Waiting for the application to start'; sleep 1; done"
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "5f575db2-b340-4964-94c4-0c5c7dd8e6e1",
      "contents": [
        "This starts our application in the background and waits for it to start.",
        "",
        "Make a few requests to the catalogue items endpoint. We have the following catalogue items in the database.",
        "",
        "| `id` | `caption`     | `description`                                                         |",
        "| ---: | ------------- | --------------------------------------------------------------------- |",
        "|    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "|    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "|    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "|    4 | Mug           | The ideal way to start the day                                        |",
        "|    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "27350305-c67b-4f5a-99a6-b370a7517bf9",
      "commands": [
        "curl --silent 'http://localhost:8080/catalogue/item/1' | jq"
      ],
      "output": {
        "caption": "The catalogue item with id `1`",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "a3b50651-8e16-4f8a-b247-38d620ed3e03",
      "contents": [
        "The database has three carts, as shown in the following tables.",
        "",
        "| `cart_id` | `item_id` | `caption`     | `quantity` |",
        "| --------: | --------: | ------------- | ---------: |",
        "|         1 |         1 | Leather Sofa  |          1 |",
        "|         1 |         5 | LED TV        |          1 |",
        "|         2 |         2 | Wooden Table  |          1 |",
        "|         2 |         3 | Plastic Chair |          6 |",
        "|         3 |         4 | Mug           |          4 |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "273719d6-ccf4-4f9d-a44f-1d04d2778b68",
      "commands": [
        "curl --silent 'http://localhost:8080/cart/1' | jq"
      ],
      "output": {
        "caption": "The cart with id `1` and its items",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "9f67ac8c-c656-4328-82af-86b093a75730",
      "contents": [
        "Stop the application once ready."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "542e5a6f-bd0f-415b-8fee-184190efa0c5",
      "commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "aba23bca-2188-4e33-8bc7-33ac0bb260a0",
      "contents": [
        "Commit these changes so that you can always revert back to this point."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "c422f44d-a14c-4762-ae2b-ce67369cbf3e",
      "commands": [
        "MESSAGE='Extract catalogue component'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'The catalogue component is moved from this project to the demo-application-catalogue project and added a dependency.' \\",
        "  --message 'This is the third of four steps involved in refactoring the modular single project monolith into modular multi-project monolith.'",
        "git tag --annotate 'v7.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "54c4d8cf-ca2e-40ec-bdd4-358f36a2dc02",
      "contents": [
        "All works as expected. Note how we are refactoring things one step at a time. Some teams resort to big re-writes instead of taking the time to understand the application, the users using it and refactoring it one small step at a time. We have the luxury to take this approach because we have tests that ensure the application is correct. If we forget anything, or cause a bug, the test will most likely pick it up.",
        "",
        "> **What makes you so sure that the tests are working as expected?**",
        ">",
        "> That is a great question. When working in general, I like to make tests fail on purpose to make sure that the tests are actually running and doing what is expected. I used to take this to another extreme where I pushed these failing tests to production to make sure that the CI/CD pipeline was working as expected.",
        ">",
        "> There are other tools that can help with that, such as test coverage and mutation testing. These tools help identify areas in the code that are not covered by tests and pinpoint our exposure.",
        ">",
        "> Finally testing something does not make it bug free. Thus, we cannot be sure that the code, despite being well tested, is bug free. A test simply asserts whether a given bug (problem) exists, but it does not assert whether the bug (problem) does not exist.",
        "",
        "The cart is still part of the main application and this too needs to be extracted. that’s the topic of the next section."
      ]
    },
    {
      "type": "Heading",
      "id": "c9a59e5d-1f72-4e3b-aa86-562ce63f8dc7",
      "level": "H3",
      "title": "Extract the cart component"
    },
    {
      "type": "Markdown",
      "id": "fabb16b2-dce8-4a7e-8da3-4b95b4e53dd0",
      "contents": [
        "The last component to be extracted is the cart component.",
        "",
        "![Extracting the cart into independent project](./assets/images/Extracting%20the%20cart%20into%20independent%20project.png)",
        "",
        "In this refactoring we will cover the following steps",
        "",
        "1. Copy the existing application project (_grow_).",
        "2. Remove the code that is not related to the cart project (_start shrinking_).",
        "3. Build the new project and verify that it works as expected.",
        "4. Refactor the existing application to use the new cart project (_shrink_).",
        "",
        "At the end we will end up with five projects that are built independently and deployed as a single monolithic application. Kindly note that while we have five projects, this is still deployed as a monolithic application.",
        "",
        "Copy the project and remove the unnecessary files."
      ]
    },
    {
      "type": "Heading",
      "id": "9b89488e-5ce4-4226-a540-fbd2c56d898e",
      "level": "H4",
      "title": "Step 1: Copy the existing application project (_grow_)"
    },
    {
      "type": "Markdown",
      "id": "cdde44c2-e5dc-4bc3-8b63-1ffa655d812f",
      "contents": [
        "Copy the project."
      ]
    },
    {
      "type": "Command",
      "id": "1955aa98-488a-459f-9138-df604105b995",
      "commands": [
        "rm -rf './demo-application-cart'",
        "cp -R './demo-application' './demo-application-cart'"
      ]
    },
    {
      "type": "Markdown",
      "id": "71ff8cc2-047c-4b60-aba4-ffc51b2b79ab",
      "contents": [
        "We can do this blindfolded by now!"
      ]
    },
    {
      "type": "Heading",
      "id": "50fdfb6f-e0e9-44d4-964e-77bbaa31c0a1",
      "level": "H4",
      "title": "Step 2: Remove the code that is not related to the cart project (_start shrinking_)"
    },
    {
      "type": "Markdown",
      "id": "c4e45432-3470-4a57-9e94-432e046a53e5",
      "contents": [
        "Remove the code that is not necessary by the cart project. At this stage there is not much left to remove, given that this is the last component that will be extracted."
      ]
    },
    {
      "type": "Command",
      "id": "cef05de4-c590-4014-aca9-9d2a9e5dc997",
      "commands": [
        "rm -rf './demo-application-cart/.git'",
        "rm -rf './demo-application-cart/src/main/resources'",
        "rm -rf './demo-application-cart/target'"
      ]
    },
    {
      "type": "Markdown",
      "id": "77954dad-3f9a-4aa3-b15f-d7c90b6a37d6",
      "contents": [
        "Similar to the catalogue project, this project does not need to have a main class, but the tests make use of `@SpringBootTest` annotation. This means that we have to provide a spring configuration to the test, otherwise it will not work. We simply copy the main class to the test directory as we did with the catalogue project.",
        "",
        "Move the main class to the test sources."
      ]
    },
    {
      "type": "Command",
      "id": "3cc61500-33ec-473c-b3a6-c4cb70864891",
      "commands": [
        "mv './src/main/java/demo/Main.java' './src/test/java/demo/Main.java'"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "73e06e6f-f8f1-42c4-837b-493e11a94a74",
      "contents": [
        "Change the artefact id and remove the Spring Boot Maven Plugin. Given that this is not the main application, but it will be just a dependency, we don’t need the Spring Boot Maven Plugin anymore."
      ]
    },
    {
      "type": "Command",
      "id": "17b8b27e-4471-417d-81b8-9d8263b1d71c",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml",
        "+++ b/pom.xml",
        "@@ -11,10 +11,10 @@",
        "     </parent>",
        " ",
        "     <groupId>demo</groupId>",
        "-    <artifactId>demo-application</artifactId>",
        "+    <artifactId>demo-application-cart</artifactId>",
        "     <version>0.0.1-SNAPSHOT</version>",
        "-    <name>Demo Application</name>",
        "-    <description>A simple application used to demonstrate different architecture styles</description>",
        "+    <name>Cart</name>",
        "+    <description>Contains all code related to the cart component</description>",
        " ",
        "     <properties>",
        "         <java.version>21</java.version>",
        "@@ -59,13 +59,4 @@",
        "             <scope>test</scope>",
        "         </dependency>",
        "     </dependencies>",
        "-",
        "-    <build>",
        "-        <plugins>",
        "-            <plugin>",
        "-                <groupId>org.springframework.boot</groupId>",
        "-                <artifactId>spring-boot-maven-plugin</artifactId>",
        "-            </plugin>",
        "-        </plugins>",
        "-    </build>",
        " </project>",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "22e86ce9-d96a-4971-a6af-b7162abaf943",
      "contents": [
        "The `pom.xml` file of the new cart project should look like the following."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "2e2d35e6-75d7-4b47-94f0-20719d7c25f6",
      "path": "./demo-application-cart/pom.xml"
    },
    {
      "type": "Markdown",
      "id": "29795f90-1ebd-4793-b4a0-e6628e2e3a65",
      "contents": [
        "All changes are done and the project should now have the following structure."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "160caa31-b525-4ba7-971f-f7598f52bfb6",
      "commands": [
        "tree '.'"
      ],
      "output": {
        "caption": "Cart project structure."
      },
      "tags": [
        "optional"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Heading",
      "id": "7fe49142-f64c-4607-b808-5090c4f320af",
      "level": "H4",
      "title": "Step 3: Build the new project and verify that it works as expected"
    },
    {
      "type": "Markdown",
      "id": "143de92e-fb80-47ab-bf42-7b5d5b2041da",
      "contents": [
        "Build the extracted cart project and install (save) it in the local Maven repository (`~/.m2`) for the other projects to find it."
      ]
    },
    {
      "type": "Command",
      "id": "c38ba879-da1a-4c73-9b1c-22a68663252f",
      "commands": [
        "./mvnw clean install"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "949d0b39-7831-4b88-bad5-42632ce2132f",
      "contents": [
        "The project’s JAR file will be saved in the local Maven repository (`~/.m2/repository/demo/demo-application-cart`)."
      ]
    },
    {
      "type": "Command",
      "id": "4f7e0ea9-8e67-456c-8377-de43ca08303c",
      "commands": [
        "tree \"${HOME}/.m2/repository/demo/demo-application-cart\""
      ],
      "output": {
        "caption": "The cart project artefacts in the Maven local repository."
      },
      "tags": [
        "optional"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "dfdc13e9-77ac-4020-8c51-d17be06b9bc2",
      "contents": [
        "Commit these changes so that you can always revert back to this point.",
        "",
        "The following example uses my name (`Albert Attard`) and email address (`albert.attard@oracle.com`). Please don’t forget to update these with your details."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "01d7aea4-eb53-4866-9eaa-02386b93b467",
      "commands": [
        "MESSAGE='Create project'",
        "git init --initial-branch main",
        "git config user.name 'Albert Attard'",
        "git config user.email 'albert.attard@oracle.com'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'This project contains the cart components found in the demo-application, which were simply copied here. Later on these will be removed from the demo-application and this project will be added as a dependency.' \\",
        "  --message 'This is the last of four steps involved in refactoring the modular single project monolith into modular multi-project monolith.'",
        "git tag --annotate 'v1.0' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Heading",
      "id": "e56cfa4c-61cf-463a-aef0-d035be315277",
      "level": "H4",
      "title": "Step 4: Refactor the existing application to use the new cart project (_shrink_)"
    },
    {
      "type": "Markdown",
      "id": "ff13e7de-3955-4f35-98a1-284da30f18ea",
      "contents": [
        "Now let’s turn our attention back to the existing application (`demo-application`). The existing application still has its own copy of the cart classes. But before we can remove these class, we must import the newly extracted `demo-application-cart` project as a dependency into the existing application."
      ]
    },
    {
      "type": "Markdown",
      "id": "d958c027-7a47-4392-a1ed-54bc6ae7be6a",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "69037f77-2d68-45b9-9f6d-2c1926d601d6",
      "commands": [
        "git tag --annotate 'v8.0' --message 'Before extracting the cart component'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "5c10501d-5f08-41cc-bc4a-8a0611746fcb",
      "contents": [
        "The cart project is now available in our local Maven repository (`~/.m2`). This means that other (local) projects can refer to this dependency.",
        "",
        "Update the main project and add the cart project as a dependency."
      ]
    },
    {
      "type": "Command",
      "id": "b4d03a48-525b-4f3b-9443-4d0bb3368364",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml",
        "+++ b/pom.xml",
        "@@ -21,13 +21,6 @@",
        "     </properties>",
        " ",
        "     <dependencies>",
        "-        <!-- Common -->",
        "-        <dependency>",
        "-            <groupId>demo</groupId>",
        "-            <artifactId>demo-application-common</artifactId>",
        "-            <version>0.0.1-SNAPSHOT</version>",
        "-        </dependency>",
        "-",
        "         <!-- Catalogue -->",
        "         <dependency>",
        "             <groupId>demo</groupId>",
        "@@ -35,29 +28,12 @@",
        "             <version>0.0.1-SNAPSHOT</version>",
        "         </dependency>",
        " ",
        "-        <!-- Web -->",
        "-        <dependency>",
        "-            <groupId>org.springframework.boot</groupId>",
        "-            <artifactId>spring-boot-starter-web</artifactId>",
        "-        </dependency>",
        "-",
        "-        <!-- Database -->",
        "+        <!-- Cart -->",
        "         <dependency>",
        "             <groupId>demo</groupId>",
        "-            <artifactId>demo-application-db-migration</artifactId>",
        "+            <artifactId>demo-application-cart</artifactId>",
        "             <version>0.0.1-SNAPSHOT</version>",
        "         </dependency>",
        "-        <dependency>",
        "-            <groupId>org.springframework.boot</groupId>",
        "-            <artifactId>spring-boot-starter-data-jpa</artifactId>",
        "-        </dependency>",
        "-",
        "-        <!-- Testing -->",
        "-        <dependency>",
        "-            <groupId>org.springframework.boot</groupId>",
        "-            <artifactId>spring-boot-starter-test</artifactId>",
        "-            <scope>test</scope>",
        "-        </dependency>",
        "     </dependencies>",
        " ",
        "     <build>",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "a725476b-6703-434e-be3b-ae9b5befbd3d",
      "contents": [
        "The `demo-application`’s `pom.xml` file now should have a new dependency."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "ff6576a4-6b77-475f-9913-9b3280b1b1b0",
      "path": "./demo-application/pom.xml",
      "from_line": 23,
      "number_of_lines": 15
    },
    {
      "type": "Markdown",
      "id": "6333716b-1503-4c7e-81b3-b8196575e1d2",
      "contents": [
        "> **Why did we remove all other dependencies, including Spring?**",
        ">",
        "> This can feel strange, given that our application is still a Spring Boot application. But given that both catalogue and cart import the Spring Framework, there is no need to have it here as well.",
        ">",
        "> Note that we kept the Spring Boot Maven plugin as part of the main application, as this will be used to pull everything together and create the application JAR file that will contain everything in it.",
        "",
        "Remove the `demo.cart` package as all its files from both the main and test sources. The project will get these classes from newly added dependency (`demo-application-cart`)."
      ]
    },
    {
      "type": "Command",
      "id": "0135dea5-2cfc-4421-a579-3d00fc889721",
      "commands": [
        "rm -rf './src/main/java/demo/cart'",
        "rm -rf './src/test'"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "93fcce86-1b1f-4bc6-9be6-a0cfbe6fb246",
      "contents": [
        "The `demo-application` should not have any source code related to the cart application anymore."
      ]
    },
    {
      "type": "Command",
      "id": "bbc2bb3c-c5ea-43f1-b9bd-4b074ebef7f6",
      "commands": [
        "tree './src'"
      ],
      "output": {
        "caption": "The (almost empty) `demo-application` source directory"
      },
      "tags": [
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "61c33961-1c97-491a-81ab-2b41f7322e48",
      "contents": [
        "Build the project once more to verify that everything is still working as expected."
      ]
    },
    {
      "type": "Command",
      "id": "7aa2ceff-8d76-4910-9f94-102880880735",
      "commands": [
        "./mvnw clean verify"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "a5ddb051-6766-4f34-b5c7-ed4b43887a6b",
      "contents": [
        "Try the application now that all four components are extracted into separate projects."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "5c5583c0-3a9e-4bb9-9dfb-9d3176dff4f4",
      "commands": [
        "# Start the application in the background",
        "java -jar './demo/demo-application-0.0.1-SNAPSHOT.jar' > './demo/output.txt' 2>&1 &",
        "",
        "# Wait for the application to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:8080/cart/1')\" -ne '200' ]; do echo 'Waiting for the application to start'; sleep 1; done"
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "99711363-6002-4dc5-9a68-4282a6731cc5",
      "contents": [
        "This starts our application in the background and waits for it to start.",
        "",
        "Make a few requests to the catalogue items endpoint. We have the following catalogue items in the database.",
        "",
        "| `id` | `caption`     | `description`                                                         |",
        "| ---: | ------------- | --------------------------------------------------------------------- |",
        "|    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "|    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "|    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "|    4 | Mug           | The ideal way to start the day                                        |",
        "|    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "f77ec6af-0b7f-4068-88b9-b91b01630d70",
      "commands": [
        "curl --silent 'http://localhost:8080/catalogue/item/1' | jq"
      ],
      "output": {
        "caption": "The catalogue item with id `1`",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "615661e5-5125-4512-87c6-7213ca70383e",
      "contents": [
        "The database has three carts, as shown in the following tables.",
        "",
        "| `cart_id` | `item_id` | `caption`     | `quantity` |",
        "| --------: | --------: | ------------- | ---------: |",
        "|         1 |         1 | Leather Sofa  |          1 |",
        "|         1 |         5 | LED TV        |          1 |",
        "|         2 |         2 | Wooden Table  |          1 |",
        "|         2 |         3 | Plastic Chair |          6 |",
        "|         3 |         4 | Mug           |          4 |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "fe9044a8-dec1-4dbc-9def-2c64476e8c22",
      "commands": [
        "curl --silent 'http://localhost:8080/cart/1' | jq"
      ],
      "output": {
        "caption": "The cart with id `1` and its items",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "dc7f719b-8c65-4f49-b088-c6b06073985b",
      "contents": [
        "Stop the application once ready."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "9f200426-331f-40f1-9af4-44230f6ebd4e",
      "commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "215db515-a10c-4260-a85f-276406bbcb4f",
      "contents": [
        "Commit these changes so that you can always revert back to this point."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "17aa194d-12b7-46e4-bd4a-0d8ba8f13376",
      "commands": [
        "MESSAGE='Extract cart component'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'The cart component is moved from this project to the demo-application-cart project and added a dependency.' \\",
        "  --message 'This is the last of four steps involved in refactoring the modular single project monolith into modular multi-project monolith.'",
        "git tag --annotate 'v8.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "46b8ae33-83eb-442e-aa76-c1094ab4edd6",
      "contents": [
        "All works as expected. We were able to take our single project layered monolithic application, organise it into a modular monolith and finally split it into smaller projects. As you may have noticed, each step is bringing us closer to transforming the application from a monolith application to a distributed architecture, which is the topic of the next section."
      ]
    },
    {
      "type": "Heading",
      "id": "d49a2d0b-8b54-4d1b-9834-e79e39396a18",
      "level": "H3",
      "title": "Split the Application into Multiple Projects tradeoffs"
    },
    {
      "type": "Markdown",
      "id": "eabd34f3-cfb2-459f-9347-91e10621c44d",
      "contents": [
        "This refactoring degrades the score as this is a simple application and I don’t believe that it should be split into multiple projects. I have reduced the score for all questions by 1 as this new organisation adds unnecessarily complexity. This should not come to a surprise as I have already expressed my recommendation in keeping the application as one project.",
        "",
        "| Question                                                                                    | Multi Project Layered Monolith | Modular Monolith | Layered Monolith |",
        "| ------------------------------------------------------------------------------------------- | -----------------------------: | ---------------: | ---------------: |",
        "| Would you recommend this project to others?                                                 |                        **4 ↓** |                5 |                5 |",
        "| How easy is it to make changes to the application?                                          |                        **4 ↓** |                5 |                4 |",
        "| How safe do you feel in making changes to the application and deploying them to production? |                        **3 ↓** |                4 |                4 |",
        "| How easy is it to deploy changes to production?                                             |                        **4 ↓** |                5 |                5 |",
        "",
        "With that being said, a realistic ecommerce website will be larger and involve larger teams. This kind of split may enable the teams to operate better."
      ]
    },
    {
      "type": "Heading",
      "id": "fbe04c9a-ef79-4cba-b5c0-ebea3f5955b9",
      "level": "H4",
      "title": "All or nothing"
    },
    {
      "type": "Markdown",
      "id": "c2573f96-7336-4e13-96bf-765187def71e",
      "contents": [
        "We have now introduced more moving parts, as listed below",
        "",
        "- `demo-application`",
        "- `demo-application-cart`",
        "- `demo-application-catalogue`",
        "- `demo-application-common`",
        "- `demo-application-db-migration`",
        "",
        "The monolithic application needs to be built and compiled as a whole despite the multiple projects. This requires coordination between all the projects (_components_) which introduces new risks and complexities. Each project has its own repository and its own build pipeline. The artefact (JAR file) produced by each project needs to be saved in a central repository from where the other projects can access it. Once a project is changed, all the components that depend on it must be rebuilt. This adds complexity to the build pipeline.",
        "",
        "That’s why I deducted the score for all questions. This refactoring added complexity without providing any benefits. While this is a small example, many projects tend to get overengineered without gaining anything. Please be mindful of what’s being “paid” in contrast to what’s being “gained”. One of your roles as an architect is to balance the tradeoffs and making sure that you are not paying more than you should."
      ]
    },
    {
      "type": "Heading",
      "id": "de4546d5-a477-4000-8c76-8709d8c937c0",
      "level": "H2",
      "title": "From Monolith to Distributed"
    },
    {
      "type": "Markdown",
      "id": "d34d18a0-185e-480e-9661-30509e3d2d90",
      "contents": [
        "Our current monolithic application has been partitioned by domain and refactored into separate projects and repositories. While each team can work on their application segments independently, all changes are integrated into a single stream to produce a fat JAR file, ensuring the application functions as expected.",
        "",
        "The monolithic architecture has some limitations",
        "",
        "1. **Deploying the whole application**: Even minor changes to one part of the application necessitate redeploying the entire application. This extensive redeployment can introduce new bugs, increasing risk with each update.",
        "2. **Single process**: The entire application runs as a single process. If any component fails, such as through a memory leak, it impacts the whole application. As a countermeasure, teams tend to decrease deployment frequency and slow the introduction of new features.",
        "",
        "An alternative is a distributed architecture where each component operates as an independent service, commonly known as microservices. However, it is crucial to recognize that not all distributed systems qualify as microservices. Simply having several Spring Boot projects does not equate to a microservices architecture.",
        "",
        "> **Should we simply adopt Microservices?**",
        ">",
        "> Distributed systems, while offering several benefits, introduce complexity. By dividing a monolithic application into a distributed system, we trade certain advantages for others. For example, while microservices can address the aforementioned issues, deploying the whole application and single process, they also require sophisticated coordination and can complicate the development process.",
        ">",
        "> In our case, transitioning to a distributed architecture might not be advisable. Our application’s scale and the current effectiveness of a single team suggest that microservices could complicate rather than simplify our operations. Microservices are often more beneficial for managing large-scale applications with large teams, where team size can become a bottleneck. Industry best practices suggest keeping teams smaller than 15 people; beyond this, efficiency tends to decline. Thus, in contexts where teams grow too large, splitting responsibilities into microservices can address both technical scalability and team management challenges.",
        "",
        "In our monolithic architecture, all requests were managed through a single entry point. As we transition to a split architecture with two independent services — one for the cart and one for the catalogue — we introduce two separate points of entry. Consequently, callers must know the specific service endpoint they wish to access, complicating the interaction process.",
        "",
        "![Two separate points of entry](./assets/images/Two%20separate%20points%20of%20entry.png)",
        "",
        "For instance, if the cart service needs to fetch data from the catalogue, it must know the catalogue’s current location. This setup complicates service management, as any change in a service’s location requires updating the endpoints known to all consumers. Such changes necessitate maintaining availability at both the old and new endpoints during the transition, increasing the complexity of rollbacks and potentially causing prolonged use of a faulty service by slower-to-update consumers.",
        "",
        "A practical solution to address these challenges is the implementation of a reverse HTTP/S proxy. A reverse HTTP/S proxy is a web server that receives HTTP/S requests and redirects them to other services. The reverse proxy does not handle the request per se, but it usually adds headers to the requests. This approach routes all traffic through a single proxy server, which then directs requests to the appropriate service backend. The primary advantage is that all consumer interactions are directed to a unified endpoint, simplifying their experience and reducing the need to track individual service locations.",
        "",
        "![Reverse Proxy](./assets/images/Reverse%20Proxy.png)",
        "",
        "When service endpoints change — whether due to updates, relocations, or scaling operations — only the configuration of the reverse proxy needs adjustment. Consumers remain unaffected by these changes, as the proxy abstracts away the backend complexities. Additionally, service providers can often manage these changes through self-service portals that validate and apply updates automatically.",
        "",
        "The role and implementation of reverse proxies will be further discussed in the following section, providing a deeper understanding of how they function as a critical component in modern distributed architectures. This will include considerations for deployment, security, and maintenance to ensure optimal operation and minimal disruption to consumer services."
      ]
    },
    {
      "type": "Heading",
      "id": "a35e80f7-1dd2-442a-8de9-f6f46d4396f9",
      "level": "H3",
      "title": "Reverse Proxy"
    },
    {
      "type": "Markdown",
      "id": "0881cc9d-d47c-4e91-8572-3e9e225e2c36",
      "contents": [
        "A reverse HTTP/S proxy is a type of server that sits in front of web servers and forwards clients’, such as web browsers, requests to those web servers. It acts as an intermediary for requests from clients seeking resources from servers that provide those resources.",
        "",
        "The reverse proxy receives requests from clients and forwards them to the appropriate server. After the server handles the request, the reverse proxy relays the response back to the client. This process is transparent to the user, who interacts with the proxy as if it were the server itself.",
        "",
        "By distributing client requests across multiple servers, a reverse proxy effectively balances the load, ensuring no single server becomes overwhelmed. This improves the responsiveness and reliability of the service.",
        "",
        "Reverse proxies can cache outgoing responses from a server. When a new request comes in for the same resource, the proxy can provide the cached response, significantly reducing the load on the server and speeding up response times.",
        "",
        "A reverse proxy can provide an additional layer of defence by shielding backend servers from direct internet exposure. This setup helps to mitigate security threats.",
        "",
        "It makes it easier to scale web applications by adding, removing, or replacing servers without disrupting the client experience. Configuration changes are made on the proxy, which simplifies backend service management.",
        "",
        "Centralising TLS termination at the reverse proxy (handling HTTPS connections) offloads this task from the backend servers, simplifying TLS management and improving performance.",
        "",
        "Reverse proxies are widely used in various configurations for enhancing performance, security, and reliability of websites and web services. Examples include popular web servers like [Nginx](https://www.nginx.com/) and [Apache](https://httpd.apache.org/), which are often configured as reverse proxies.",
        "",
        "According to [Google Trends](https://trends.google.com/trends/explore?date=today%201-m&q=%2Fm%2F02qft91,Httpd,%2Fm%2F0r4vbb0&hl=en-GB), Nginx is the most popular amongst Apache and [HAProxy](https://www.haproxy.com/). Therefore, we will be using Nginx as our reverse HTTPS proxy. In this example we do not make use of TLS, and thus we will not configure TLS termination.",
        "",
        "We will start by creating a directory where we will put all configuration related to our reverse proxy. The configuration will be versioned controlled like other source code so that we can keep track of changes. This is referred to as [infrastructure as code](https://en.wikipedia.org/wiki/Infrastructure_as_code), where all configuration is version controlled and in some cases its deployment is too automated through as CI/CD pipeline. Unfortunately, we will not take it as far in this workshop."
      ]
    },
    {
      "type": "Command",
      "id": "28cb5ce2-1abd-4ae6-93b1-eed6f439c008",
      "commands": [
        "rm -rf './demo-application-reverse-proxy'",
        "mkdir './demo-application-reverse-proxy'"
      ]
    },
    {
      "type": "Markdown",
      "id": "50d36b2e-e9d6-4283-a239-fce65c15c7e0",
      "contents": [
        "All requests to our application are handled by either the cart controller or the catalogue controller. The reverse proxy can be already configured to redirect traffic to `/cart` to the cart and `/catalogue` to the catalogue, as shown in the following table.",
        "",
        "| Path        | Endpoint                         |",
        "| ----------- | -------------------------------- |",
        "| `/cart`     | `http://ADDRESS:PORT/cart`       |",
        "| `/catalogue`| `http://ADDRESS:PORT/catalogue`  |",
        "",
        "For this demo, we will run the reverse proxy as a container while the services will be running on the host machine, accessible through `host.docker.internal`.",
        "",
        "| Path         | Endpoint                                     |",
        "| ------------ | -------------------------------------------- |",
        "| `/cart`      | `http://host.docker.internal:8080/cart`      |",
        "| `/catalogue` | `http://host.docker.internal:8080/catalogue` |",
        "",
        "> **Why cannot we simply pass all requests to the application?**",
        ">",
        "> Yes, our application is currently a monolithic application and all requests are handled by it. We can achieve the same thing by simply redirecting all the traffic to the application. In fact that’s a common practice when refactoring larger applications. We only carve out the traffic the paths that will be extracted on step at a time.",
        ">",
        "> Given the size of this application, I have decided to split all traffic from the get go. Again, this is not the only way to do it and as mentioned before, we can add new redirections one step at a time.",
        ">",
        "> In our case, this is the simplest approach as once the catalogue and cart projects are extracted into standalone services (microservices), then we simply update their respective paths.",
        "",
        "Let us start by creating the Nginx configuration."
      ]
    },
    {
      "type": "Command",
      "id": "0157135b-8205-4413-8eb3-f8b2672f7bef",
      "commands": [
        "cat << EOF > './default.conf'",
        "server {",
        "    listen       80;",
        "    listen  [::]:80;",
        "",
        "    location /cart {",
        "        proxy_pass http://host.docker.internal:8080/cart;",
        "        proxy_set_header Host \\$host;",
        "        proxy_set_header X-Real-IP \\$remote_addr;",
        "        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;",
        "        proxy_set_header X-Forwarded-Proto \\$scheme;",
        "    }",
        "",
        "    location /catalogue {",
        "        proxy_pass http://host.docker.internal:8080/catalogue;",
        "        proxy_set_header Host \\$host;",
        "        proxy_set_header X-Real-IP \\$remote_addr;",
        "        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;",
        "        proxy_set_header X-Forwarded-Proto \\$scheme;",
        "    }",
        "}",
        "EOF"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "e4156557-0202-41ae-9ab6-c55023884ddf",
      "contents": [
        "Two locations were added that for now point to the monolithic application",
        "",
        "We will be running this as a container in our local host. Create the `Dockerfile` that pulls the [current latest version (`1.26.0`) of Nginx](https://hub.docker.com/_/nginx/tags) and copies the configuration.",
        "",
        "> **Why not use the `latest` tag?**",
        ">",
        "> The `latest` tag is very convenient as we don’t have to keep track of the current latest version. But it also breaks the reproducibility concept. By using the specific version, we ensure that this version of Nginx is used no matter when this container image is built. When we decide to move to a newer version, we do this intentionally by changing the version number in the code.",
        ">",
        "> When we build (or compile) our code, or a container image, we only expect things to change when we actually change the code. Compiling the same class twice should produce the same output. The same principle should apply to container images. When using the `latest` tag, we may obtain a different container just because the `latest` tag now points to a new version.",
        ">",
        "> Say that a newer version of Nginx is incompatible with our existing configuration. Using the `latest` tag, we will pull the current latest version which is incompatible with our configuration, and thus it will not work as expected. Our application will not work as expected despite the fact that we didn’t change the code.",
        ">",
        "> Do not use or rely on the `latest` tag as this breaks reproducibility.",
        "",
        "> **Do container repositories guarantee reproducibility?**",
        ">",
        "> Any tag can be overwritten, therefore no.",
        ">",
        "> Say we create a container image and we tag it with version `1.23`. We can make some changes to our container image and tag the new version with `1.23`, thus overwriting the previous version.",
        ">",
        "> Needless to say that this is a dangerous practice and one should do so cautiously. Public images, such as Nginx, should avoid such practices as these break reproducibility.",
        ">",
        "> While it may be harmless locally, overwriting a tag of a container image that is published and shared with others breaks reproducibility.",
        "",
        "> **Should we use the `latest` tag?**",
        ">",
        "> Short answer, better not.",
        ">",
        "> The `latest` tag is very convenient especially when building something quickly. Docker defaults to the `latest` tag when no tag is provided. But despite its convenience, it is still discouraged.",
        ">",
        "> Container engines, such as [Kubernetes](https://kubernetes.io/), are able to revert to a previous container if the new one does not work. They provide a convenient fallback mechanism. Say we change our service and tag this with `latest`. Kubernetes will notice a change in the container repository and pull the latest version. All works fine until we introduce a bug that prevents the new version of the application to start.",
        ">",
        "> When the new container image fails to start, Kubernetes will try to fall back by pulling the previous version. Given that we use the same tag for all versions, that is `latest`, Kubernetes pulls the currently broken container image and tries again. As you imagine, it will enter an endless loop and our application will fail to start compromising availability.",
        ">",
        "> In tightly coupled distributed applications, such a case may hinder the whole application as the other services may start failing too."
      ]
    },
    {
      "type": "Command",
      "id": "d585d7ea-6ee3-4439-bcf9-ac3fee3b14e1",
      "commands": [
        "cat << EOF > './Dockerfile'",
        "FROM nginx:1.26.0",
        "",
        "# Configure Nginx reverse proxy",
        "COPY './default.conf' '/etc/nginx/conf.d/'",
        "EOF"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "b9cb198f-b7e9-4209-a537-d38ae69fd9da",
      "contents": [
        "Build, tag, and load the container image.",
        "",
        "Note that we are tagging our custom image (`demo-application-reverse-proxy`) with `v1` and not the `latest`, even in the development environment."
      ]
    },
    {
      "type": "Command",
      "id": "1290f311-3f1c-444d-b7e0-3b1d5e80790c",
      "commands": [
        "docker build \\",
        "  --file 'Dockerfile' \\",
        "  --tag 'demo-application-reverse-proxy:v1' \\",
        "  --load \\",
        "."
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "31641ca8-d95e-4407-bc53-9416f79c5372",
      "contents": [
        "Run the container image and wait for it to start. Note that application is not running yet, thus all requests to the reverse proxy will return a [`404`](https://en.wikipedia.org/wiki/HTTP_404).",
        "",
        "The container publishes port `80`. This means that the reverse proxy will be listening to port `80` and we will be accessing our application through port `80` as well. Our application will be listening on port `8080`, and the reverse proxy will be forwarding the request to that port.",
        "",
        "In the previous examples, we accessed our application through port `8080`, (such as `http://localhost:**8080**/catalogue/item/1`). This will now change to port `80` (such as `http://localhost/catalogue/item/1`, without the port `8080`)."
      ]
    },
    {
      "type": "Command",
      "id": "8a1bbe65-a171-41c0-ae72-5a0984a5750c",
      "commands": [
        "docker run \\",
        "  --rm \\",
        "  --detach \\",
        "  --name 'demo-application-reverse-proxy' \\",
        "  --publish 80:80 \\",
        "  'demo-application-reverse-proxy:v1'",
        "",
        "# Wait for Nginx to start",
        "# The reverse proxy is configured to only redirect to the cart and catalogue endpoints, thus any other requests will yield a 404",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost/')\" -ne '404' ]; do echo 'Waiting for the reverse proxy to start'; sleep 1; done"
      ],
      "on_failure_commands": [
        "docker cp demo-application-reverse-proxy:/etc/nginx/conf.d/default.conf ./default-error.conf",
        "docker stop demo-application-reverse-proxy"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "4213c0b4-fdfd-450c-9083-70748125ce67",
      "contents": [
        "Run and try the reverse proxy. Please remember that it will return a `404` given that our application is not yet running. All we want at this point is to try the reverse proxy."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "651a80ae-6d03-44aa-bae7-54c47cc75dbe",
      "commands": [
        "curl --silent 'http://localhost/'"
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "docker stop demo-application-reverse-proxy"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "72e52d2c-3ff7-4da6-8b00-966ebb54cd40",
      "contents": [
        "With the reverse proxy running, let’s start the application. The order in which these are started is not important. We started the reverse proxy first as we wanted to make sure that the configuration was valid.",
        "",
        "As mentioned before, we will now be accessing the application from behind the proxy, which is listening on port `80`. Therefore, we don’t need to specify the port `8080` anymore."
      ]
    },
    {
      "type": "Markdown",
      "id": "68a494ec-8480-44a9-91c4-11886d37a65b",
      "contents": [
        "Try the monolithic application behind the reverse proxy"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "1444b925-664c-49fa-93f1-31b2a2b35926",
      "commands": [
        "# Start the application in the background",
        "java -jar './demo/demo-application-0.0.1-SNAPSHOT.jar' > './demo/output.txt' 2>&1 &",
        "",
        "# Wait for the application to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost/cart/1')\" -ne '200' ]; do echo 'Waiting for the application to start'; sleep 1; done"
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "0fef4e77-f85e-4807-a682-84344d9aca96",
      "contents": [
        "This starts our application in the background and waits for it to start.",
        "",
        "Make a few requests to the catalogue items endpoint. We have the following catalogue items in the database.",
        "",
        "| `id` | `caption`     | `description`                                                         |",
        "| ---: | ------------- | --------------------------------------------------------------------- |",
        "|    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "|    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "|    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "|    4 | Mug           | The ideal way to start the day                                        |",
        "|    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "18825876-5830-4f57-9f45-19e01153077f",
      "commands": [
        "curl --silent 'http://localhost/catalogue/item/2' | jq"
      ],
      "output": {
        "caption": "The catalogue item with id `2`",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "9d1c19f1-c44c-48e0-a61f-e156ba322067",
      "contents": [
        "The database has three carts, as shown in the following tables.",
        "",
        "| `cart_id` | `item_id` | `caption`     | `quantity` |",
        "| --------: | --------: | ------------- | ---------: |",
        "|         1 |         1 | Leather Sofa  |          1 |",
        "|         1 |         5 | LED TV        |          1 |",
        "|         2 |         2 | Wooden Table  |          1 |",
        "|         2 |         3 | Plastic Chair |          6 |",
        "|         3 |         4 | Mug           |          4 |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "0102f386-4779-4cf3-af5c-1d3edb0b793c",
      "commands": [
        "curl --silent 'http://localhost/cart/3' | jq"
      ],
      "output": {
        "caption": "The cart with id `3` and its items",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "57919403-0fbb-4987-8ac7-f5f21e8ba80d",
      "contents": [
        "Stop the application once ready."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "da4fb9fa-4018-4f77-8bfe-57a15cf6dbee",
      "commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "5c78975c-a918-42e9-8356-fea270b63633",
      "contents": [
        "The only thing that changed from the previous runs is that now we are accessing the application through the reverse proxy which is listening on port `80`.",
        "",
        "Everything worked as expected. We can now stop the reverse proxy container."
      ]
    },
    {
      "type": "Command",
      "id": "bdda450a-4709-465f-8b38-045905c7c969",
      "commands": [
        "docker stop demo-application-reverse-proxy"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "3e314dba-f9ec-41da-866c-ef81ad99643b",
      "contents": [
        "Commit these changes so that you can always revert back to this point.",
        "",
        "The following example uses my name (`Albert Attard`) and email address (`albert.attard@oracle.com`). Please don’t forget to update these with your details."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "5b548aa5-9553-4306-b5df-63453365f966",
      "commands": [
        "CAT << EOF > '.gitignore'",
        "target/",
        "",
        "### Ignore the SW commands scripts as these are temporary files that do not need to be version controlled ###",
        ".sw-commands-*.sh",
        "EOF",
        "",
        "MESSAGE='Create project'",
        "git init --initial-branch main",
        "git config user.name 'Albert Attard'",
        "git config user.email 'albert.attard@oracle.com'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'Create the reverse proxy configuration pointing both the catalogue and cart requests to the monolith.'",
        "git tag --annotate 'v1.0' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Heading",
      "id": "f3fc0db4-eb2d-49b4-b6fb-c7ef33e229a1",
      "level": "H3",
      "title": "Disconnect catalogue from cart"
    },
    {
      "type": "Markdown",
      "id": "dfab93d8-99ee-447a-8b41-03656da1aeff",
      "contents": [
        "The cart depends on the catalogue to get the items details, as shown in the following diagram.",
        "",
        "![Read cart details through JPA](./assets/images/Read%20cart%20details%20through%20JPA.png)",
        "",
        "1. When a user makes a request, such as `GET /cart/{ID}`,",
        "2. the Spring Web Frameworks gets this requests and finds the right controller to handle it.",
        "3. The `CartController` search for the cart through the `CartService`, which in turn uses the `CartRepository`.\\",
        "   The `CartEntity` has a list of `CartItemEntity`, which in turn is linked to `CatalogueItemEntity`. Spring JPA fetches all this information for us, automatically.",
        "",
        "This information still needs to flow from catalogue to cart, and we need to keep the data flowing before we split the monolithic application into independent services. The catalogue service already exposes the information the cart needs through a REST API. The cart service can start by fetching this data through the exposed REST API.",
        "",
        "![Read cart details through REST](./assets/images/Read%20cart%20details%20through%20REST.png)",
        "",
        "After the `CartService` fetches the `CartEntity` using the `CartRepository`, it",
        "",
        "1. makes a REST request to the `CatalogueItemController`",
        "2. The `CatalogueItemController` fetches the `CatalogueItemEntity` through the `CatalogueItemService` and `CatalogueItemRepository` and return this to the caller (the `CartService`).",
        "",
        "The `CartService` merges the `CartEntity` with the list of CatalogueItemEntity` received from the catalogue service and return this to the `CartController`",
        "",
        "While this approach is very attractive, it has its disadvantages as we will explore later on.",
        "",
        "> **Why would we use the REST API while both services are still in the same monolithic application?**",
        ">",
        "> The cart needs data from the catalogue to function and therefore it is imperative to establish the new flow of data before proceeding."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Markdown",
      "id": "afb4894d-7d8b-4780-910f-8ff876670ad2",
      "contents": [
        "The `CartService` uses both the `CartRepository` and the `CatalogueItemRepository` repositories to perform its duties, as shown next."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "beb5094c-485a-48db-a65c-8414bb6c4112",
      "path": "./demo-application-cart/src/main/java/demo/cart/CartService.java",
      "number_of_lines": 16
    },
    {
      "type": "Markdown",
      "id": "502e1949-8771-46d6-8d64-0fe9253f8bd1",
      "contents": [
        "All catalogue related information is pulled from the `CatalogueItemRepository` which is available on the classpath, as shown by the cart’s `pom.xml` file. Both the cart and catalogue are packaged as one JAR file and deployed together."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "4600ca20-001f-490b-ae73-af4e3ab0c44a",
      "path": "./demo-application-cart/pom.xml",
      "from_line": 23,
      "number_of_lines": 14
    },
    {
      "type": "Markdown",
      "id": "143057b2-ea6b-4253-adf4-58cfe4d7960b",
      "contents": [
        "Before we can split these two into separate, and independent, services, we need to disconnect them from the code level.",
        "",
        "The simplest solution is to fetch the data through a REST endpoint instead of using the repository. Therefore, whenever the cart service requires information from the catalogue service, it will make a REST request to the catalogue service and get the data through the REST endpoint.",
        "",
        "> **How can we ensure data integrity? Will we use distributed transactions?**",
        ">",
        "> The [CAP theorem](https://en.wikipedia.org/wiki/CAP_theorem), also known as Brewer’s theorem, states that in a distributed data store, it is impossible to simultaneously provide more than two out of the following three guarantees:",
        ">",
        "> - _Consistency_: Every read receives the most recent write or an error.",
        "> - _Availability_: Every request receives a response, without guarantee that it contains the most recent write.",
        "> - _Partition Tolerance_: The system continues to operate despite an arbitrary number of messages being dropped or delayed by the network between nodes.",
        ">",
        "> The theorem implies that a distributed system can only ensure two of the three properties at any given time.",
        ">",
        "> What does this mean to us?",
        ">",
        "> If we want our application to keep working as best as it can even when one service fails, then we need to compromise _consistency_ in favour of _availability_ and _partition tolerance_. This means that we cannot use distributed transactions and our application will operate in an [eventual consistency](https://en.wikipedia.org/wiki/Eventual_consistency) mode. Eventual consistency means that the application will eventually become consistent but there may be times where parts of the application are not consistent.",
        ">",
        "> Can you see the complexities that distributed architecture styles, such as microservices, introduce? There was a big hype about microservices and the technologies around them and many teams ended up opting in very complicated architectures before reading the fineprint (to use the sales analogy).",
        "",
        "> **What if we need our application to be consistent? Can we use distributed architecture in that case?**",
        ">",
        "> That is a very good and interesting question. The short answer is no. You should avoid distributed systems if consistency is very important.",
        ">",
        "> Why would you like to split a monolithic application into a distributed application? What is the rationale behind this migration?",
        ">",
        "> When teams grow beyond a certain size, managing them will become difficult. Thus, the teams are split into smaller teams, easier to manage. According to the British anthropologist [Robin Dunbar](https://en.wikipedia.org/wiki/Robin_Dunbar), teams size larger than [15 people](https://en.wikipedia.org/wiki/Dunbar%27s_number) do not glue well because of limitations in our cognitive abilities. This is less popular than the [Two-Pizza Teams rule](https://docs.aws.amazon.com/whitepapers/latest/introduction-devops-aws/two-pizza-teams.html), by Jeff Bezos. So how do we implement that? Should we split the teams and applications accordingly and create microservices?",
        ">",
        "> That’s almost correct. While it is recommended to keep the teams small, we don’t need to split the application as well. We can create a multi project modular monolithic application, as we did before. Each team will take care of their part and other teams can only get data through well-defined interfaces.",
        "",
        "> **When does it make sense to move from monolithic to distributed?**",
        ">",
        "> Assuming that we have no hard constraints, this becomes a simple cost benefit analysis more than anything.",
        ">",
        "> Say we have 10 teams working on a huge modular monolithic application and its build time becomes too long. It takes hours to build and test even after many optimisations to the build pipeline and the teams need to take turns before deploying to production.",
        ">",
        "> After a careful analysis it was found that the monolithic application can be split into three parts as date is rarely exchanged between each of these three parts. The efforts of managing the distributed application are far less than those of the huge monolithic application, thus migrating this application makes sense.",
        ">",
        "> Finding the right cutting point is not easy. When does it make sense to migrate? Discussing this topic amongst the team and “play” migration scenario every so often, is not a bad idea. This does not mean that the migration will or has to happen and start preparing the team to think in that direction.",
        ">",
        "> I must mention the other extreme that, unfortunately, is too common in startups. Some startups end up having more microservices than users and carry a heavy burden without real need. This is usually done in the name of scalability. What these teams fail to understand is that monolithic applications are rarely the cause of scalability limitations. The shared state, such as database or session information, is usually the bottleneck. Stateless monolithic applications that use highly scalable databases can horizontally scale as much as we need them to.",
        "",
        "Create a gateway and the objects needed by the cart to be able to access the data from the catalogue service using REST.",
        "",
        "In this section we will create the following",
        "",
        "1. `CatalogueConfiguration`: used to create a configured `RestTemplate`.",
        "2. `CatalogueItemEntity`: represents the catalogue item within the cart context.",
        "3. `CatalogueItemTo`: represents the data received from the catalogue component.",
        "4. `CatalogueItemGateway`: fetches the data from the catalogue component (`CatalogueItemTo`) and converts it into the internal representation (`CatalogueItemEntity`).",
        "5. Refactor the cart project so that it does not depend on the catalogue project directly anymore."
      ]
    },
    {
      "type": "Markdown",
      "id": "449c9b28-de03-4fd2-ac3f-4150c8193c7c",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "c94d7e0b-fd34-49c0-b26b-399b660770f5",
      "commands": [
        "git tag --annotate 'v2.0' --message 'Before removing code dependency on catalogue component'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Heading",
      "id": "10fab7ea-2b8e-4a89-8f72-38b5f36ddbf0",
      "level": "H4",
      "title": "Step 1: Create the `CatalogueConfiguration`"
    },
    {
      "type": "Markdown",
      "id": "d91f3709-4590-4256-a6cc-ee3cb5de7c94",
      "contents": [
        "We need to create a new package (`demo.external.catalogue`), within the cart project, where we will put all the things related to the catalogue project. For example, we will be fetching data from the catalogue project using REST. All this code will be placed in this new package. This will organise (or partition) the code within the cart project by domain. Anything that the cart needs from the catalogue will be found in the new package (`demo.external.catalogue`).",
        "",
        "> **Why not use the `demo.catalogue` package name instead of `demo.external.catalogue`?**",
        ">",
        "> That’s an excellent question. Both the cart and the catalogue projects will be packaged as JAR files and grouped together with the other dependencies to form part of the monolithic application. If we use the `demo.catalogue` in both the cart and the catalogue project we will have a split package. A split package is a Java package that exists in more than one JAR file.",
        ">",
        "> Furthermore, if we have the same class name, say the `CatalogueItemEntity`, in both packages, which one will Java use?",
        ">",
        "> In order to avoid these problems, we will put any code that is related to other domains, under the `demo.external` and avoid the split package problem."
      ]
    },
    {
      "type": "Command",
      "id": "0878c1f1-0898-4e95-9d30-e598c2ae928e",
      "commands": [
        "mkdir -p './src/main/java/demo/external/catalogue'"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "2eece557-26a6-4cad-8586-34eedd694188",
      "contents": [
        "The cart will make REST requests to the catalogue service using a [`RestTemplate`](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html), which is part of the Spring web framework. [`WebClient`](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/reactive/function/client/WebClient.html) is an alternative approach to the `RestTemplate` that provides a functional approach, with method chaining, amongst other things. The `WebClient` is part of the [Spring WebFlux (`spring-boot-starter-webflux`) project](https://docs.spring.io/spring-framework/reference/web/webflux.html), which is not included in our dependencies. If you like to use the `WebClient`, please include the [`spring-boot-starter-webflux` starter project](https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-webflux/3.3.0)."
      ]
    },
    {
      "type": "Command",
      "id": "05597163-1f93-43b1-b971-a09816685434",
      "commands": [
        "CAT << EOF > './src/main/java/demo/external/catalogue/CatalogueConfiguration.java'",
        "package demo.external.catalogue;",
        "",
        "import org.springframework.boot.web.client.RestTemplateBuilder;",
        "import org.springframework.context.annotation.Bean;",
        "import org.springframework.context.annotation.Configuration;",
        "import org.springframework.web.client.RestTemplate;",
        "",
        "import java.time.Duration;",
        "import java.util.Optional;",
        "",
        "@Configuration",
        "public class CatalogueConfiguration {",
        "",
        "    @Bean",
        "    public RestTemplate catalogueRestTemplate(final RestTemplateBuilder builder) {",
        "        final String catalogueRootUri = Optional.ofNullable(System.getenv(\"CATALOGUE_ROOT_URI\"))",
        "                .orElse(\"http://localhost/\");",
        "",
        "        return builder",
        "                .setConnectTimeout(Duration.ofSeconds(1))",
        "                .setReadTimeout(Duration.ofSeconds(1))",
        "                .rootUri(catalogueRootUri)",
        "                .build();",
        "    }",
        "}",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "66a1a9a2-2563-4622-bf46-6a842842973d",
      "contents": [
        "The `CatalogueConfiguration` class should look like the following example."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "a4949717-f791-40ba-961d-44b35509cfa5",
      "path": "./demo-application-cart/src/main/java/demo/external/catalogue/CatalogueConfiguration.java"
    },
    {
      "type": "Markdown",
      "id": "2790c495-e823-40e4-b68e-66025f9dde9a",
      "contents": [
        "> **Why are we using the `CATALOGUE_ROOT_URI` environment variable?**",
        ">",
        "> The catalogue service can be anywhere, and we cannot hard code this in our code. Given that it will start as part of this application, we provided a fallback to this application, but that’s because we know that it will be there.",
        ">",
        "> We could have taken better advantage from Spring here and allowed for this to be specified as a property, which can then be passed in many forms. The environment variable will allow us to change the location where the catalogue server is found without having to rebuild the application.",
        "",
        "Create the data model that represents the catalogue item returned by the catalogue service.",
        "",
        "This entity is not persisted in the database as the cart fetches this everytime it is needed."
      ]
    },
    {
      "type": "Heading",
      "id": "48129b58-84b1-403d-97fb-eb1a0620872e",
      "level": "H4",
      "title": "Step 2: Create the `CatalogueItemEntity`"
    },
    {
      "type": "Markdown",
      "id": "eb8745b5-570e-4d8c-8aa6-cbbf07f80faf",
      "contents": [
        "Create the data model that represents the catalogue item returned by the catalogue service.",
        "",
        "This entity is not persisted in the database as the cart fetches this everytime it is needed. Thus, we can use records."
      ]
    },
    {
      "type": "Command",
      "id": "2aaceec6-af9e-4f13-8f96-de9fd69b1854",
      "commands": [
        "CAT << EOF > './src/main/java/demo/external/catalogue/CatalogueItemEntity.java'",
        "package demo.external.catalogue;",
        "",
        "public record CatalogueItemEntity(long id, String caption) {}",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "3693fd2a-f5d9-401b-9357-c790d5b683f2",
      "contents": [
        "> **The catalogue item has a description. Why did we exclude it?**",
        ">",
        "> The cart only needs the `id` and `caption`, and it does not use the `description` provided by the catalogue. Therefore, we don’t need to include it in the model used by the cart. This is the freedom that the anti-corruption layer provides. We can shape the model as needed by this part of the application, without impacting the other parts."
      ]
    },
    {
      "type": "Heading",
      "id": "4e609784-f92b-4d11-a358-e032fc017055",
      "level": "H4",
      "title": "Step 3: Create the `CatalogueItemTo`"
    },
    {
      "type": "Markdown",
      "id": "13b30848-7ee6-41ab-84c3-c1ee0ae58a33",
      "contents": [
        "Create transfer objects (`CatalogueItemTo`).",
        "",
        "> **Why do we need to have a transfer object?**",
        ">",
        "> The transfer object provides a layer of isolation between the internal model and the data being transferred. These are identical, and we could have done without it, but in more complicated cases the data transferred is different from the internal model."
      ]
    },
    {
      "type": "Command",
      "id": "3b9f999c-6954-45c6-a6ab-76e105507237",
      "commands": [
        "CAT << EOF > './src/main/java/demo/external/catalogue/CatalogueItemTo.java'",
        "package demo.external.catalogue;",
        "",
        "public record CatalogueItemTo(long id, String caption) {",
        "",
        "    public CatalogueItemEntity toEntity() {",
        "        return new CatalogueItemEntity(id, caption);",
        "    }",
        "}",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Heading",
      "id": "a1a6ab92-fbc4-46a1-9496-5ecb97d5eacf",
      "level": "H4",
      "title": "Step 4: Create the `CatalogueItemGateway`"
    },
    {
      "type": "Markdown",
      "id": "02b1124e-8309-4e83-af9c-673585e02428",
      "contents": [
        "The `CatalogueItemGateway` will eventually replace the `CatalogueItemRepository` in the `CartService`. Therefore, we need to have feature parity between these two. The `CartService` gets the information from the catalogue in two forms. When an item is added to the cart, the service fetches the item through the `CatalogueItemRepository`, as shown below."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "9c0c0b42-8a8b-42f9-b157-8642a399ff4d",
      "path": "./demo-application-cart/src/main/java/demo/cart/CartService.java",
      "from_line": 29,
      "number_of_lines": 14
    },
    {
      "type": "Markdown",
      "id": "63ebacb2-73c3-4a76-93f1-6dd21ad5a4c7",
      "contents": [
        "Here, the catalogue repository simply returns the catalogue item with the given id if found.",
        "",
        "The second one is hidden in the entities. This `CartService` also returns the cart by the given id, as shown below."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "a92b8ffd-3eca-47ae-bfcb-6f455bcd4a06",
      "path": "./demo-application-cart/src/main/java/demo/cart/CartService.java",
      "from_line": 24,
      "number_of_lines": 3
    },
    {
      "type": "Markdown",
      "id": "cc7cf369-9714-4c9d-907e-5254798059e2",
      "contents": [
        "The `CartEntity` returned by the `CartService` contains a list of `CartItemEntity`, as shown below."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "2e0b6bab-478e-478c-a203-e0bd73dbc48d",
      "path": "./demo-application-cart/src/main/java/demo/cart/CartEntity.java",
      "from_line": 18,
      "number_of_lines": 12
    },
    {
      "type": "Markdown",
      "id": "b28c6350-36d0-448a-8135-cbcdef2636b5",
      "contents": [
        "The `CartItemEntity`, that is part of the `CartEntity` returned by the `CartService`, is linked to `CatalogueItemEntity`, through the `CartItemEntityPrimaryKey` composite primary key, shown next."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "55bbf393-3bea-4e37-a792-84599f901e75",
      "path": "./demo-application-cart/src/main/java/demo/cart/CartItemEntityPrimaryKey.java",
      "number_of_lines": 25
    },
    {
      "type": "Markdown",
      "id": "9e70ce60-2420-415f-bfbd-cbbcd5fb96a0",
      "contents": [
        "This means that when we read one cart, we are also reading all cart items and the respective catalogue items. Now if we want to disconnect these two, we cannot read the catalogue items from the database as we are doing now. Instead, we need to first read the cart, and then we need to fetch these items from the catalogue service using the new REST API.",
        "",
        "Fetching these one by one is not recommended, and we should add a new service in the catalogue that returns a list of catalogue items at one go.",
        "",
        "> **Why is it not recommended to fetch these items one by one?**",
        ">",
        "> This is a very important question. Every request made has an overhead. The REST request has its overheads and also the database query. It is faster to fetch all the items we need with one query than a query for each. Fetching each item one by one will simply multiply the overhead by the number of items.",
        ">",
        "> There is a more subtle problem, which we have to endure for the time being, related to fetching items one by one. Having fine grain API, like the one we have that fetches each item is not recommended. Our approach will complicate a lot and make the cart dependent on the catalogue service. Furthermore, here we are incurring the cost of tight coupling without gaining any benefits. The cart service will fail if the catalogue service goes down (lost _partition tolerance_ and _availability_ from the CAP theorem), while having given up _consistency_. In other words, this approach gives up all three guarantees.",
        ">",
        "> We will improve on this approach later on.",
        "",
        "To achieve feature parity, the `CatalogueItemGateway` need to be able to fetch a single item and also a list of items from the catalogue service."
      ]
    },
    {
      "type": "Command",
      "id": "24cb589f-3a63-42c3-b81d-e826b7c01739",
      "commands": [
        "CAT << EOF > './src/main/java/demo/external/catalogue/CatalogueItemGateway.java'",
        "package demo.external.catalogue;",
        "",
        "import org.slf4j.Logger;",
        "import org.slf4j.LoggerFactory;",
        "import org.springframework.core.ParameterizedTypeReference;",
        "import org.springframework.http.HttpMethod;",
        "import org.springframework.http.HttpStatus;",
        "import org.springframework.http.ResponseEntity;",
        "import org.springframework.stereotype.Service;",
        "import org.springframework.web.client.HttpClientErrorException;",
        "import org.springframework.web.client.RestTemplate;",
        "",
        "import java.util.List;",
        "import java.util.Optional;",
        "import java.util.Set;",
        "import java.util.stream.Collectors;",
        "",
        "import static java.util.Objects.requireNonNull;",
        "",
        "@Service",
        "public class CatalogueItemGateway {",
        "",
        "    private static final Logger LOGGER = LoggerFactory.getLogger(CatalogueItemGateway.class);",
        "",
        "    private final RestTemplate restTemplate;",
        "",
        "    public CatalogueItemGateway(final RestTemplate restTemplate) {",
        "        this.restTemplate = requireNonNull(restTemplate, \"Rest template cannot be null\");",
        "    }",
        "",
        "    public Optional<CatalogueItemEntity> findById(final long id) {",
        "        try {",
        "            final ResponseEntity<CatalogueItemTo> entity = restTemplate.getForEntity(\"/catalogue/item/%d\".formatted(id), CatalogueItemTo.class);",
        "            if (HttpStatus.OK.equals(entity.getStatusCode())) {",
        "                return Optional.ofNullable(entity.getBody())",
        "                        .map(CatalogueItemTo::toEntity);",
        "            }",
        "        } catch (final HttpClientErrorException.NotFound e) {",
        "            LOGGER.error(\"Catalogue Item with id {} not found\", id, e);",
        "        }",
        "        return Optional.empty();",
        "    }",
        "",
        "    public List<CatalogueItemEntity> findAllById(final Set<Long> ids) {",
        "        final String stringIds = ids.stream().map(String::valueOf).collect(Collectors.joining(\",\"));",
        "        final ParameterizedTypeReference<List<CatalogueItemTo>> type = new ParameterizedTypeReference<>() {};",
        "        return restTemplate.exchange(\"/catalogue/item/all/%s\".formatted(stringIds), HttpMethod.GET, null, type)",
        "                .getBody() /* TODO: need to check for nulls */",
        "                .stream().map(CatalogueItemTo::toEntity)",
        "                .toList();",
        "    }",
        "}",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "ca39a9db-9a6d-4380-bb05-5c7ca3a98154",
      "contents": [
        "The `CatalogueItemGateway` class should look like the following example."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "94fed91c-9bc4-4fbc-a279-15fa97f12f1d",
      "path": "./demo-application-cart/src/main/java/demo/external/catalogue/CatalogueItemGateway.java"
    },
    {
      "type": "Heading",
      "id": "6c0f06cf-4d18-41e4-a82d-aea4f7e7c752",
      "level": "H4",
      "title": "Step 5: Refactor the cart project so that it does not depend on the catalogue project directly any more"
    },
    {
      "type": "Markdown",
      "id": "f4f99b6e-69b8-421f-a1ec-8379bdc4f479",
      "contents": [
        "The changes we made so far are a piece of cake compared to what’s next. I took this less optimal path on purpose as I want to show you some of the pitfalls that can be encountered while building distributed systems.",
        "",
        "Let’s think a bit about what we need to do.",
        "",
        "1. Refactor the `CartService` and remove its dependency on `CatalogueItemRepository` and use `CatalogueItemGateway` instead.",
        "2. Refactor the `CartItemEntity` and its `CartItemEntityPrimaryKey` composite primary key entity so that it does not get the catalogue item caption from the `CatalogueItemEntity` entity read from the database, but instead it uses the one fetched through the API.",
        "3. Refactor the POM file to remove the code (static) dependency on the catalogue project.",
        "4. Refactor the tests so that we can test the cart service independent of the catalogue service.",
        "5. Refactor the catalogue service to expose the required data as an API.",
        "6. Try the new application.",
        "",
        "As you can see, the list is not short. While there are cases where a distributed architecture makes sense, please do not underestimate the additional complexity added to the application when we adopt a distributed architecture style.",
        "",
        "We have a long list ahead of us, so let’s stop for a coffee to recharge our energy level before starting."
      ]
    },
    {
      "type": "Heading",
      "id": "de0956b9-6429-431a-8d1b-61904786f318",
      "level": "H5",
      "title": "Step 1: Refactor the `CartService` and remove its dependency on `CatalogueItemRepository` and use `CatalogueItemGateway` instead"
    },
    {
      "type": "Markdown",
      "id": "092895e7-ac52-4ae7-a102-87af50da12a9",
      "contents": [
        "We need to make three changes here. First replace the `CatalogueItemRepository` and `CatalogueItemGateway`. As you will see in the following change, this is a drop-in replacement as we carefully selected matching method names when creating the `CatalogueItemGateway`. While this is not easily done in real-life, it is good to use a common convention (such as `findById()`) even if you prefer other conventions (such as `findWithId()`) and stick with it."
      ]
    },
    {
      "type": "Command",
      "id": "845da4e2-0c55-4b36-b4bf-ec5de12454e4",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartService.java' << EOF",
        "--- a/src/main/java/demo/cart/CartService.java",
        "+++ b/src/main/java/demo/cart/CartService.java",
        "@@ -1,7 +1,7 @@",
        " package demo.cart;",
        " ",
        " import demo.catalogue.CatalogueItemEntity;",
        "-import demo.catalogue.CatalogueItemRepository;",
        "+import demo.external.catalogue.CatalogueItemGateway;",
        " import jakarta.transaction.Transactional;",
        " import org.springframework.stereotype.Service;",
        " ",
        "@@ -13,12 +13,12 @@ import static java.util.Objects.requireNonNull;",
        " public class CartService {",
        " ",
        "     private final CartRepository cartRepository;",
        "-    private final CatalogueItemRepository itemRepository;",
        "+    private final CatalogueItemGateway itemGateway;",
        " ",
        "     public CartService(final CartRepository cartRepository,",
        "-                       final CatalogueItemRepository itemRepository) {",
        "+                       final CatalogueItemGateway itemGateway) {",
        "         this.cartRepository = requireNonNull(cartRepository, \"Cart repository cannot be null\");",
        "-        this.itemRepository = requireNonNull(itemRepository, \"Catalogue item repository cannot be null\");",
        "+        this.itemGateway = requireNonNull(itemGateway, \"Catalogue item gateway cannot be null\");",
        "     }",
        " ",
        "     public Optional<CartEntity> findById(final long id) {",
        "@@ -38,7 +38,7 @@ public class CartService {",
        " ",
        "         final CartItemEntity itemInCart = cart.findCartItemWithId(itemId);",
        "         if (itemInCart == null) {",
        "-            final Optional<CatalogueItemEntity> optionalItem = itemRepository.findById(itemId);",
        "+            final Optional<CatalogueItemEntity> optionalItem = itemGateway.findById(itemId);",
        " ",
        "             /* Catalogue Item not found */",
        "             if (optionalItem.isEmpty()) {",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "5e787aef-c2b3-4699-a100-691a946488d8",
      "contents": [
        "> **Do we still need to have the `addItemToCart()` method transactional?**",
        ">",
        "> Yes. In this method we are reading from the `cart` and `cart_item` from the database, making some changes to these entities and then saving the changes back to the database. These steps need to happen in one transaction otherwise two simultaneous modifications, despite how unlikely this can be, to the same cart may compromise its integrity.",
        "",
        "Until now, we are using the `CatalogueItemEntity` that was found in the `demo.catalogue` package that belongs to the catalogue project. We need to change this to the newly created class within the new `demo.external.catalogue` package."
      ]
    },
    {
      "type": "Command",
      "id": "7ff8288d-c827-480e-890f-5b9b3ea406a0",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartService.java' << EOF",
        "--- a/src/main/java/demo/cart/CartService.java",
        "+++ b/src/main/java/demo/cart/CartService.java",
        "@@ -1,6 +1,6 @@",
        " package demo.cart;",
        " ",
        "-import demo.catalogue.CatalogueItemEntity;",
        "+import demo.external.catalogue.CatalogueItemEntity;",
        " import demo.external.catalogue.CatalogueItemGateway;",
        " import jakarta.transaction.Transactional;",
        " import org.springframework.stereotype.Service;",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "e95ef775-4130-4ef2-a230-3f9dc582df8f",
      "contents": [
        "The next change is more involved. When the service fetches a cart from the database, if this is found, then we need to fetch all of its items from the catalogue service using the gateway. We will add a method, called `fetchCartItemsCaption()`, that takes a cart and fetches the catalogue items."
      ]
    },
    {
      "type": "Command",
      "id": "d631d839-56de-4586-8472-b2fdd1405775",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartService.java' << EOF",
        "--- a/src/main/java/demo/cart/CartService.java",
        "+++ b/src/main/java/demo/cart/CartService.java",
        "@@ -5,7 +5,12 @@ import demo.external.catalogue.CatalogueItemGateway;",
        " import jakarta.transaction.Transactional;",
        " import org.springframework.stereotype.Service;",
        " ",
        "+import java.util.List;",
        "+import java.util.Map;",
        " import java.util.Optional;",
        "+import java.util.Set;",
        "+import java.util.function.Function;",
        "+import java.util.stream.Collectors;",
        " ",
        " import static java.util.Objects.requireNonNull;",
        " ",
        "@@ -53,4 +58,25 @@ public class CartService {",
        "         final CartEntity savedCart = cartRepository.save(cart);",
        "         return Optional.of(savedCart);",
        "     }",
        "+",
        "+    private CartEntity fetchCartItemsCaption(final CartEntity cart) {",
        "+        final List<CartItemEntity> items = cart.items();",
        "+        final Set<Long> cartItemIds = items.stream()",
        "+                .map(CartItemEntity::itemId)",
        "+                .collect(Collectors.toSet());",
        "+",
        "+        final Map<Long, CatalogueItemEntity> catalogueItems = itemGateway.findAllById(cartItemIds)",
        "+                .stream()",
        "+                .collect(Collectors.toMap(CatalogueItemEntity::id, Function.identity()));",
        "+",
        "+        for (CartItemEntity item : cart.items()) {",
        "+            final Long id = item.itemId();",
        "+            final CatalogueItemEntity entity = catalogueItems.get(id);",
        "+            if (entity != null) {",
        "+                item.catalogueItemEntity(entity);",
        "+            }",
        "+        }",
        "+",
        "+        return cart;",
        "+    }",
        " }",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "7781ffb4-9a09-4581-bf82-cc28c55fea64",
      "contents": [
        "Let’s break this down, so we are all on the same page.",
        "",
        "We start by getting the catalogue item ids from the items in the cart. The `CartItemEntity` has the `itemId()` method that provides that."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "23296934-f05d-4899-894f-d697ae02bf0d",
      "path": "./demo-application-cart/src/main/java/demo/cart/CartService.java",
      "from_line": 62,
      "number_of_lines": 5
    },
    {
      "type": "Markdown",
      "id": "92384876-c58f-4d88-b7fe-a783fd6c7d16",
      "contents": [
        "Next we fetch all these catalogue items through the gateway, which in turn calls the catalogue service. The Gateway returns a list of `CatalogueItemEntity`, which we then put in a map index by the items ids. This will simplify its use in the next step."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "b3aace9f-63a4-40bf-b59b-ce151b1d2306",
      "path": "./demo-application-cart/src/main/java/demo/cart/CartService.java",
      "from_line": 68,
      "number_of_lines": 3
    },
    {
      "type": "Markdown",
      "id": "78a1ba36-f453-41c8-8db5-32532ee83745",
      "contents": [
        "Finally we iterate each item within the cart and link this to the entity we fetched from teh catalogue service."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "bda63736-ecea-4748-89a1-10c2e7d94d5e",
      "path": "./demo-application-cart/src/main/java/demo/cart/CartService.java",
      "from_line": 72,
      "number_of_lines": 7
    },
    {
      "type": "Markdown",
      "id": "4754a9f8-e421-45be-943b-728f229d1489",
      "contents": [
        "The method finishes by returning the given cart entity with the catalogue items fetched from the catalogue service.",
        "",
        "> **Given that we are modifying the cart entity in place, why do we return it as well?**",
        ">",
        "> In theory, we don’t need to return the given cart entity, but as we will see next, it simplifies its usage.",
        "",
        "Let’s update the `findById()` method so that it updates the cart before returning this to the controller."
      ]
    },
    {
      "type": "Command",
      "id": "0380129c-9cd3-49f1-a7f6-aa00fef8ff98",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartService.java' << EOF",
        "--- a/src/main/java/demo/cart/CartService.java",
        "+++ b/src/main/java/demo/cart/CartService.java",
        "@@ -27,7 +27,8 @@ public class CartService {",
        "     }",
        " ",
        "     public Optional<CartEntity> findById(final long id) {",
        "-        return cartRepository.findById(id);",
        "+        return cartRepository.findById(id)",
        "+                .map(this::fetchCartItemsCaption);",
        "     }",
        " ",
        "     @Transactional",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "fbf9147d-9065-482f-b9f2-1a8ee5542907",
      "contents": [
        "As you can see, given that the `fetchCartItemsCaption()` gets a `CartEntity` and returns a `CartEntity`, then we can simply pass this method as a function.",
        "",
        "Finally, we need to fetch the catalogue items again after saving the cart. This is needed as we have not fetched the catalogue items yet. We read the cart details from the database, but this does not contain the catalogue items. Therefore, we need to fetch these before we return the cart entity."
      ]
    },
    {
      "type": "Command",
      "id": "3aac5178-2212-44a0-a3fc-5eecf95045e3",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartService.java' << EOF",
        "--- a/src/main/java/demo/cart/CartService.java",
        "+++ b/src/main/java/demo/cart/CartService.java",
        "@@ -57,7 +57,7 @@ public class CartService {",
        "         }",
        " ",
        "         final CartEntity savedCart = cartRepository.save(cart);",
        "-        return Optional.of(savedCart);",
        "+        return Optional.of(fetchCartItemsCaption(savedCart));",
        "     }",
        " ",
        "     private CartEntity fetchCartItemsCaption(final CartEntity cart) {",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "f2154716-43f2-4eba-8498-e7d8a9d4e653",
      "contents": [
        "That concludes the changes that needed to be made to the `CartService` but we are far from done and our `CartService` should like the following example."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "f1fe9534-3019-4f7c-9798-87659cf22503",
      "path": "./demo-application-cart/src/main/java/demo/cart/CartService.java"
    },
    {
      "type": "Markdown",
      "id": "0aef164a-b313-481e-b24a-2b1a6009f088",
      "contents": [
        "Also note that we are invoking a method (`catalogueItemEntity()`) on each `CartItemEntity` within the cart that does not yet exist. Will deal with this next."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "b78a90b5-6b19-4d6f-b6b2-2abc34354450",
      "path": "./demo-application-cart/src/main/java/demo/cart/CartService.java",
      "from_line": 76,
      "number_of_lines": 3
    },
    {
      "type": "Heading",
      "id": "c4d00bf0-2080-4a2f-960d-2c1a46c26dc9",
      "level": "H5",
      "title": "Step 2: Refactor the `CartItemEntity` and its `CartItemEntityPrimaryKey` composite primary key entity so that it does not get the catalogue item caption from the `CatalogueItemEntity` entity read from the database, but instead it uses the one fetched through the API"
    },
    {
      "type": "Markdown",
      "id": "742629c8-fefe-4de3-bbc3-d1651a5fc6e4",
      "contents": [
        "The composite primary key, `CartItemEntityPrimaryKey`, has a reference to the `CatalogueItemEntity` read from the database. This needs to be replaced by the id (of type `Long`) and the equivalent object fetched from the catalogue service will take its place.",
        "",
        "Let’s make these changes slowly. Let’s start by replacing the `CatalogueItemEntity` object with just the id."
      ]
    },
    {
      "type": "Command",
      "id": "c03079c1-5950-443b-8837-0be5102e05ba",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartItemEntityPrimaryKey.java' << EOF",
        "--- a/src/main/java/demo/cart/CartItemEntityPrimaryKey.java",
        "+++ b/src/main/java/demo/cart/CartItemEntityPrimaryKey.java",
        "@@ -1,6 +1,5 @@",
        " package demo.cart;",
        " ",
        "-import demo.catalogue.CatalogueItemEntity;",
        " import jakarta.persistence.Embeddable;",
        " import jakarta.persistence.JoinColumn;",
        " import jakarta.persistence.ManyToOne;",
        "@@ -20,15 +19,13 @@ public class CartItemEntityPrimaryKey implements Serializable {",
        "     @ManyToOne(optional = false)",
        "     @JoinColumn(name = \"cartId\")",
        "     private CartEntity cart;",
        "-    @ManyToOne(optional = false)",
        "-    @JoinColumn(name = \"itemId\")",
        "-    private CatalogueItemEntity item;",
        "+    private Long itemId;",
        " ",
        "     protected CartItemEntityPrimaryKey() {}",
        " ",
        "-    public CartItemEntityPrimaryKey(final CartEntity cart, final CatalogueItemEntity item) {",
        "+    public CartItemEntityPrimaryKey(final CartEntity cart, final Long itemId) {",
        "         this.cart = cart;",
        "-        this.item = item;",
        "+        this.itemId = itemId;",
        "     }",
        " ",
        "     public Long cartId() {",
        "@@ -36,7 +33,7 @@ public class CartItemEntityPrimaryKey implements Serializable {",
        "     }",
        " ",
        "     public Long itemId() {",
        "-        return mapIfNotNull(item, CatalogueItemEntity::id);",
        "+        return itemId;",
        "     }",
        " ",
        "     public String itemCaption() {",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "b18e8e0a-bd86-4c06-afd9-c0c9250ef1a2",
      "contents": [
        "The `itemCaption()` is broken, and we will fix it next. This method was fetching the caption from the entity read from the database, automatically through JPA. Now this value will be fetched from the catalogue service, therefore we need to provide means to set this value after it is fetched. As mentioned already we will store this value in a transient field as shown next."
      ]
    },
    {
      "type": "Command",
      "id": "66782b63-1d64-46f2-b45c-813f7523f256",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartItemEntityPrimaryKey.java' << EOF",
        "--- a/src/main/java/demo/cart/CartItemEntityPrimaryKey.java",
        "+++ b/src/main/java/demo/cart/CartItemEntityPrimaryKey.java",
        "@@ -1,5 +1,6 @@",
        " package demo.cart;",
        " ",
        "+import demo.external.catalogue.CatalogueItemEntity;",
        " import jakarta.persistence.Embeddable;",
        " import jakarta.persistence.JoinColumn;",
        " import jakarta.persistence.ManyToOne;",
        "@@ -21,6 +22,9 @@ public class CartItemEntityPrimaryKey implements Serializable {",
        "     private CartEntity cart;",
        "     private Long itemId;",
        " ",
        "+    /* This is not persisted, and it attached to the entity at a later stage */",
        "+    private transient CatalogueItemEntity item;",
        "+",
        "     protected CartItemEntityPrimaryKey() {}",
        " ",
        "     public CartItemEntityPrimaryKey(final CartEntity cart, final Long itemId) {",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "3f25dbda-065e-468e-8c7c-fc7f1af1aeb2",
      "contents": [
        "Finally, we need to provide a setter method to set this value and make sure that it is valid. The fetched `CatalogueItemEntity` must have the same id as the primary key."
      ]
    },
    {
      "type": "Command",
      "id": "42f8945b-3238-4a7c-b8d9-b9f0599039d8",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartItemEntityPrimaryKey.java' << EOF",
        "--- a/src/main/java/demo/cart/CartItemEntityPrimaryKey.java",
        "+++ b/src/main/java/demo/cart/CartItemEntityPrimaryKey.java",
        "@@ -44,6 +44,14 @@ public class CartItemEntityPrimaryKey implements Serializable {",
        "         return mapIfNotNull(item, CatalogueItemEntity::caption);",
        "     }",
        " ",
        "+    public void catalogueItemEntity(final CatalogueItemEntity item) {",
        "+        if (item != null && item.id() != itemId) {",
        "+            throw new IllegalArgumentException(\"Catalogue entity does not match item id\");",
        "+        }",
        "+",
        "+        this.item = item;",
        "+    }",
        "+",
        "     @Override",
        "     public boolean equals(final Object object) {",
        "         return object instanceof final CartItemEntityPrimaryKey other",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "bbd88adb-93b8-4153-aaf3-a670c40417e9",
      "contents": [
        "This conclude all changes that we needed to do in the `CartItemEntityPrimaryKey` entity class and it should look like the following example."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "ff91c36d-5ad3-48de-8312-578380864246",
      "path": "./demo-application-cart/src/main/java/demo/cart/CartItemEntityPrimaryKey.java"
    },
    {
      "type": "Markdown",
      "id": "e448ca65-9041-44cb-b465-de970154b98c",
      "contents": [
        "The `CartItemEntityPrimaryKey` is ready. We need to pass the `CatalogueItemEntity` value fetched from the catalogue service through the `CartItemEntity` class."
      ]
    },
    {
      "type": "Command",
      "id": "53e0c054-7f85-42b4-8c37-242e64000092",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartItemEntity.java' << EOF",
        "--- a/src/main/java/demo/cart/CartItemEntity.java",
        "+++ b/src/main/java/demo/cart/CartItemEntity.java",
        "@@ -1,5 +1,6 @@",
        " package demo.cart;",
        " ",
        "+import demo.external.catalogue.CatalogueItemEntity;",
        " import jakarta.persistence.EmbeddedId;",
        " import jakarta.persistence.Entity;",
        " ",
        "@@ -46,6 +47,10 @@ public class CartItemEntity implements Serializable {",
        "         this.quantity += offset;",
        "     }",
        " ",
        "+    public void catalogueItemEntity(final CatalogueItemEntity item) {",
        "+        this.id.catalogueItemEntity(item);",
        "+    }",
        "+",
        "     @Override",
        "     public boolean equals(final Object object) {",
        "         return object instanceof final CartItemEntity other",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "492e9a38-8de0-4cf1-bbe0-ae38337633f9",
      "contents": [
        "This concludes all changes that we needed to do in the `CartItemEntity` entity class, and it should look like the following example."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "9cb4d10c-84a7-467e-ab28-a1b3d34539d6",
      "path": "./demo-application-cart/src/main/java/demo/cart/CartItemEntity.java"
    },
    {
      "type": "Markdown",
      "id": "dfe666de-6627-42c9-ad98-d4dd164c6caa",
      "contents": [
        "Before moving to the next step, we need to update the `CartEntity` class. Its `addItem()` method creates an instance of `CartItemEntityPrimaryKey` and passes the `CatalogueItemEntity` to it. Given that we remove this constructor, we need to also change this method."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "564f58dc-619a-4ae4-8639-36a042293953",
      "path": "./demo-application-cart/src/main/java/demo/cart/CartEntity.java",
      "from_line": 41,
      "number_of_lines": 7
    },
    {
      "type": "Markdown",
      "id": "814d66fb-e643-4093-9556-414be4baa9e1",
      "contents": [
        "Import the new `CatalogueItemEntity` from the `demo.external.catalogue` package, pass the id instead of the whole instance to the `CartItemEntityPrimaryKey` constructor, and then we need to link the `CatalogueItemEntity` to the created `CartItemEntity`."
      ]
    },
    {
      "type": "Command",
      "id": "70975b40-6e4c-4672-9631-3ed74185052d",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartEntity.java' << EOF",
        "--- a/src/main/java/demo/cart/CartEntity.java",
        "+++ b/src/main/java/demo/cart/CartEntity.java",
        "@@ -1,6 +1,6 @@",
        " package demo.cart;",
        " ",
        "-import demo.catalogue.CatalogueItemEntity;",
        "+import demo.external.catalogue.CatalogueItemEntity;",
        " import jakarta.persistence.CascadeType;",
        " import jakarta.persistence.Entity;",
        " import jakarta.persistence.GeneratedValue;",
        "@@ -41,8 +41,9 @@ public class CartEntity implements Serializable {",
        "     public void addItem(final CatalogueItemEntity item, final int quantity) {",
        "         requireNonNull(item, \"Catalogue item cannot be null\");",
        " ",
        "-        final CartItemEntityPrimaryKey cartItemId = new CartItemEntityPrimaryKey(this, item);",
        "+        final CartItemEntityPrimaryKey cartItemId = new CartItemEntityPrimaryKey(this, item.id());",
        "         final CartItemEntity cartItem = new CartItemEntity(cartItemId, quantity);",
        "+        cartItem.catalogueItemEntity(item);",
        "         items.add(cartItem);",
        "     }",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "7ee1afb5-eee1-496b-8942-a2fcd49a5561",
      "contents": [
        "The `CartEntity`’s class imports look like the following"
      ]
    },
    {
      "type": "DisplayFile",
      "id": "73f88e64-ec94-4d83-81fe-e6692eab811b",
      "path": "./demo-application-cart/src/main/java/demo/cart/CartEntity.java",
      "from_line": 3,
      "number_of_lines": 14
    },
    {
      "type": "Markdown",
      "id": "60e4498c-0f40-44e4-ac8d-fbaaa80414f8",
      "contents": [
        "The `addItem()` method now looks like the following example."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "9a6cb14f-6b7c-45bb-86a4-d89d13210f9d",
      "path": "./demo-application-cart/src/main/java/demo/cart/CartEntity.java",
      "from_line": 41,
      "number_of_lines": 8
    },
    {
      "type": "Markdown",
      "id": "ec6a59bf-64d9-4f3b-8612-7eb71fb5be5e",
      "contents": [
        "This was the last change needed to make the cart service statically independent of the catalogue service. Of course, the cart service will always be dependent on the catalogue service to obtain the catalogue items information. That is the nature of this application as the catalogue service is the source of truth of the catalogue items.",
        "",
        "The proof is in the pudding. We will only find out whether that’s correct once we remove the dependency from the `pom.xml` file and build the project. And that’s exactly what we will do next."
      ]
    },
    {
      "type": "Heading",
      "id": "9ea7564d-2304-4e35-96f4-aaf1f3d8aab4",
      "level": "H5",
      "title": "Step 3: Refactor the POM file to remove the code (static) dependency on the catalogue project"
    },
    {
      "type": "Markdown",
      "id": "7df423e6-a567-4dbb-a7f0-65953788f361",
      "contents": [
        "This should be a simple change. Remove the dependency on the `demo-application-catalogue` from the list of dependencies."
      ]
    },
    {
      "type": "Command",
      "id": "6b5b0c2c-064a-4ff0-85ca-8f2fd49d1f7a",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml",
        "+++ b/pom.xml",
        "@@ -28,13 +28,6 @@",
        "             <version>0.0.1-SNAPSHOT</version>",
        "         </dependency>",
        " ",
        "-        <!-- Catalogue -->",
        "-        <dependency>",
        "-            <groupId>demo</groupId>",
        "-            <artifactId>demo-application-catalogue</artifactId>",
        "-            <version>0.0.1-SNAPSHOT</version>",
        "-        </dependency>",
        "-",
        "         <!-- Web -->",
        "         <dependency>",
        "             <groupId>org.springframework.boot</groupId>",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "d509cf1f-43ed-4c87-a41d-629893ce9609",
      "contents": [
        "Before we sing hurray, let’s compile the project to make sure that it is still statically correct."
      ]
    },
    {
      "type": "Command",
      "id": "253aad6c-6daa-404b-bf4d-3f771deb6b67",
      "commands": [
        "./mvnw clean compile"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "ed945f18-1fb3-41c7-9672-7e6c8261baf8",
      "contents": [
        "Our code compiles, which means that the cart does not statically depend on the catalogue anymore. Are we ready, I hear you asking? I am afraid not.",
        "",
        "If you notice we only compiled the project, but we didn’t run the tests. That’s because we have some work to do in this area, but that’s the topic of the next session."
      ]
    },
    {
      "type": "Heading",
      "id": "6f1ec472-2b85-401b-80c9-6678e4122ff6",
      "level": "H5",
      "title": "Step 4: Refactor the tests so that we can test the cart service independent of the catalogue service"
    },
    {
      "type": "Todo",
      "id": "a5f62e32-a56b-4736-8354-2f3c6b8b2c18",
      "comments": [
        "Switch to contract testing as this can be uses to test messages too."
      ]
    },
    {
      "type": "Markdown",
      "id": "0d5d4fac-d9a9-4231-b7c4-c2e00fe5e25c",
      "contents": [
        "Before the refactoring, the cart service was able to read from the catalogue tables using the `CatalogueItemRepository`. This is now gone, and we need to make REST requests to the catalogue service instead.",
        "",
        "> **How can we now test the cart service and make sure that this works as expected?**",
        ">",
        "> The cart service depends on the catalogue service to work. One can split the tests into unit and integration tests and run the latter group with the whole application running. In our example, we have two services. Once all unit tests pass, we then start the whole application (all microservices) and run the integration tests against the application.",
        ">",
        "> Unfortunately, this is a poor practice, for several reasons.",
        ">",
        "> - The whole application is needed to run the integration tests, which means that the developer needs to get all services locally on their laptop so they can run the integration tests. This can become very cumbersome and developers may end up writing less of such tests with the risk of having core functionality exposed.",
        "> - Network calls can fail and such integration tests tend to be flaky. This issue is usually addressed by retrying the test, but this can have other problems. Say that a request is made which fails due to a network problem. The request may go through and the other service may act on it. Retrying the request may then fail as the service is not in the expected state. To mitigate this issue, the state of the whole application is set before each attempt. Needless to say that this will add unnecessarily delays, discussed next.",
        "> - The integration tests tend to have a high overhead as the whole application needs to be started and the application needs to be primed. This overhead tends to slow the tests down.",
        "> - Such an integration test goes against independent deployability. Say that we make a change in the cart and one of the integration tests that belong to the catalogue service fails. Do we still deploy? This is not a tricky question and the answer is no. We should not go to production while we have failing tests.",
        "",
        "The Achilles’ heel of many microservices is independent testability. As mentioned before, many teams tend to write integration tests that test the whole application.",
        "",
        "A better approach is to provide canned responses to all REST requests made during our tests. For example, when the cart makes the request `GET /catalogue/item/1`, for example, it receives the following JSON response.",
        "",
        "```json",
        "{",
        "  \"id\": 1,",
        "  \"caption\": \"Leather Sofa\",",
        "  \"description\": \"A very nice and comfortable sofa\"",
        "}",
        "```",
        "There are several ways to achieve this. The recommended approach is to use [contract testing](https://martinfowler.com/bliki/ContractTest.html). In contract testing a contract is agreed between the provider and the consumers lining out what it is expected from each end and what the responses to each different request should look like. For example, when the catalogue receives a `GET /catalogue/item/{ID}` request, this service needs to reply with a JSON object that contains three fields, like the one shown below.",
        "",
        "```json",
        "{",
        "  \"id\": 1,",
        "  \"caption\": \"Leather Sofa\",",
        "  \"description\": \"A very nice and comfortable sofa\"",
        "}",
        "```",
        "",
        "Both the consumers and the provider are tested against the same contract and the test will fail if the contract is not honoured by either or. This assures that both sides of the contract conform to the agreed contract and their interaction works as expected without needing each other.",
        "",
        "[Pact](https://pact.io/) is a common tool used in such cases. We will not be using this tool as it requires some setup and I would like to keep things simple.",
        "",
        "[MockServer](https://www.mock-server.com/) is the best next option as it is a very simple tool we can use to mock the catalogue services. This is a neat tool that runs in the same process the tests are running, which means that despite making an HTTP request, this request is going to the same process. Many developers consider this as a unit test given that we control the ins and outs of this test, while others consider these to be integration tests. Nevertheless, these tests are very fast to run and require no additional infrastructure. In other words, we don’t need the whole application to be running to run our test.",
        "",
        "The downside of this approach is that this test is only verifying the cart service. If someone changes the catalogue service (the _producer_) in a way that breaks the contract it has with the cart services (the _consumer_), then this test will not catch that. Also, this library has not changed since January 12<sup>th</sup> 2023.",
        "",
        "Let’s start by adding the test dependencies."
      ]
    },
    {
      "type": "Command",
      "id": "5b514e22-0993-46fb-9961-cc4ba7cc7256",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml",
        "+++ b/pom.xml",
        "@@ -51,5 +51,17 @@",
        "             <artifactId>spring-boot-starter-test</artifactId>",
        "             <scope>test</scope>",
        "         </dependency>",
        "+        <dependency>",
        "+            <groupId>org.mock-server</groupId>",
        "+            <artifactId>mockserver-netty</artifactId>",
        "+            <version>5.15.0</version>",
        "+            <scope>test</scope>",
        "+        </dependency>",
        "+        <dependency>",
        "+            <groupId>org.mock-server</groupId>",
        "+            <artifactId>mockserver-client-java</artifactId>",
        "+            <version>5.15.0</version>",
        "+            <scope>test</scope>",
        "+        </dependency>",
        "     </dependencies>",
        " </project>",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "3ec81aef-4573-42a1-bbaa-2326ed9a86de",
      "contents": [
        "Now with the MockService as a test dependency, let’s configure it to provide canned response."
      ]
    },
    {
      "type": "Command",
      "id": "2e85fc50-f0c2-443f-b05f-e9d893900272",
      "commands": [
        "patch -f -p1 -u './src/test/java/demo/cart/CartControllerTest.java' << EOF",
        "--- a/src/test/java/demo/cart/CartControllerTest.java",
        "+++ b/src/test/java/demo/cart/CartControllerTest.java",
        "@@ -1,7 +1,11 @@",
        " package demo.cart;",
        " ",
        "+import org.junit.jupiter.api.AfterAll;",
        "+import org.junit.jupiter.api.BeforeAll;",
        " import org.junit.jupiter.api.Nested;",
        " import org.junit.jupiter.api.Test;",
        "+import org.mockserver.integration.ClientAndServer;",
        "+import org.mockserver.model.Header;",
        " import org.springframework.beans.factory.annotation.Autowired;",
        " import org.springframework.boot.test.context.SpringBootTest;",
        " import org.springframework.boot.test.web.client.TestRestTemplate;",
        "@@ -12,6 +16,9 @@ import java.util.List;",
        " import java.util.Map;",
        " ",
        " import static org.assertj.core.api.Assertions.assertThat;",
        "+import static org.mockserver.integration.ClientAndServer.startClientAndServer;",
        "+import static org.mockserver.model.HttpRequest.request;",
        "+import static org.mockserver.model.HttpResponse.response;",
        " ",
        " @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)",
        " class CartControllerTest {",
        "@@ -19,6 +26,92 @@ class CartControllerTest {",
        "     @Autowired",
        "     private TestRestTemplate restTemplate;",
        " ",
        "+    private static ClientAndServer catalogueServer;",
        "+",
        "+    @BeforeAll",
        "+    static void startServer() {",
        "+        catalogueServer = startClientAndServer(80);",
        "+",
        "+        catalogueServer.when(request()",
        "+                        .withMethod(\"GET\")",
        "+                        .withPath(\"/catalogue/item/all/1,5\"))",
        "+                .respond(response()",
        "+                        .withStatusCode(200)",
        "+                        .withHeaders(new Header(\"Content-Type\", \"application/json; charset=utf-8\"))",
        "+                        .withBody(\"\"\"",
        "+                                [",
        "+                                  {",
        "+                                    \"id\":1,",
        "+                                    \"caption\":\"Leather Sofa\",",
        "+                                    \"description\":\"A very nice and comfortable sofa\"",
        "+                                  },",
        "+                                  {",
        "+                                    \"id\":5,",
        "+                                    \"caption\":\"LED TV\",",
        "+                                    \"description\":\"A very large TV set, ideal for those who love to binge-watch TV shows\"",
        "+                                  }",
        "+                                ]\"\"\"));",
        "+",
        "+        catalogueServer.when(request()",
        "+                        .withMethod(\"GET\")",
        "+                        .withPath(\"/catalogue/item/all/2,3,4\"))",
        "+                .respond(response()",
        "+                        .withStatusCode(200)",
        "+                        .withHeaders(new Header(\"Content-Type\", \"application/json; charset=utf-8\"))",
        "+                        .withBody(\"\"\"",
        "+                                [",
        "+                                  {",
        "+                                    \"id\":2,",
        "+                                    \"caption\":\"Wooden Table\",",
        "+                                    \"description\":\"A large table ideal for 6 to 8 people\"",
        "+                                  },",
        "+                                  {",
        "+                                    \"id\":3,",
        "+                                    \"caption\":\"Plastic Chair\",",
        "+                                    \"description\":\"A robust plastic chair ideal for children and adults alike\"",
        "+                                  },",
        "+                                  {",
        "+                                    \"id\":4,",
        "+                                    \"caption\":\"Mug\",",
        "+                                    \"description\":\"The ideal way to start the day\"",
        "+                                  }",
        "+                                ]\"\"\"));",
        "+",
        "+        catalogueServer.when(request()",
        "+                        .withMethod(\"GET\")",
        "+                        .withPath(\"/catalogue/item/all/4\"))",
        "+                .respond(response()",
        "+                        .withStatusCode(200)",
        "+                        .withHeaders(new Header(\"Content-Type\", \"application/json; charset=utf-8\"))",
        "+                        .withBody(\"\"\"",
        "+                                [",
        "+                                  {",
        "+                                    \"id\":4,",
        "+                                    \"caption\":\"Mug\",",
        "+                                    \"description\":\"The ideal way to start the day\"",
        "+                                  }",
        "+                                ]\"\"\"));",
        "+",
        "+        catalogueServer.when(request()",
        "+                        .withMethod(\"GET\")",
        "+                        .withPath(\"/catalogue/item/4\"))",
        "+                .respond(response()",
        "+                        .withStatusCode(200)",
        "+                        .withHeaders(new Header(\"Content-Type\", \"application/json; charset=utf-8\"))",
        "+                        .withBody(\"\"\"",
        "+                                {",
        "+                                  \"id\":4,",
        "+                                  \"caption\":\"Mug\",",
        "+                                  \"description\":\"The ideal way to start the day\"",
        "+                                }\"\"\"));",
        "+",
        "+        catalogueServer.when(request()",
        "+                        .withMethod(\"GET\")",
        "+                        .withPath(\"/catalogue/item/10\"))",
        "+                .respond(response()",
        "+                        .withStatusCode(404));",
        "+    }",
        "+",
        "     @Nested",
        "     class GetCartTest {",
        " ",
        "@@ -91,4 +184,9 @@ class CartControllerTest {",
        "             return restTemplate.postForEntity(\"/cart/%d/item/%d\".formatted(cartId, itemId), Map.of(), CartTo.class);",
        "         }",
        "     }",
        "+",
        "+    @AfterAll",
        "+    static void stopServer() {",
        "+        catalogueServer.stop();",
        "+    }",
        " }",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "15ea3080-dae1-4cc6-bcec-adad95b35397",
      "contents": [
        "Note that most of the changes made were simply to configure the canned responses. We didn’t touch the tests themselves. This is great as it shows that our tests are not tightly coupled with the implementation.",
        "",
        "When writing tests, aim to have these as independent of the implementation as possible. Such tests tend to be of high level as in this case, but these tests provide better assurance as they have wider scope and are not as brittle (changes in the implementation do not affect them).",
        "",
        "Build the project and install it in the local repository for the other projects to find it."
      ]
    },
    {
      "type": "Command",
      "id": "ceda93c3-3980-458b-94f2-3a2fb7ca8b26",
      "commands": [
        "./mvnw clean install"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "836a64d0-00db-413f-8eaf-85e7e2a87621",
      "contents": [
        "Great. The application passed all tests which means that now the cart is able to fetch the required information from the catalogue service."
      ]
    },
    {
      "type": "Markdown",
      "id": "287b15bb-8e0b-4443-97e6-8a485eaaa783",
      "contents": [
        "Commit these changes so that you can always revert back to this point."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "1b6521bb-d8b8-41c6-989b-97ccf49576ca",
      "commands": [
        "MESSAGE='Remove (static) code dependency on catalogue component'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'This project was using the catalogue repository (method call) to fetch data.' \\",
        "  --message 'With this change, this project will start communicating to the catalogue component using REST, instead of a method call, despite being in the same monolith.' \\",
        "  --message 'This project is still dependent on the catalogue component and it will not function if the catalogue component is not up and running.' \\",
        "  --message 'This is the first step in disconnecting the components and splitting the monolith into a distributed application.'",
        "git tag --annotate 'v2.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "e9bb9f86-c3bf-4b24-8b21-470047e60262",
      "contents": [
        "The catalogue service is missing one endpoint that is required by the cart service, which we will add before we can test the changes made."
      ]
    },
    {
      "type": "Heading",
      "id": "823ffcb7-f697-4073-9acf-a142505c3620",
      "level": "H5",
      "title": "Step 5: Refactor the catalogue service to expose the required data as an API"
    },
    {
      "type": "Markdown",
      "id": "0ecaa3c6-71bd-4682-aa61-d6d5cecae8d5",
      "contents": [
        "The cart requires a new endpoint to fetch more than one catalogue item with one request from the catalogue service. Let’s start by adding a new endpoint to the `CatalogueItemController` controller (within the `demo-application-catalogue` project).",
        "",
        "We know what the cart services is expecting. Let’s express these requirements as tests first and then add our implementation. This is a test-driven approach where we start with the tests and then work our way backwards and the tests are driven by the cart requirements. In other words we start from the user needs, and walk backwards.",
        "",
        "Out tests are organised in nested test classes. Let’s add a new nested test class (named `GetAllCatalogueItemsTest`) and add our tests there. Our tests need to cover the following cases:",
        "",
        "- Return all catalogue items that match the given ids",
        "- Do not return duplicates if the same id is passed more than once",
        "- Ignore the ids that are not found.",
        "",
        "The last point can be a controversial topic and merits a bit of discussion. Say the catalogue service receives a request for 10 items, 9 of which are found. Should we return a `404`, together with information about which items are found and which are missing? In that case teh caller needs to make another request to get the other 9 or show an error. Eventually, the caller needs to determine how to handle this case. An alternative approach is to simply return all those found and let the caller handle the case of missing item."
      ]
    },
    {
      "type": "Markdown",
      "id": "d0990f88-bec8-4d07-890f-82a3416fd3ef",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "9527b792-38a2-4baa-ba94-c563307434f0",
      "commands": [
        "git tag --annotate 'v2.0' --message 'Before adding new endpoint required by cart'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Command",
      "id": "8b3f7a14-65db-4a72-9d53-be1320c0bc64",
      "commands": [
        "patch -f -p1 -u './src/test/java/demo/catalogue/CatalogueItemControllerTest.java' << EOF",
        "--- a/src/test/java/demo/catalogue/CatalogueItemControllerTest.java",
        "+++ b/src/test/java/demo/catalogue/CatalogueItemControllerTest.java",
        "@@ -5,10 +5,15 @@ import org.junit.jupiter.api.Test;",
        " import org.springframework.beans.factory.annotation.Autowired;",
        " import org.springframework.boot.test.context.SpringBootTest;",
        " import org.springframework.boot.test.web.client.TestRestTemplate;",
        "+import org.springframework.core.ParameterizedTypeReference;",
        "+import org.springframework.http.HttpMethod;",
        " import org.springframework.http.HttpStatus;",
        " import org.springframework.http.ResponseEntity;",
        " ",
        "+import java.util.List;",
        " import java.util.regex.Pattern;",
        "+import java.util.stream.Collectors;",
        "+import java.util.stream.LongStream;",
        " ",
        " import static org.assertj.core.api.Assertions.assertThat;",
        " ",
        "@@ -42,6 +47,59 @@ class CatalogueItemControllerTest {",
        "         }",
        "     }",
        " ",
        "+    @Nested",
        "+    class GetAllCatalogueItemsTest {",
        "+",
        "+        @Test",
        "+        void returnTheCatalogueItemsWithTheGivenExistingId() {",
        "+            final ResponseEntity<List<CatalogueItemTo>> response = getCatalogueItemsWithId(1, 2, 3, 4);",
        "+            assertThat(response.getStatusCode())",
        "+                    .isEqualTo(HttpStatus.OK);",
        "+            assertThat(response.getBody()) /* TODO: May need to sort the result */",
        "+                    .isEqualTo(List.of(",
        "+                            new CatalogueItemTo(1L, \"Leather Sofa\", \"A very nice and comfortable sofa\"),",
        "+                            new CatalogueItemTo(2L, \"Wooden Table\", \"A large table ideal for 6 to 8 people\"),",
        "+                            new CatalogueItemTo(3L, \"Plastic Chair\", \"A robust plastic chair ideal for children and adults alike\"),",
        "+                            new CatalogueItemTo(4L, \"Mug\", \"The ideal way to start the day\")",
        "+                    ));",
        "+        }",
        "+",
        "+        @Test",
        "+        void returnTheSameItemOnceEvenWhenItsIdIsProvidedMultipleTimes() {",
        "+            final ResponseEntity<List<CatalogueItemTo>> response = getCatalogueItemsWithId(1, 1, 1, 1);",
        "+            assertThat(response.getStatusCode())",
        "+                    .isEqualTo(HttpStatus.OK);",
        "+            assertThat(response.getBody())",
        "+                    .isEqualTo(List.of(",
        "+                            new CatalogueItemTo(1L, \"Leather Sofa\", \"A very nice and comfortable sofa\")",
        "+                    ));",
        "+        }",
        "+",
        "+        @Test",
        "+        void returnOnlyTheFoundWhenGivenAnIdThatDoesNotExists() {",
        "+            final ResponseEntity<List<CatalogueItemTo>> response = getCatalogueItemsWithId(1, 10);",
        "+            assertThat(response.getStatusCode())",
        "+                    .isEqualTo(HttpStatus.OK);",
        "+            assertThat(response.getBody())",
        "+                    .isEqualTo(List.of(new CatalogueItemTo(1L, \"Leather Sofa\", \"A very nice and comfortable sofa\")));",
        "+        }",
        "+",
        "+        @Test",
        "+        void returnEmptyListWhenGivenAnIdThatDoesNotExists() {",
        "+            final ResponseEntity<List<CatalogueItemTo>> response = getCatalogueItemsWithId(10);",
        "+            assertThat(response.getStatusCode())",
        "+                    .isEqualTo(HttpStatus.OK);",
        "+            assertThat(response.getBody())",
        "+                    .isEqualTo(List.of());",
        "+        }",
        "+",
        "+        private ResponseEntity<List<CatalogueItemTo>> getCatalogueItemsWithId(final long... ids) {",
        "+            final String stringIds = LongStream.of(ids).mapToObj(String::valueOf).collect(Collectors.joining(\",\"));",
        "+            final ParameterizedTypeReference<List<CatalogueItemTo>> type = new ParameterizedTypeReference<>() {};",
        "+            return restTemplate.exchange(\"/catalogue/item/all/%s\".formatted(stringIds), HttpMethod.GET, null, type);",
        "+        }",
        "+    }",
        "+",
        "     @Nested",
        "     class AddCatalogueItemTest {",
        "EOF"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "62a01096-2d91-4c92-a5ee-a3b2337972a4",
      "contents": [
        "If we run the tests, these will fail as we have not yet implemented the endpoint. It is always a good practice to start with a failing test as this verifies that the tests do actually run and fail as expected."
      ]
    },
    {
      "type": "Command",
      "id": "f28f05fc-20f3-4d15-903e-64f7833aaec3",
      "commands": [
        "./mvnw clean test"
      ],
      "should_fail": true,
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "2b49ffff-c775-44c6-a93e-0eb6b93f1e5b",
      "contents": [
        "The tests failed as expected.",
        "",
        "Let’s add the new endpoint to the `CatalogueItemController` controller."
      ]
    },
    {
      "type": "Command",
      "id": "50ea1c91-5423-4f20-a72a-1e3772dd57b5",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/catalogue/CatalogueItemController.java' << EOF",
        "--- a/src/main/java/demo/catalogue/CatalogueItemController.java",
        "+++ b/src/main/java/demo/catalogue/CatalogueItemController.java",
        "@@ -9,6 +9,9 @@ import org.springframework.web.bind.annotation.RequestMapping;",
        " import org.springframework.web.bind.annotation.RestController;",
        " ",
        " import java.net.URI;",
        "+import java.util.List;",
        "+import java.util.Set;",
        "+import java.util.stream.Collectors;",
        " ",
        " import static java.util.Objects.requireNonNull;",
        " ",
        "@@ -30,6 +33,14 @@ public class CatalogueItemController {",
        "                 .orElseGet(() -> ResponseEntity.notFound().build());",
        "     }",
        " ",
        "+    @GetMapping(\"/all/{id}\")",
        "+    public ResponseEntity<List<CatalogueItemTo>> getAll(@PathVariable(value = \"id\") final Set<Long> ids) {",
        "+        return ResponseEntity.ok(",
        "+                service.findAllById(ids).stream()",
        "+                        .map(CatalogueItemTo::of)",
        "+                        .collect(Collectors.toList()));",
        "+    }",
        "+",
        "     @PostMapping()",
        "     public ResponseEntity<CatalogueItemTo> add(@RequestBody final NewCatalogueItemTo item) {",
        "         return item.toEntity()",
        "EOF"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "3dd89e9d-0a79-4977-ac9a-443d9c049c40",
      "contents": [
        "The service class, `CatalogueItemService`, does not have the `findAllById()` method required by the controller. Let’s add this method."
      ]
    },
    {
      "type": "Command",
      "id": "c2dc103c-d735-4fd4-ba0f-bde319b495ed",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/catalogue/CatalogueItemService.java' << EOF",
        "--- a/src/main/java/demo/catalogue/CatalogueItemService.java",
        "+++ b/src/main/java/demo/catalogue/CatalogueItemService.java",
        "@@ -2,7 +2,9 @@ package demo.catalogue;",
        " ",
        " import org.springframework.stereotype.Service;",
        " ",
        "+import java.util.List;",
        " import java.util.Optional;",
        "+import java.util.Set;",
        " ",
        " import static java.util.Objects.requireNonNull;",
        " ",
        "@@ -19,6 +21,10 @@ public class CatalogueItemService {",
        "         return repository.findById(id);",
        "     }",
        " ",
        "+    public List<CatalogueItemEntity> findAllById(final Set<Long> id) {",
        "+        return repository.findAllById(id);",
        "+    }",
        "+",
        "     public CatalogueItemEntity add(final CatalogueItemEntity entity) {",
        "         requireNonNull(entity, \"Entity cannot be null\");",
        "         return repository.save(entity);",
        "EOF"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "98544cf4-f4d6-4e05-8235-244fe484ac53",
      "contents": [
        "That was not very complicated. The tests were more involved than the actual implementation. Spring carried most of the weight. Let’s run the tests again."
      ]
    },
    {
      "type": "Command",
      "id": "69f05730-9047-43ea-a84c-3cb9da1fb633",
      "commands": [
        "./mvnw clean install"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "782545f5-bfdb-404a-9b3c-bd2aaddb785e",
      "contents": [
        "This time the tests passed."
      ]
    },
    {
      "type": "Markdown",
      "id": "774baa84-b1b8-4b78-ab1c-58ed8aafd44e",
      "contents": [
        "Commit these changes so that you can always revert back to this point."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "fe9ea256-e89e-4254-b47c-94032a0b7b5f",
      "commands": [
        "MESSAGE='Add new endpoint required by cart'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'The cart does not statically depend on this project anymore.' \\",
        "  --message 'With this change, this project had to add a new REST endpoint that returns a list catalogue items for the given ids.' \\",
        "  --message 'Despite this change, this project is still deployed as a single JAR file within the main application.' \\",
        "  --message 'This is the second step in disconnecting the components and splitting the monolith into a distributed application.'",
        "git tag --annotate 'v2.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "d430f6ec-e739-428f-982e-d6f01bb66c9d",
      "contents": [
        "The catalogue service is ready too, and we can now rebuild the application and try the new application. that’s what we will do in the next and final step in this refactoring."
      ]
    },
    {
      "type": "Heading",
      "id": "a99adbdf-ba57-41ae-9262-d59b69cb6746",
      "level": "H5",
      "title": "Step 7: Try the new application"
    },
    {
      "type": "Markdown",
      "id": "941949f1-6a33-4a93-a33b-f120b9923a0a",
      "contents": [
        "Both the catalogue and the cart projects have been updated. The catalogue exposes a new endpoint that returns a list if catalogue items and the cart uses the endpoints exposed by the catalogue project to fetch the catalogue items information.",
        "",
        "Build the `demo-application` application."
      ]
    },
    {
      "type": "Command",
      "id": "d1f72a2b-19ce-4cd5-9962-977d9b7fdf7b",
      "commands": [
        "./mvnw clean verify"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "c77d16e6-ae37-4c6a-81a0-340903dd456c",
      "contents": [
        "The new application is now ready.",
        "",
        "Let’s start the revers proxy, so that we run our tests through the proxy. While we can run the tests against the application directly, it is good to try this in the same way these will be used in production (or as close to as possible)."
      ]
    },
    {
      "type": "Command",
      "id": "0b52216e-999b-4bc8-8646-be2e94cd50f3",
      "commands": [
        "docker run \\",
        "  --rm \\",
        "  --detach \\",
        "  --name 'demo-application-reverse-proxy' \\",
        "  --publish 80:80 \\",
        "  'demo-application-reverse-proxy:v1'",
        "",
        "# Wait for Nginx to start",
        "# The reverse proxy is configured to only redirect to the cart and catalogue endpoints, thus any other requests will yield a 404",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost/')\" -ne '404' ]; do echo 'Waiting for the reverse proxy to start'; sleep 1; done"
      ],
      "on_failure_commands": [
        "docker cp demo-application-reverse-proxy:/etc/nginx/conf.d/default.conf ./default-error.conf",
        "docker stop demo-application-reverse-proxy"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "fd93d102-351a-4388-b9f6-2655713eeb1d",
      "contents": [
        "Try the application."
      ]
    },
    {
      "type": "Markdown",
      "id": "a638e4b6-d7bc-4c1d-9fef-50986cad4b9e",
      "contents": [
        "Try the cart component, that now that is statically disconnected from the catalogue component."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "6376795a-c286-4491-9151-447f76e6f9c1",
      "commands": [
        "# Start the application in the background",
        "java -jar './demo/demo-application-0.0.1-SNAPSHOT.jar' > './demo/output.txt' 2>&1 &",
        "",
        "# Wait for the application to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost/cart/1')\" -ne '200' ]; do echo 'Waiting for the application to start'; sleep 1; done"
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "4dd130ef-b35e-4fcd-a4a1-797bf3995f64",
      "contents": [
        "This starts our application in the background and waits for it to start.",
        "",
        "Make a few requests to the catalogue items endpoint. We have the following catalogue items in the database.",
        "",
        "| `id` | `caption`     | `description`                                                         |",
        "| ---: | ------------- | --------------------------------------------------------------------- |",
        "|    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "|    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "|    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "|    4 | Mug           | The ideal way to start the day                                        |",
        "|    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "6cfa25f9-f407-40c1-9d37-635e77b69851",
      "commands": [
        "curl --silent 'http://localhost/catalogue/item/1' | jq"
      ],
      "output": {
        "caption": "The catalogue item with id `1`",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "b6ec0259-0d42-4a99-934e-597218ce5f01",
      "contents": [
        "The database has three carts, as shown in the following tables.",
        "",
        "| `cart_id` | `item_id` | `caption`     | `quantity` |",
        "| --------: | --------: | ------------- | ---------: |",
        "|         1 |         1 | Leather Sofa  |          1 |",
        "|         1 |         5 | LED TV        |          1 |",
        "|         2 |         2 | Wooden Table  |          1 |",
        "|         2 |         3 | Plastic Chair |          6 |",
        "|         3 |         4 | Mug           |          4 |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "b3a88a5c-7b17-46bb-9458-49e701d215be",
      "commands": [
        "curl --silent 'http://localhost/cart/1' | jq"
      ],
      "output": {
        "caption": "The cart with id `1` and its items",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "c892cb5b-00e9-46fc-b688-c2015b456d93",
      "contents": [
        "Stop the application once ready."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "bcdf6533-681b-4832-aee6-f09ad05e93c6",
      "commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "1baeed5c-1b5c-4d1c-85f5-e681aff74c72",
      "contents": [
        "All works as expected. Let’s stop the revers proxy."
      ]
    },
    {
      "type": "Command",
      "id": "842ab6c3-25b4-4592-8b45-4a8c16f72c90",
      "commands": [
        "docker stop demo-application-reverse-proxy"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "f94e7454-b389-48dc-b13b-bcb4769d0f50",
      "contents": [
        "The cart does not have (static) code dependency on the catalogue anymore. It simply fetches the data it needs through the catalogue REST API. The catalogue component is still part of the monolithic application, but now it can be safely extracted into a standalone service. that’s the topic of the next section."
      ]
    },
    {
      "type": "Heading",
      "id": "0edd2900-70bd-46d6-8ffe-11ae110ccf5b",
      "level": "H3",
      "title": "Extract the catalogue component as a standalone service"
    },
    {
      "type": "Markdown",
      "id": "1a795ba2-a6e1-483f-87dc-f0c1685f0039",
      "contents": [
        "Extracting the catalogue component as a standalone service requires the following:",
        "",
        "1. Make the catalogue a standalone service.",
        "2. Redirect the catalogue traffic to the new catalogue service.",
        "3. Remove the catalogue from the main application.",
        "4. Try the new application."
      ]
    },
    {
      "type": "Heading",
      "id": "3ccabe90-c523-47b1-87a5-2659b818f64a",
      "level": "H4",
      "title": "Step 1: Make the catalogue a standalone service"
    },
    {
      "type": "Markdown",
      "id": "02f3e448-aefa-4fd7-b85e-6929c2e19404",
      "contents": [
        "The cart project does not have any static dependencies on the catalogue project anymore, thus the catalogue component can be hosted anywhere. It can be extracted into an independent service. This is easier said than done.",
        "",
        "The catalogue service needs a database. In this example we have a simple in-memory database that can be easily migrated. that’s not necessarily the case in a real life project.",
        "",
        "To make the catalogue project a standalone service, we will start by adding a main class. The catalogue project will not be included as part of the main application anymore, thus it needs to be able to start."
      ]
    },
    {
      "type": "Markdown",
      "id": "6ed8bdfc-4eab-4797-8c00-239582dc3e9c",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "1a44dc95-ca44-4dca-bc00-28285370caf5",
      "commands": [
        "git tag --annotate 'v3.0' --message 'Before making catalogue a standalone service'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "d2b6a838-6a15-4ea6-85c4-332ba557d4ed",
      "contents": [
        "We already have a main class, which is in the test source directory. We can simply use this one. That was convenient!!"
      ]
    },
    {
      "type": "Command",
      "id": "6838b8bc-c8fd-4e0b-bcfe-f2a8c7e0b6ae",
      "commands": [
        "mv './src/test/java/demo/Main.java' './src/main/java/demo/Main.java'"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "311df178-f94e-4a4a-ba39-9083d796ee49",
      "contents": [
        "We need (not really needed, but it is nice to have) to have a banner for the new catalogue service."
      ]
    },
    {
      "type": "Command",
      "id": "6dc3a14c-23a5-4454-824c-cd0316401a03",
      "commands": [
        "mkdir -p './src/main/resources/'"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Command",
      "id": "29088273-12d5-407c-a314-db9eb6705d15",
      "commands": [
        "cat << EOF > './src/main/resources/banner.txt'",
        "██████╗ ██╗███████╗████████╗██████╗ ██╗██████╗ ██╗   ██╗████████╗███████╗██████╗      ██╗ ██████╗ █████╗ ████████╗ █████╗ ██╗      ██████╗  ██████╗ ██╗   ██╗███████╗██╗",
        "██╔══██╗██║██╔════╝╚══██╔══╝██╔══██╗██║██╔══██╗██║   ██║╚══██╔══╝██╔════╝██╔══██╗    ██╔╝██╔════╝██╔══██╗╚══██╔══╝██╔══██╗██║     ██╔═══██╗██╔════╝ ██║   ██║██╔════╝╚██╗",
        "██║  ██║██║███████╗   ██║   ██████╔╝██║██████╔╝██║   ██║   ██║   █████╗  ██║  ██║    ██║ ██║     ███████║   ██║   ███████║██║     ██║   ██║██║  ███╗██║   ██║█████╗   ██║",
        "██║  ██║██║╚════██║   ██║   ██╔══██╗██║██╔══██╗██║   ██║   ██║   ██╔══╝  ██║  ██║    ██║ ██║     ██╔══██║   ██║   ██╔══██║██║     ██║   ██║██║   ██║██║   ██║██╔══╝   ██║",
        "██████╔╝██║███████║   ██║   ██║  ██║██║██████╔╝╚██████╔╝   ██║   ███████╗██████╔╝    ╚██╗╚██████╗██║  ██║   ██║   ██║  ██║███████╗╚██████╔╝╚██████╔╝╚██████╔╝███████╗██╔╝",
        "╚═════╝ ╚═╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝╚═════╝  ╚═════╝    ╚═╝   ╚══════╝╚═════╝      ╚═╝ ╚═════╝╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝╚══════╝ ╚═════╝  ╚═════╝  ╚═════╝ ╚══════╝╚═╝",
        "Distributed Application using Synchronous Communication (Http/REST)",
        "EOF"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "3276157f-a669-4611-b5ca-0d2e396d3316",
      "contents": [
        "We need to create the application properties and provide a different default port than the one used by the main application (port `8080`). We cannot have two applications listening on the same port on the same machine."
      ]
    },
    {
      "type": "Command",
      "id": "47d4f7f9-0d50-4805-92e7-5473d2b9d309",
      "commands": [
        "cat << EOF > './src/main/resources/application.properties'",
        "spring.application.name=Catalogue",
        "server.port=8081",
        "EOF"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "ef7adbd6-363e-444b-a055-7894c018fee2",
      "contents": [
        "The catalogue project will manage its own database, thus it cannot reply on the `demo-application-db-migration` project anymore.",
        "",
        "Remove dependency on the `demo-application-db-migration` project, as now this application will own its database, add the FlywayDB and H2 dependencies."
      ]
    },
    {
      "type": "Command",
      "id": "c9e4707f-fcdd-479b-9869-4084d0ded331",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml",
        "+++ b/pom.xml",
        "@@ -29,9 +29,12 @@",
        " ",
        "         <!-- Database -->",
        "         <dependency>",
        "-            <groupId>demo</groupId>",
        "-            <artifactId>demo-application-db-migration</artifactId>",
        "-            <version>0.0.1-SNAPSHOT</version>",
        "+            <groupId>com.h2database</groupId>",
        "+            <artifactId>h2</artifactId>",
        "+        </dependency>",
        "+        <dependency>",
        "+            <groupId>org.flywaydb</groupId>",
        "+            <artifactId>flyway-core</artifactId>",
        "         </dependency>",
        "         <dependency>",
        "             <groupId>org.springframework.boot</groupId>",
        "EOF"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "7e670308-c184-4070-909d-b3fdbfaab7e9",
      "contents": [
        "The catalogue `pom.xml` file should have the following dependencies."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "6deef629-39a2-4760-88a8-b2a9fa505095",
      "path": "./demo-application-catalogue/pom.xml",
      "from_line": 23,
      "number_of_lines": 28
    },
    {
      "type": "Markdown",
      "id": "5b229559-e05e-454c-84e8-cba2d6e2ff1b",
      "contents": [
        "We have to do one more change to the catalogue `pom.xml` file, that is, include the Spring Boot Maven plugin. This project will be running as a standalone service and this it needs all the dependencies available at runtime."
      ]
    },
    {
      "type": "Command",
      "id": "989ccb01-4a6b-4a06-a02c-cd0290b608a1",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml",
        "+++ b/pom.xml",
        "@@ -48,4 +48,13 @@",
        "             <scope>test</scope>",
        "         </dependency>",
        "     </dependencies>",
        "+",
        "+    <build>",
        "+        <plugins>",
        "+            <plugin>",
        "+                <groupId>org.springframework.boot</groupId>",
        "+                <artifactId>spring-boot-maven-plugin</artifactId>",
        "+            </plugin>",
        "+        </plugins>",
        "+    </build>",
        " </project>",
        "EOF"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "f2468e13-3a25-458f-b9dd-37d0bc5de6e7",
      "contents": [
        "The catalogue `pom.xml` file should have the following plugins."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "30022ff0-bba5-4d34-a68c-43b697bcee93",
      "path": "./demo-application-catalogue/pom.xml",
      "from_line": 52,
      "number_of_lines": 8
    },
    {
      "type": "Markdown",
      "id": "2f324a01-b918-4aa2-b592-116ab07530f1",
      "contents": [
        "Create the database migration scripts.",
        "",
        "Note that in this project is not migrating the data, as this is a topic on its own. We will revise this example to also include the data migration."
      ]
    },
    {
      "type": "Command",
      "id": "301c1931-83e7-43ce-9c9c-0dbfa4770b46",
      "commands": [
        "mkdir -p './src/main/resources/db/migration'"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Command",
      "id": "5169da56-aee0-427c-b94c-fd5981d11565",
      "commands": [
        "cat << EOF > './src/main/resources/db/migration/V1__create_catalogue.sql'",
        "CREATE TABLE catalogue_item (",
        "  id          INT AUTO_INCREMENT NOT NULL,",
        "  caption     VARCHAR(128) NOT NULL,",
        "  description TEXT NOT NULL,",
        "  PRIMARY KEY (id)",
        ");",
        "",
        "INSERT INTO catalogue_item (caption, description) VALUES",
        "  ('Leather Sofa',  'A very nice and comfortable sofa'),",
        "  ('Wooden Table',  'A large table ideal for 6 to 8 people'),",
        "  ('Plastic Chair', 'A robust plastic chair ideal for children and adults alike'),",
        "  ('Mug',           'The ideal way to start the day'),",
        "  ('LED TV',        'A very large TV set, ideal for those who love to binge-watch TV shows');",
        "EOF"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "97f766bd-c8b7-4ac9-8133-17a463d7f6ac",
      "contents": [
        "The main application will not be needing this projects anymore, thus it can be removed from the local Maven repository. While this is not strictly needed, it ensures that no other application use it by mistake."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "fbe67569-a893-4b86-abb7-61ac55fa9545",
      "commands": [
        "rm -rf \"${HOME}/.m2/repository/demo/demo-application-catalogue\""
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Markdown",
      "id": "a5bc5cab-4433-4d25-acb3-ab6c6101c472",
      "contents": [
        "Build the catalogue service"
      ]
    },
    {
      "type": "Command",
      "id": "8dae2fcd-a51b-4dd1-845f-8c8210375294",
      "commands": [
        "./mvnw clean verify"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "e27bce56-2a5a-4582-bdd7-260182385851",
      "contents": [
        "This will create a standalone JAR file that we can use to run the catalogue service."
      ]
    },
    {
      "type": "Command",
      "id": "ed95f924-e09f-4897-a898-edd4ca5fae5a",
      "commands": [
        "tree -L 1 --prune './demo'"
      ],
      "output": {
        "caption": "The catalogue application JAR files"
      },
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "aee549ac-3e55-4dd9-abda-c8d4abeb88aa",
      "contents": [
        "Let’s try the catalogue service."
      ]
    },
    {
      "type": "Command",
      "id": "160daf2d-db8a-4324-b193-e2b371fde415",
      "commands": [
        "# Start the application in the background",
        "java -jar './demo/demo-application-catalogue-0.0.1-SNAPSHOT.jar' > './demo/catalogue-output.txt' 2>&1 &",
        "",
        "# Wait for the application to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:8081/catalogue/item/1')\" -ne '200' ]; do echo 'Waiting for the catalogue application to start'; sleep 1; done"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "c56020be-2dfb-4ff3-aace-85063739c6bb",
      "contents": [
        "This starts our catalogue service in the background and waits for it to start.",
        "",
        "Make a few requests to the catalogue items endpoint. We have the following catalogue items in the database.",
        "",
        "| `id` | `caption`     | `description`                                                         |",
        "| ---: | ------------- | --------------------------------------------------------------------- |",
        "|    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "|    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "|    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "|    4 | Mug           | The ideal way to start the day                                        |",
        "|    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "6bacd5d1-0106-40e1-ac89-b551eb394be3",
      "commands": [
        "curl --silent 'http://localhost:8081/catalogue/item/1' | jq"
      ],
      "output": {
        "caption": "The catalogue item with id `1`",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "a04fd19f-20f8-45c0-8c2d-a1869f498511",
      "contents": [
        "Stop the catalogue service once ready."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "e80ebe7d-62a3-4b98-93af-97e7d4f4d344",
      "commands": [
        "# This command was failing!!",
        "# PID=\"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "# echo \"Stopping ${PID}\"",
        "# kill \"${PID}\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "f5b1ba37-b4aa-451c-95f3-176e0be8ed35",
      "contents": [
        "The catalogue service works well, and we are ready to remove this from the main application."
      ]
    },
    {
      "type": "Markdown",
      "id": "4d516edc-78a9-444b-83a6-3739723a6043",
      "contents": [
        "Commit these changes so that you can always revert back to this point."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "6e892b6d-fef1-4c43-9b6b-378c7e570cf5",
      "commands": [
        "MESSAGE='Make catalogue a standalone service'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'Moves this project out from the demo-application and makes it a standalone service.' \\",
        "  --message 'This project now owns its database and all communication comes through its public APIs.' \\",
        "  --message 'This is the second step in disconnecting the components and splitting the monolith into a distributed application.'",
        "git tag --annotate 'v3.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "1a0d4156-a2de-48da-a24a-99d760cec03f",
      "contents": [
        "Before we remove the catalogue service from the main application, we need to redirect the catalogue traffic to the new catalogue service, which is the topic of the next section."
      ]
    },
    {
      "type": "Heading",
      "id": "f5de046b-b3d1-404b-ad8e-c8c675807a85",
      "level": "H4",
      "title": "Step 2: Redirect the catalogue traffic to the new catalogue service"
    },
    {
      "type": "Markdown",
      "id": "cf3b137b-0ece-4ef2-90dc-55e4d3c83806",
      "contents": [
        "The reverse proxy is redirecting all traffic to the same application, as it is configured in the `default.conf`."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "a172e1af-da32-4e15-9572-0e1c3da187e5",
      "path": "./demo-application-reverse-proxy/default.conf"
    },
    {
      "type": "Markdown",
      "id": "080d328e-5c5d-405f-bc99-3ebb93b324c3",
      "contents": [
        "We need to change the `/catalogue` redirection to point to the new standalone catalogue service that is now listening on port `8081`."
      ]
    },
    {
      "type": "Markdown",
      "id": "3a2c6acc-bb86-4182-affd-28c1aff3daf9",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "da0be44e-763b-42ad-ae10-cc72aec50080",
      "commands": [
        "git tag --annotate 'v2.0' --message 'Before redirecting the traffic to the new catalogue service'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "7e9da8c8-8ec4-4349-bc39-0215f35a55a3",
      "contents": [
        "Update the reverse proxy to redirect the traffic to the new service on port `8081`."
      ]
    },
    {
      "type": "Command",
      "id": "fb8536ac-e385-4ede-99e8-47fa1cc2c054",
      "commands": [
        "patch -f -p1 -u './default.conf' << EOF",
        "--- a/default.conf",
        "+++ b/default.conf",
        "@@ -11,7 +11,7 @@ server {",
        "     }",
        " ",
        "     location /catalogue {",
        "-        proxy_pass http://host.docker.internal:8080/catalogue;",
        "+        proxy_pass http://host.docker.internal:8081/catalogue;",
        "         proxy_set_header Host \\$host;",
        "         proxy_set_header X-Real-IP \\$remote_addr;",
        "         proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;",
        "EOF"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "6f20aab8-028a-4557-a47d-468f01e25c16",
      "contents": [
        "Rebuild the reverse proxy container and use another tag (`v2`)."
      ]
    },
    {
      "type": "Command",
      "id": "33a57214-33dd-405a-81d1-2f6e4042aeb9",
      "commands": [
        "docker build \\",
        "  --file 'Dockerfile' \\",
        "  --tag 'demo-application-reverse-proxy:v2' \\",
        "  --load \\",
        "."
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "3d09ce93-71c1-42bc-b800-45f1e2a3969c",
      "contents": [
        "Commit these changes so that you can always revert back to this point."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "18e3bde0-bb26-4cf9-9cff-1b7833abc710",
      "commands": [
        "MESSAGE='Redirect the traffic to the new catalogue service'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'The catalogue project is now a standalone service and thus catalogue traffic needs to be routed to this application.' \\",
        "  --message 'This is the second step in disconnecting the components and splitting the monolith into a distributed application.'",
        "git tag --annotate 'v2.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "709e1069-96f1-4e68-98c2-0702775c5d18",
      "contents": [
        "The proxy configuration is updated and the catalogue traffics is now redirected to the new catalogue service listening on port `8081`. We can now proceed and remove the catalogue component from the main application."
      ]
    },
    {
      "type": "Heading",
      "id": "f2630bc4-2254-446d-80fc-ff5f4a25b9e1",
      "level": "H4",
      "title": "Step 3: Remove the catalogue from the main application"
    },
    {
      "type": "Markdown",
      "id": "3641d6e0-6af0-4710-8ea3-43a23b8f89d4",
      "contents": [
        "The main application still had a dependency on the catalogue project and the database migration project still has the catalogue tables. Let’s start from the database migration project and remove the catalogue tables first, and then we will remove the dependency from the `pom.xml` file."
      ]
    },
    {
      "type": "Heading",
      "id": "41686c3f-d465-46b4-8b12-980f1901315e",
      "level": "H5",
      "title": "Step 1: Remove catalogue from the main application database"
    },
    {
      "type": "Markdown",
      "id": "7f3b41b1-4747-4208-a553-d8d86fbf03de",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ]
    },
    {
      "type": "Command",
      "id": "f2be1390-ca81-467e-bed4-ef06e531ff0b",
      "commands": [
        "git tag --annotate 'v2.0' --message 'Before removing the catalogue'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-db-migration"
    },
    {
      "type": "Markdown",
      "id": "f0724741-e4a9-455e-b2b5-2f1396cd48f3",
      "contents": [
        "Remove the database dependency between the cart and catalogue and drop the catalogue table. We will do this by adding a new database migration script."
      ]
    },
    {
      "type": "Command",
      "id": "75fb8db6-7c69-47e9-b8ee-18c1f0cdc219",
      "commands": [
        "cat << EOF > './src/main/resources/db/migration/V3__drop_catalogue.sql'",
        "ALTER TABLE cart_item DROP CONSTRAINT fk_cart_item_catalogue_item_id;",
        "DROP TABLE catalogue_item;",
        "EOF"
      ],
      "working_dir": "demo-application-db-migration"
    },
    {
      "type": "Markdown",
      "id": "70d6dcd7-2940-4d9d-8f22-cbb6d8b60378",
      "contents": [
        "Build the database migration project"
      ]
    },
    {
      "type": "Command",
      "id": "1c25842b-2b17-478d-8f55-72da49ebf282",
      "commands": [
        "./mvnw clean install"
      ],
      "working_dir": "demo-application-db-migration"
    },
    {
      "type": "Markdown",
      "id": "e4d87dbe-3250-478e-a645-6188dd48ca99",
      "contents": [
        "Commit these changes so that you can always revert back to this point."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "c0a24d94-202f-4817-b815-84430bf8c9fb",
      "commands": [
        "MESSAGE='Remove the catalogue'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'Remove the database dependency between the cart and catalogue tables and drop the catalogue table.' \\",
        "  --message 'This is the second step in disconnecting the components and splitting the monolith into a distributed application.'",
        "git tag --annotate 'v2.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-db-migration"
    },
    {
      "type": "Heading",
      "id": "96f67afd-e376-4cd8-838a-b2cd44d73b3b",
      "level": "H5",
      "title": "Step 2: Remove the catalogue from the list of dependencies"
    },
    {
      "type": "Markdown",
      "id": "34150fde-5977-4fed-ba4c-8ba373f7f170",
      "contents": [
        "The main application’s database does not have a reference to the catalogue data anymore. We can now turn our attention to the `pom.xml` file."
      ]
    },
    {
      "type": "Markdown",
      "id": "06f63b6d-f169-4f63-840f-f557883b1df5",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ]
    },
    {
      "type": "Command",
      "id": "f6e05eb9-eb55-41e1-82de-c364f19cb761",
      "commands": [
        "git tag --annotate 'v9.0' --message 'Before removing the catalogue dependency'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "8b5b916b-eb36-4c03-a33c-a79c3a867e9d",
      "contents": [
        "Remove the code dependency between the `demo-application` and the `demo-application-catalogue`."
      ]
    },
    {
      "type": "Command",
      "id": "2e3cddb6-2928-4ed6-9c92-46b65c462269",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml",
        "+++ b/pom.xml",
        "@@ -21,13 +21,6 @@",
        "     </properties>",
        " ",
        "     <dependencies>",
        "-        <!-- Catalogue -->",
        "-        <dependency>",
        "-            <groupId>demo</groupId>",
        "-            <artifactId>demo-application-catalogue</artifactId>",
        "-            <version>0.0.1-SNAPSHOT</version>",
        "-        </dependency>",
        "-",
        "         <!-- Cart -->",
        "         <dependency>",
        "             <groupId>demo</groupId>",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "b1eb4c4b-e9c3-4231-b0eb-e547e59d8fd1",
      "contents": [
        "Build the project"
      ]
    },
    {
      "type": "Command",
      "id": "20b5097e-32f7-4839-8ac2-dfc76e4a3e56",
      "commands": [
        "./mvnw clean verify"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Heading",
      "id": "c0f0a627-766a-4cc5-afbc-9034ad7008b5",
      "level": "H4",
      "title": "Step 4: Try the new application"
    },
    {
      "type": "Markdown",
      "id": "25a9a8e1-1045-4010-ac67-08c6e41c6576",
      "contents": [
        "Start the new version (`v2`) of the reverse proxy"
      ]
    },
    {
      "type": "Command",
      "id": "92c2224b-5599-4ff5-a0ce-5b09fa032287",
      "commands": [
        "docker run \\",
        "  --rm \\",
        "  --detach \\",
        "  --name 'demo-application-reverse-proxy' \\",
        "  --publish 80:80 \\",
        "  'demo-application-reverse-proxy:v2'",
        "",
        "# Wait for Nginx to start",
        "# The reverse proxy is configured to only redirect to the cart and catalogue endpoints, thus any other requests will yield a 404",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost/')\" -ne '404' ]; do echo 'Waiting for the reverse proxy to start'; sleep 1; done"
      ],
      "on_failure_commands": [
        "docker cp demo-application-reverse-proxy:/etc/nginx/conf.d/default.conf ./default-error.conf",
        "docker stop demo-application-reverse-proxy"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "e9a62e29-0792-4699-9e40-788219f42f7a",
      "contents": [
        "We need to start two JAR files, the main application and the catalogue service. For convenience, we will copy the JAR files from their respective directories into one place so that we can start these easily and try our application."
      ]
    },
    {
      "type": "Command",
      "id": "7c7b0f88-b792-47ae-b5b8-fab86e1b6d1d",
      "commands": [
        "# Copy the JAR files into the same location for convenience",
        "rm -rf './demo'",
        "mkdir './demo'",
        "cp '../demo-application/target/demo-application-0.0.1-SNAPSHOT.jar' './demo'",
        "cp '../demo-application-catalogue/target/demo-application-catalogue-0.0.1-SNAPSHOT.jar' './demo'",
        "",
        "# Start the catalogue application in the background and wait for it to be ready",
        "java -jar './demo/demo-application-catalogue-0.0.1-SNAPSHOT.jar' > './demo/catalogue-output.txt' 2>&1 &",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost/catalogue/item/1')\" -ne '200' ]; do echo 'Waiting for the catalogue application to start'; sleep 1; done",
        "",
        "# Start the rest of the application in the background and wait for it to be ready",
        "java -jar './demo/demo-application-0.0.1-SNAPSHOT.jar' > './demo/output.txt' 2>&1 &",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost/cart/1')\" -ne '200' ]; do echo 'Waiting for the (rest of the) application to start'; sleep 1; done"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "docker stop demo-application-reverse-proxy"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "cc28517f-2ba2-4409-8883-46197e2330d2",
      "contents": [
        "This starts our application in the background and waits for it to start.",
        "",
        "Make a few requests to the catalogue items endpoint. We have the following catalogue items in the database.",
        "",
        "| `id` | `caption`     | `description`                                                         |",
        "| ---: | ------------- | --------------------------------------------------------------------- |",
        "|    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "|    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "|    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "|    4 | Mug           | The ideal way to start the day                                        |",
        "|    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "6cadbcf8-21ba-4fab-9e16-4ab3a8a59fc0",
      "commands": [
        "curl --silent 'http://localhost/catalogue/item/1' | jq"
      ],
      "output": {
        "caption": "The catalogue item with id `1`",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "docker stop demo-application-reverse-proxy"
      ]
    },
    {
      "type": "Markdown",
      "id": "3f209dfc-b2b3-415a-bd5e-aff772ac3a6c",
      "contents": [
        "The database has three carts, as shown in the following tables.",
        "",
        "| `cart_id` | `item_id` | `caption`     | `quantity` |",
        "| --------: | --------: | ------------- | ---------: |",
        "|         1 |         1 | Leather Sofa  |          1 |",
        "|         1 |         5 | LED TV        |          1 |",
        "|         2 |         2 | Wooden Table  |          1 |",
        "|         2 |         3 | Plastic Chair |          6 |",
        "|         3 |         4 | Mug           |          4 |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "a6a09cb8-9fe9-402e-8de3-21feab4deb81",
      "commands": [
        "curl --silent 'http://localhost/cart/1' | jq"
      ],
      "output": {
        "caption": "The cart with id `1` and its items",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "docker stop demo-application-reverse-proxy"
      ]
    },
    {
      "type": "Markdown",
      "id": "c8db26c2-1c9d-4c4a-8a8b-5f18c99f1c07",
      "contents": [
        "Stop the application once ready."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "0d303f03-b5b3-4937-8b03-d7c62793990c",
      "commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "docker stop demo-application-reverse-proxy"
      ]
    },
    {
      "type": "Markdown",
      "id": "10e3df64-af38-44f1-b9b7-f12fcd6ff13c",
      "contents": [
        "All worked well!!",
        "",
        "We can stop the reverse proxy now too."
      ]
    },
    {
      "type": "Command",
      "id": "878ab584-4382-49dd-a9ce-8d4e542f8496",
      "commands": [
        "docker stop demo-application-reverse-proxy"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "a7214624-44bb-422f-a42b-a4e33c585f3e",
      "contents": [
        "Commit these changes so that you can always revert back to this point."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "84a6e59d-f9a7-48a3-aae7-f06ccbaf9a8a",
      "commands": [
        "MESSAGE='Remove the catalogue'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'Remove the code dependency on the catalogue component, as now the catalogue is a standalone service.' \\",
        "  --message 'This is the second step in disconnecting the components and splitting the monolith into a distributed application.'",
        "git tag --annotate 'v9.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "09426a04-b00c-4c97-8af5-0ac8848e4aba",
      "contents": [
        "The catalogue is now a standalone service that owns and controls its data. The cart cannot simply join to the catalogue tables anymore to fetch the catalogue items and instead needs to go through the endpoint exposed by the catalogue service. The main application still comprises the cart service, and now it is time to extract it too."
      ]
    },
    {
      "type": "Heading",
      "id": "64098ef6-1f76-4244-bc41-1d06277f6d62",
      "level": "H3",
      "title": "Extract the cart component as a standalone service"
    },
    {
      "type": "Markdown",
      "id": "8dc55865-50e9-4c8c-bb2a-57183b19fb1e",
      "contents": [
        "Extracting the cart component as a standalone service requires the following:",
        "",
        "1. Make the cart a standalone service.",
        "2. Redirect the cart traffic to the new cart service.",
        "3. Try the new application.",
        "4. Clean up the main application"
      ]
    },
    {
      "type": "Heading",
      "id": "23489255-45d6-4c58-9a22-8d4ac266adf6",
      "level": "H4",
      "title": "Step 1: Make the cart a standalone service"
    },
    {
      "type": "Markdown",
      "id": "528a560e-dff8-4d47-82e2-ae035d3b2a16",
      "contents": [
        "The cart project gets all the external data it needs through REST requests. Therefore, it does not matter where this is as long as it can access the catalogue service. The cart component can be extracted into an independent service. As we saw in the previous section, there are some changes involved, but nothing that we have not surpassed before.",
        "",
        "The cart service needs a database. In this example we have a simple in-memory database that can be easily migrated. that’s not necessarily the case in a real life project.",
        "",
        "To make the cart component a standalone service, we will start by adding a main class. The cart component will not be included as part of the main application anymore, thus it needs to be able to start."
      ]
    },
    {
      "type": "Markdown",
      "id": "e34ffebc-99e1-4f4d-8323-46fcb38fd80c",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "dda8dfa8-f8c0-470d-a32d-73e483bc2fe2",
      "commands": [
        "git tag --annotate 'v3.0' --message 'Before making cart a standalone service'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "c0553a77-85ab-409c-849c-53d195f07a04",
      "contents": [
        "We already have a main class, which is in the test source directory. We can simply use this one."
      ]
    },
    {
      "type": "Command",
      "id": "d624914c-b655-4e41-8b66-fdd444db27f8",
      "commands": [
        "mv './src/test/java/demo/Main.java' './src/main/java/demo/Main.java'"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "d2393147-0f75-4374-aedf-1422b9d219e1",
      "contents": [
        "We need (not really needed, but it is nice to have) to have a banner for the new cart service."
      ]
    },
    {
      "type": "Command",
      "id": "755988be-fe36-448e-b6fc-994af5e3bd2d",
      "commands": [
        "mkdir -p './src/main/resources/'"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Command",
      "id": "59528eac-1006-49b5-a846-d7ee964500c7",
      "commands": [
        "cat << EOF > './src/main/resources/banner.txt'",
        "██████╗ ██╗███████╗████████╗██████╗ ██╗██████╗ ██╗   ██╗████████╗███████╗██████╗      ██╗ ██████╗ █████╗ ██████╗ ████████╗██╗",
        "██╔══██╗██║██╔════╝╚══██╔══╝██╔══██╗██║██╔══██╗██║   ██║╚══██╔══╝██╔════╝██╔══██╗    ██╔╝██╔════╝██╔══██╗██╔══██╗╚══██╔══╝╚██╗",
        "██║  ██║██║███████╗   ██║   ██████╔╝██║██████╔╝██║   ██║   ██║   █████╗  ██║  ██║    ██║ ██║     ███████║██████╔╝   ██║    ██║",
        "██║  ██║██║╚════██║   ██║   ██╔══██╗██║██╔══██╗██║   ██║   ██║   ██╔══╝  ██║  ██║    ██║ ██║     ██╔══██║██╔══██╗   ██║    ██║",
        "██████╔╝██║███████║   ██║   ██║  ██║██║██████╔╝╚██████╔╝   ██║   ███████╗██████╔╝    ╚██╗╚██████╗██║  ██║██║  ██║   ██║   ██╔╝",
        "╚═════╝ ╚═╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝╚═════╝  ╚═════╝    ╚═╝   ╚══════╝╚═════╝      ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚═╝",
        "Distributed Application using Synchronous Communication (Http/REST)",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "0f0c3c24-3d2c-4c06-a7cd-5a1db48a54a7",
      "contents": [
        "We need to create the application properties and provide a different default port than the one used by the main application (port `8080`) and the catalogue service (port `8081`). We cannot have two (or more) applications listening on the same port on the same machine."
      ]
    },
    {
      "type": "Command",
      "id": "f576624c-0800-44e8-aef3-c34cf4dcf55f",
      "commands": [
        "cat << EOF > './src/main/resources/application.properties'",
        "spring.application.name=Cart",
        "server.port=8082",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "fce4db23-a072-41ac-b284-d1251d74255a",
      "contents": [
        "The cart project will manage its own database, thus it cannot reply on the `demo-application-db-migration` project anymore.",
        "",
        "Remove dependency on the `demo-application-db-migration` project, as now this application will own its database, add the FlywayDB and H2 dependencies."
      ]
    },
    {
      "type": "Command",
      "id": "a1effdd5-5087-46ba-aa5c-6e8ba32a4121",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml",
        "+++ b/pom.xml",
        "@@ -36,9 +36,12 @@",
        " ",
        "         <!-- Database -->",
        "         <dependency>",
        "-            <groupId>demo</groupId>",
        "-            <artifactId>demo-application-db-migration</artifactId>",
        "-            <version>0.0.1-SNAPSHOT</version>",
        "+            <groupId>com.h2database</groupId>",
        "+            <artifactId>h2</artifactId>",
        "+        </dependency>",
        "+        <dependency>",
        "+            <groupId>org.flywaydb</groupId>",
        "+            <artifactId>flyway-core</artifactId>",
        "         </dependency>",
        "         <dependency>",
        "             <groupId>org.springframework.boot</groupId>",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "2da45978-3011-4a4e-a8e3-e60e02ef1695",
      "contents": [
        "The cart `pom.xml` file should have the following dependencies."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "fccf5480-2319-4bcc-915f-d37ec980f433",
      "path": "./demo-application-cart/pom.xml",
      "from_line": 23,
      "number_of_lines": 47
    },
    {
      "type": "Markdown",
      "id": "38878a84-9bdc-4729-894f-4a30fe462e89",
      "contents": [
        "We have to do one more change to the cart `pom.xml` file, that is, include the Spring Boot Maven plugin. This project will be running as a standalone service and this it needs all the dependencies available at runtime."
      ]
    },
    {
      "type": "Command",
      "id": "60d3af88-8936-4bd8-9647-51546f2f2ce8",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml",
        "+++ b/pom.xml",
        "@@ -67,4 +67,13 @@",
        "             <scope>test</scope>",
        "         </dependency>",
        "     </dependencies>",
        "+",
        "+    <build>",
        "+        <plugins>",
        "+            <plugin>",
        "+                <groupId>org.springframework.boot</groupId>",
        "+                <artifactId>spring-boot-maven-plugin</artifactId>",
        "+            </plugin>",
        "+        </plugins>",
        "+    </build>",
        " </project>",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "06c36b50-8130-41d4-84d5-8828af492863",
      "contents": [
        "The cart `pom.xml` file should have the following plugins."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "3e888550-881e-4fd6-a3f7-ae46aa9a883e",
      "path": "./demo-application-cart/pom.xml",
      "from_line": 71,
      "number_of_lines": 8
    },
    {
      "type": "Markdown",
      "id": "818897a1-f37d-4fd8-8aff-973b1ce15b40",
      "contents": [
        "Create the database migration scripts.",
        "",
        "Note that in this project is not migrating the data, as this is a topic on its own. We will revise this example to also include the data migration."
      ]
    },
    {
      "type": "Command",
      "id": "3bd8055b-9934-4108-8fb6-defb92eabff7",
      "commands": [
        "mkdir -p './src/main/resources/db/migration'"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Command",
      "id": "13145dbb-c12b-47f8-ae57-ffeb26e97a6e",
      "commands": [
        "cat << EOF > './src/main/resources/db/migration/V1__create_cart.sql'",
        "CREATE TABLE cart (",
        "  id INT AUTO_INCREMENT NOT NULL,",
        "  PRIMARY KEY (id)",
        ");",
        "",
        "CREATE TABLE cart_item (",
        "  cart_id     INT NOT NULL,",
        "  item_id     INT NOT NULL,",
        "  quantity    INT NOT NULL,",
        "  PRIMARY KEY (cart_id, item_id),",
        "  CONSTRAINT fk_cart_item_cart_id FOREIGN KEY (cart_id) REFERENCES cart(id)",
        ");",
        "",
        "INSERT INTO cart () VALUES",
        "  (),",
        "  (),",
        "  ();",
        "",
        "INSERT INTO cart_item (cart_id, item_id, quantity) VALUES",
        "  (1, 1, 1),",
        "  (1, 5, 1),",
        "  (2, 2, 1),",
        "  (2, 3, 6),",
        "  (3, 4, 4);",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "bbd33fe0-fca1-4bfe-814e-0fd4ad553d8f",
      "contents": [
        "The main application will not be needing this projects anymore, thus it can be removed from the local Maven repository. While this is not strictly needed, it ensures that no other application use it by mistake."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "efa69fd7-59ae-4391-81fe-abff557f630e",
      "commands": [
        "rm -rf \"${HOME}/.m2/repository/demo/demo-application-cart\""
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Markdown",
      "id": "526eb081-39f1-44d5-8589-090275aa8111",
      "contents": [
        "Build the cart service"
      ]
    },
    {
      "type": "Command",
      "id": "0d27a254-2727-4a07-9ace-b3d7dca402fb",
      "commands": [
        "./mvnw clean verify"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "5738bdfe-ceec-4af5-85ff-96dcb7e7a26c",
      "contents": [
        "This will create a standalone JAR file that we can use to run the cart service."
      ]
    },
    {
      "type": "Command",
      "id": "32996523-a7a1-4d29-a743-be89078a2229",
      "commands": [
        "tree -L 1 --prune './demo'"
      ],
      "output": {
        "caption": "The cart application JAR files"
      },
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "fdce1d4b-5066-4ae9-a403-e18529365624",
      "contents": [
        "Let’s start the catalogue service before we can try the cart service."
      ]
    },
    {
      "type": "Command",
      "id": "8224ff44-59e0-4b4f-af0c-f435fa6e4f9d",
      "commands": [
        "# Copy the JAR files into the same location for convenience",
        "cp '../demo-application-catalogue/target/demo-application-catalogue-0.0.1-SNAPSHOT.jar' './demo'",
        "",
        "# Start the catalogue application in the background and wait for it to be ready",
        "java -jar './demo/demo-application-catalogue-0.0.1-SNAPSHOT.jar' > './demo/catalogue-output.txt' 2>&1 &",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:8081/catalogue/item/1')\" -ne '200' ]; do echo 'Waiting for the application to start'; sleep 1; done"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "ed868df3-2b3a-4f12-b23b-1ffce18326a9",
      "contents": [
        "This starts the catalogue in the background and waits for it to start.",
        "",
        "Make a few requests to the catalogue items endpoint. We have the following catalogue items in the database.",
        "",
        "| `id` | `caption`     | `description`                                                         |",
        "| ---: | ------------- | --------------------------------------------------------------------- |",
        "|    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "|    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "|    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "|    4 | Mug           | The ideal way to start the day                                        |",
        "|    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "f15ad352-b979-4854-9159-dd5e08d9f679",
      "commands": [
        "curl --silent 'http://localhost:8081/catalogue/item/5' | jq"
      ],
      "output": {
        "caption": "The catalogue item with id `5`",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "e5cac936-0fe8-42eb-8341-6815de2a0fcd",
      "contents": [
        "Let’s try the cart service together with the catalogue service. Remember that the cart service depends on the catalogue service and cannot function without it."
      ]
    },
    {
      "type": "Command",
      "id": "7b473299-0d96-49ae-87fa-d16fdce72ace",
      "commands": [
        "# Start the cart application in the background and wait for it to be ready",
        "CATALOGUE_ROOT_URI='http://localhost:8081/' \\",
        "  java -jar './demo/demo-application-cart-0.0.1-SNAPSHOT.jar' > './demo/cart-output.txt' 2>&1 &",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:8082/cart/1')\" -ne '200' ]; do echo 'Waiting for the cart application to start'; sleep 1; done"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "fdee0f0b-8685-4a50-a9cf-300dcd2579d3",
      "contents": [
        "The database has three carts, as shown in the following tables.",
        "",
        "| `cart_id` | `item_id` | `caption`     | `quantity` |",
        "| --------: | --------: | ------------- | ---------: |",
        "|         1 |         1 | Leather Sofa  |          1 |",
        "|         1 |         5 | LED TV        |          1 |",
        "|         2 |         2 | Wooden Table  |          1 |",
        "|         2 |         3 | Plastic Chair |          6 |",
        "|         3 |         4 | Mug           |          4 |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "ed376836-df00-4561-bd0c-39da43312977",
      "commands": [
        "curl --silent 'http://localhost:8082/cart/3' | jq"
      ],
      "output": {
        "caption": "The cart with id `3` and its items",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "198ce425-d432-473f-a0bc-3ee382a77199",
      "contents": [
        "Stop the application once ready."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "fe7b3d7c-e2d1-4c1f-be30-48ec07033cc3",
      "commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ]
    },
    {
      "type": "Markdown",
      "id": "04b7543b-ad5f-47d7-91ab-74172dba6fe2",
      "contents": [
        "The cart and catalogue services work well together, and we are ready to remove this from the main application."
      ]
    },
    {
      "type": "Markdown",
      "id": "ec6a2dd2-40f3-4c1e-b899-02193501f795",
      "contents": [
        "Commit these changes so that you can always revert back to this point."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "e59174b2-eb75-41e7-8695-4c37447601ec",
      "commands": [
        "MESSAGE='Make cart a standalone service'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'Moves this project out from the demo-application and makes it a standalone service.' \\",
        "  --message 'This project now owns its database and all communication comes through its public APIs.' \\",
        "  --message 'This is the third step in disconnecting the components and splitting the monolith into a distributed application.'",
        "git tag --annotate 'v3.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "e798b853-f68d-468d-acf9-6ec0f6784206",
      "contents": [
        "Before we remove the catalogue service from the main application, we need to redirect the catalogue traffic to the new catalogue service, which is the topic of the next section."
      ]
    },
    {
      "type": "Heading",
      "id": "c97c42a1-8d2e-4ab6-86da-e84086655d1b",
      "level": "H4",
      "title": "Step 2: Redirect the cart traffic to the new cart service"
    },
    {
      "type": "Markdown",
      "id": "e46f9cc3-55c6-4f68-bd45-9cd22738531c",
      "contents": [
        "The reverse proxy is redirecting the cart traffic to the main application, as it is configured in the `default.conf`."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "53b67fd7-d2b7-49ce-a5c0-fca7ee91406e",
      "path": "./demo-application-reverse-proxy/default.conf",
      "from_line": 5,
      "number_of_lines": 7
    },
    {
      "type": "Markdown",
      "id": "208892aa-4fe7-49b6-a663-71a702fb5eb6",
      "contents": [
        "We need to change the `/cart` redirection to point to the new standalone cart service that is now listening on port `8082`."
      ]
    },
    {
      "type": "Markdown",
      "id": "a3032272-f1d7-469d-9f57-71069704f940",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ]
    },
    {
      "type": "Command",
      "id": "22149177-0e40-4d59-a673-21e60837a2bc",
      "commands": [
        "git tag --annotate 'v3.0' --message 'Before redirecting the traffic to the new cart service'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "9ab3de41-1258-4d99-817d-56b1599e0b99",
      "contents": [
        "Update the reverse proxy to redirect the traffic to the new service on port `8082`."
      ]
    },
    {
      "type": "Command",
      "id": "6a2eec01-3945-4880-ad66-034088173538",
      "commands": [
        "patch -f -p1 -u './default.conf' << EOF",
        "--- a/default.conf",
        "+++ b/default.conf",
        "@@ -3,7 +3,7 @@ server {",
        "     listen  [::]:80;",
        " ",
        "     location /cart {",
        "-        proxy_pass http://host.docker.internal:8080/cart;",
        "+        proxy_pass http://host.docker.internal:8082/cart;",
        "         proxy_set_header Host \\$host;",
        "         proxy_set_header X-Real-IP \\$remote_addr;",
        "         proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;",
        "EOF"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "adb0fa43-016c-4df9-ae77-7a9b5814b201",
      "contents": [
        "Rebuild the reverse proxy container and use another tag (`v3`)."
      ]
    },
    {
      "type": "Command",
      "id": "69886224-f930-4e78-adb5-96557355b3c4",
      "commands": [
        "docker build \\",
        "  --file 'Dockerfile' \\",
        "  --tag 'demo-application-reverse-proxy:v3' \\",
        "  --load \\",
        "."
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "e987ab84-9854-4184-a8bb-4fb4cd3b3c3e",
      "contents": [
        "Commit these changes so that you can always revert back to this point."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "36ab332a-3782-4253-8d95-87698c9650f0",
      "commands": [
        "MESSAGE='Redirect the traffic to the new cart service'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'The cart project is now a standalone service and thus cart traffic needs to be routed to this application.' \\",
        "  --message 'This is the third step in disconnecting the components and splitting the monolith into a distributed application.'",
        "git tag --annotate 'v3.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "e792f206-54a6-4b1f-9004-9ce201616b3b",
      "contents": [
        "The proxy configuration is updated and the cart traffic is now redirected to the new cart service listening on port `8082`. We can now proceed and try the new application comprising two services, the catalogue and the cart services. Note that the (now old) main application is not needed anymore. We will deal with that later. Let’s try the new application now."
      ]
    },
    {
      "type": "Heading",
      "id": "6020b5b1-5bde-433e-93e5-1550eae9569f",
      "level": "H4",
      "title": "Step 3: Try the new application"
    },
    {
      "type": "Markdown",
      "id": "deb0522f-c8ee-4325-bf6b-03578a908eaf",
      "contents": [
        "Start the new version (`v3`) of the reverse proxy."
      ]
    },
    {
      "type": "Command",
      "id": "d53fe7f6-83ea-476e-84c6-002827ebc6f0",
      "commands": [
        "docker run \\",
        "  --rm \\",
        "  --detach \\",
        "  --name 'demo-application-reverse-proxy' \\",
        "  --publish 80:80 \\",
        "  'demo-application-reverse-proxy:v3'",
        "",
        "# Wait for Nginx to start",
        "# The reverse proxy is configured to only redirect to the cart and catalogue endpoints, thus any other requests will yield a 404",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost/')\" -ne '404' ]; do echo 'Waiting for the reverse proxy to start'; sleep 1; done"
      ],
      "on_failure_commands": [
        "docker cp demo-application-reverse-proxy:/etc/nginx/conf.d/default.conf ./default-error.conf",
        "docker stop demo-application-reverse-proxy"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "2f27f216-50f1-4427-87ac-32ce068a9f0a",
      "contents": [
        "We need to start two JAR files, the catalogue service and the cart service. For convenience, we will copy the JAR files from their respective directories into one place so that we can start these easily and try our application."
      ]
    },
    {
      "type": "Command",
      "id": "bf10b8b8-d39e-45fc-8acd-acce881abe18",
      "commands": [
        "# Copy the JAR files into the same location for convenience",
        "rm -rf './demo'",
        "mkdir './demo'",
        "cp '../demo-application-cart/target/demo-application-cart-0.0.1-SNAPSHOT.jar' './demo'",
        "cp '../demo-application-catalogue/target/demo-application-catalogue-0.0.1-SNAPSHOT.jar' './demo'",
        "",
        "# Start the catalogue application in the background and wait for it to be ready",
        "java -jar './demo/demo-application-catalogue-0.0.1-SNAPSHOT.jar' > './demo/catalogue-output.txt' 2>&1 &",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost/catalogue/item/1')\" -ne '200' ]; do echo 'Waiting for the catalogue application to start'; sleep 1; done",
        "",
        "# Start the rest of the application in the background and wait for it to be ready",
        "java -jar './demo/demo-application-cart-0.0.1-SNAPSHOT.jar' > './demo/cart-output.txt' 2>&1 &",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost/cart/1')\" -ne '200' ]; do echo 'Waiting for the cart application to start'; sleep 1; done"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "docker stop demo-application-reverse-proxy"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "51945a55-8f4b-4517-b479-ce4ee662025c",
      "contents": [
        "This starts our application in the background and waits for it to start.",
        "",
        "Make a few requests to the catalogue items endpoint. We have the following catalogue items in the database.",
        "",
        "| `id` | `caption`     | `description`                                                         |",
        "| ---: | ------------- | --------------------------------------------------------------------- |",
        "|    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "|    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "|    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "|    4 | Mug           | The ideal way to start the day                                        |",
        "|    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "178ea4d5-5ce5-465b-be1d-0250f8b18d9d",
      "commands": [
        "curl --silent 'http://localhost/catalogue/item/1' | jq"
      ],
      "output": {
        "caption": "The catalogue item with id `1`",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "docker stop demo-application-reverse-proxy"
      ]
    },
    {
      "type": "Markdown",
      "id": "2e73aac8-3c64-4dd8-aa36-2a4f116e47ef",
      "contents": [
        "The database has three carts, as shown in the following tables.",
        "",
        "| `cart_id` | `item_id` | `caption`     | `quantity` |",
        "| --------: | --------: | ------------- | ---------: |",
        "|         1 |         1 | Leather Sofa  |          1 |",
        "|         1 |         5 | LED TV        |          1 |",
        "|         2 |         2 | Wooden Table  |          1 |",
        "|         2 |         3 | Plastic Chair |          6 |",
        "|         3 |         4 | Mug           |          4 |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "0a0563ff-e872-4d3c-b08c-f517e3a2cfb0",
      "commands": [
        "curl --silent 'http://localhost/cart/1' | jq"
      ],
      "output": {
        "caption": "The cart with id `1` and its items",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "docker stop demo-application-reverse-proxy"
      ]
    },
    {
      "type": "Markdown",
      "id": "c2534dbf-144c-44b6-a101-f8a1b3855186",
      "contents": [
        "Stop the application once ready."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "5ce6f14d-9f64-4b58-b64f-8abdf1ece2d7",
      "commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "docker stop demo-application-reverse-proxy"
      ]
    },
    {
      "type": "Markdown",
      "id": "91d82295-6126-4414-8543-b667bd9ed31a",
      "contents": [
        "All worked well!!",
        "",
        "We can stop the reverse proxy now too."
      ]
    },
    {
      "type": "Command",
      "id": "da71f5a6-aa62-449a-920c-9dc2616c66db",
      "commands": [
        "docker stop demo-application-reverse-proxy"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "9cbbbc46-7d46-475b-9699-a168bd83b26e",
      "contents": [
        "Both services are now standalone that own and control their respective data. Nothing changed with the dependency of the cart service on the catalogue service. The cart service, despite being standalone, cannot function if we turn off the catalogue service. This is not an ideal situation, and we will improve this when we refactor our application again to make these two services loosely coupled. For now, let’s clean up the main application and database."
      ]
    },
    {
      "type": "Heading",
      "id": "c9c04b06-e1ea-480e-b301-73454d0c7b66",
      "level": "H4",
      "title": "Step 4: Clean up the main application"
    },
    {
      "type": "Markdown",
      "id": "cfc9da86-0384-4945-bfa9-d89554820875",
      "contents": [
        "The cart component is now extracted as a standalone service. Let’s remove the cart from the main application.",
        "",
        "> **Why go through the trouble given that we don’t need the main application?**",
        "> ",
        "> We will not be deleting the repository as that would lose all its history. One may need to look at some code to verify something. Therefore, when looking at the current state of the main application we will find the cart as part of the application and not reference to its removal. This may create confusion and developers may pull information from the wrong place.",
        ">",
        "> By updating the main application, we are specifying our intention, that is, to remove the cart.",
        ">",
        "> Finally, we may link the commits by adding a reference, such as an issue or ticket number. All commits related to the extraction of the cart (and the catalogue) service will have the same reference which one can then look it up.",
        "",
        "We need to perform two things.",
        "",
        "1. Delete the cart data from the database",
        "2. Remove the cart dependency from the list of the dependencies."
      ]
    },
    {
      "type": "Heading",
      "id": "b8a01ebd-f8f6-4ee6-9e23-867f80efd176",
      "level": "H5",
      "title": "Step 1: Remove cart from the main application database"
    },
    {
      "type": "Markdown",
      "id": "87f5998a-7b75-459e-8aa9-f9748a3bf8ed",
      "contents": [
        "Drop the cart tables. We will do this by adding a new database migration script."
      ]
    },
    {
      "type": "Markdown",
      "id": "d06cedeb-1fff-492c-b220-56824967952c",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ]
    },
    {
      "type": "Command",
      "id": "e4efe505-fc79-4d3c-9a36-17e9078f88bf",
      "commands": [
        "git tag --annotate 'v3.0' --message 'Before removing the cart'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-db-migration"
    },
    {
      "type": "Markdown",
      "id": "1d8ebb95-bd8d-4902-8a2a-10225ce1bc19",
      "contents": [
        "Remove the database dependency between the cart and catalogue and drop the catalogue table."
      ]
    },
    {
      "type": "Command",
      "id": "a41114d1-4688-4332-913f-23d4e75fccb7",
      "commands": [
        "cat << EOF > './src/main/resources/db/migration/V4__drop_cart.sql'",
        "DROP TABLE cart_item;",
        "DROP TABLE cart;",
        "EOF"
      ],
      "working_dir": "demo-application-db-migration"
    },
    {
      "type": "Markdown",
      "id": "919f4a38-83fe-4c69-ba6c-19824434c0d1",
      "contents": [
        "Build the database migration project"
      ]
    },
    {
      "type": "Command",
      "id": "423fd91c-a997-4866-a046-13b003153b58",
      "commands": [
        "./mvnw clean install"
      ],
      "working_dir": "demo-application-db-migration"
    },
    {
      "type": "Markdown",
      "id": "a2ac25df-1e2c-405e-a300-555c2d05008d",
      "contents": [
        "Commit these changes so that you can always revert back to this point."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "783c4aa7-bd73-4e6e-b3d7-684569bbd49f",
      "commands": [
        "MESSAGE='Remove the cart'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'Remove the cart tables from the database.' \\",
        "  --message 'This is the third step in disconnecting the components and splitting the monolith into a distributed application.'",
        "git tag --annotate 'v3.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-db-migration"
    },
    {
      "type": "Heading",
      "id": "25b8f4c6-2632-4fd5-a2db-a461eda97827",
      "level": "H5",
      "title": "Step 2: Remove the cart from the list of dependencies"
    },
    {
      "type": "Markdown",
      "id": "3f537af9-5e8d-4001-8be8-395f4fa49d20",
      "contents": [
        "The main application’s database does not have a reference to the cart data anymore. We can now turn our attention to the `pom.xml` file."
      ]
    },
    {
      "type": "Markdown",
      "id": "a57a0eb0-392d-40d9-8dae-1c09a96cbb2a",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ]
    },
    {
      "type": "Command",
      "id": "823747b8-62ae-44f9-b048-dac00226ec48",
      "commands": [
        "git tag --annotate 'v10.0' --message 'Before removing the cart'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "006b2c53-8698-46da-aad5-8ad5652db7c7",
      "contents": [
        "Remove the code dependency between the `demo-application` and the `demo-application-cart`."
      ]
    },
    {
      "type": "Command",
      "id": "9809efcc-7188-4300-be13-8e5406108946",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml",
        "+++ b/pom.xml",
        "@@ -21,11 +21,9 @@",
        "     </properties>",
        " ",
        "     <dependencies>",
        "-        <!-- Cart -->",
        "         <dependency>",
        "-            <groupId>demo</groupId>",
        "-            <artifactId>demo-application-cart</artifactId>",
        "-            <version>0.0.1-SNAPSHOT</version>",
        "+            <groupId>org.springframework.boot</groupId>",
        "+            <artifactId>spring-boot-starter</artifactId>",
        "         </dependency>",
        "     </dependencies>",
        "EOF"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "2a442d53-c924-409a-936f-5b0e14188947",
      "contents": [
        "By now the `pom.xml` file of the `demo-application` project should look like the following example."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "e5c1d110-a954-4fe7-a5cb-0b6e33b452d7",
      "path": "./demo-application/pom.xml"
    },
    {
      "type": "Markdown",
      "id": "00c6eafb-efd5-4a65-9a17-943e27e42d33",
      "contents": [
        "Build the project"
      ]
    },
    {
      "type": "Command",
      "id": "5ebc18c1-eae0-43c8-93d3-8650dc730504",
      "commands": [
        "./mvnw clean verify"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "644abdbe-c859-4aee-a816-46d5299b91b3",
      "contents": [
        "All set."
      ]
    },
    {
      "type": "Command",
      "id": "f3b2e25b-3667-4893-9f40-ad64a6f688ef",
      "commands": [
        "MESSAGE='Remove the cart'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'Remove the code dependency on the cart component, as now the cart is a standalone service.' \\",
        "  --message 'This is the second step in disconnecting the components and splitting the monolith into a distributed application.'",
        "git tag --annotate 'v10.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application"
    },
    {
      "type": "Markdown",
      "id": "15924642-d6b3-4317-9303-2ed7ec046818",
      "contents": [
        "The cart and catalogue components are now running as standalone services, and we don’t need the main application anymore. While that’s all shiny and great, this adds to the level of complexity. Say that the get cart request starts slowing down. How can we debug that? The issue can be anywhere and given the distributed nature. Nevertheless, we need to be able to debug and analyse our application, and that’s the topic of the next section."
      ]
    },
    {
      "type": "Heading",
      "id": "6fd98037-6f01-4519-8b6d-5a9fcb8bcb34",
      "level": "H3",
      "title": "Observability"
    },
    {
      "type": "Markdown",
      "id": "284e99bf-46bd-497e-a41d-9f800313a755",
      "contents": [
        "There was a funny tweet by [Honest Update](https://x.com/honest_update) in 2015 which read as follows:",
        "",
        "> “_We replaced our monolith with micro services so that every outage could be more like a murder mystery._”\\",
        "> ([reference](https://x.com/honest_update/status/651897353889259520?lang=en))",
        "",
        "While funny, there is a lot of truth in that. Distributed systems introduce a lot of accidental complexity and make it harder to debug when issues are observed. Two services may work fine independently but may produce undesired behaviour when combined. Problems may arise from the network issues (packets are dropped), services' proximity (delays), network traffic (delays), serialisation overhead (lower throughput) and more. These issues are not found in a monolithic architecture as all method calls (excluding calls to the database or other third-party external services) are intra-process.",
        "",
        "Furthermore, with a monolithic architecture, we have one application to debug. Logs and metrics are collected from one place, and we can debug a request and follow its way throughout the application. Once the monolithic application is split into a distributed application, we lose the ability of having everything in one place. With two services, we will get two log files (streams) and we need to find a way to correlate these. We also lose the ability to follow a request throughout the distributed application. If we debug the cart service, for example, the debugging will stop once it reaches out to the catalogue service to get the catalogue items information.",
        "",
        "We are not the only ones experiencing this problem and luckily for us, there are different solutions. To address these problems, we can adopt distributed tracing, where each request is tagged with an id which is used throughout the request lifetime. When the cart calls the catalogue, it passes the trace id together with the request so that we can follow the request throughout the whole application and not just one of its services.",
        "",
        "Spring Boot is very well integrated with [Micrometer](https://micrometer.io/) a vendor neutral observability framework for Java. This means we can collect the data from our application using Micrometer and then access this data from our tool of choice. Furthermore, switching from one to another should not impact our application. Micrometer is a Java based solution. [OpenTelemetry](https://opentelemetry.io/) is another vendor neutral observability framework similar to Micrometer that has handles for many programming languages. While Micrometer is JVM based, OpenTelemetry can be used with many programming languages. According to [Google Trends](https://trends.google.com/trends/explore?cat=32&q=OpenTelemetry,Micrometer&hl=en-GB), OpenTelemetry is a more popular search team than Micrometer, which may be coming from the fact that OpenTelemetry is programming language agnostic. In our example we will use OpenTelemetry, which has good integration with Spring Boot too.",
        "",
        "Setting up OpenTelemetry can be a bit involved, and we will focus on tracing to demonstrate its potential. Ideally also support centralised logging and metrics, but including these will require more time and effort.",
        "",
        "> **Is OpenTelemetry all or nothing? Do we need to implement this throughout the application for it to be effective?**",
        ">",
        "> No. OpenTelemetry (or any observability tool or framework like Micrometer) is not an all or nothing deal. We can start with the catalogue service first for example and then roll this out to the cart service. When only some of the services have OpenTelemetry, then we will only be able to observe these services. While we will not have the full picture, we will be able to collect data and observe these services.",
        ">",
        "> If you are adopting an observability tool or framework, it is recommended you start with one or two services and observe its impact and whether this is shedding light on your application before adopting it completely.",
        "",
        "> **Are there overheads associated with these observability tools and frameworks?**",
        ">",
        "> Yes. There is no such thing as a free lunch.",
        ">",
        "> Simple logging has a visible impact on your application. Measure the time it takes for a simple for-loop to complete while logging at every iteration, then compare it without logs. You will think twice before adding another log entry to your application.",
        ">",
        "> With that being said, logs and other information about your application are essential and in some cases required by law.",
        ">",
        "> Java includes the [JDK Flight Recorder (JFR)](https://docs.oracle.com/en/java/java-components/jdk-mission-control/9/user-guide/using-jdk-flight-recorder.html), which is a very low overhead means to collect important information about your application. Instead of logs, we can trigger [JFR events](https://docs.oracle.com/en/java/javase/21/jfapi/create-events.html) which have a lower overhead on our application. These events can then be dumped as a JFR file which can then be viewed using [JDK Mission Control](https://www.oracle.com/java/technologies/jdk-mission-control.html) or similar tools."
      ]
    },
    {
      "type": "Heading",
      "id": "95996029-336b-4764-9ce4-9ad52b3164b2",
      "level": "H4",
      "title": "Jaeger"
    },
    {
      "type": "Markdown",
      "id": "15487957-3c1e-4698-b1fa-8e3f635a4adb",
      "contents": [
        "The data collected by OpenTelemetry needs to be sent somewhere, so that then we can access it independent of our application (and its services). Furthermore, in a distributed architecture, we will be having many services and in many cases, multiple instances of the same service will be running on multiple machines. There, there needs to be a central place where all the traces are collected and then rendered.",
        "",
        "To keep this workshop simple, we will only be collecting traces, and we will collect these in a [Jaeger](https://www.jaegertracing.io/) instance which will act as both the central data point and a rendering tool. OpenTelemetry can export the data directly to Jaeger using its [Jaeger exporter](https://opentelemetry.io/docs/languages/java/exporters/#jaeger).",
        "",
        "The simplest way to start a Jaeger instance is through docker (`jaegertracing/all-in-one:1.57.0`).",
        "http://localhost:16686/search"
      ]
    },
    {
      "type": "Command",
      "id": "fe72e6b9-0903-4661-9936-9195614fe9c8",
      "commands": [
        "docker run \\",
        "  --rm \\",
        "  --detach \\",
        "  --name 'demo-application-jaeger' \\",
        "  --env COLLECTOR_ZIPKIN_HOST_PORT=:9411 \\",
        "  --publish 4317:4317 \\",
        "  --publish 4318:4318 \\",
        "  --publish 9411:9411 \\",
        "  --publish 16686:16686 \\",
        "  'jaegertracing/all-in-one:1.57.0'",
        "",
        "# Wait for Jaeger to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:16686/search')\" -ne '200' ]; do echo 'Waiting for Jaeger to start'; sleep 1; done"
      ],
      "on_failure_commands": [
        "docker stop demo-application-jaeger"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "042441b8-ddfa-49d3-b336-fb284d4a4195",
      "contents": [
        "You can access Jaeger user interface from: [http://localhost:16686/search](http://localhost:16686/search). Notice that our services will not be immediately visible as no data about them is yet collected by Jaeger."
      ]
    },
    {
      "type": "Heading",
      "id": "784ce83a-d4af-4649-8d31-3e26d42ec125",
      "level": "H4",
      "title": "Add distributed tracing to the catalogue service"
    },
    {
      "type": "Markdown",
      "id": "71a2da5c-60af-445a-8fea-2eafab241461",
      "contents": [
        "There are several ways OpenTelemetry can be added to the project as described [here](https://opentelemetry.io/docs/languages/java/getting-started/). While using the Java Agent looks nice, I prefer to steer away from the Java agents and use the [Spring Starter project](https://opentelemetry.io/docs/zero-code/java/spring-boot-starter/) instead. This integrates nicely with Spring and does not require additional files to be deployed. Furthermore, telemetry becomes first-class citizen of the application and can be managed like any other dependency."
      ]
    },
    {
      "type": "Markdown",
      "id": "7f8cecc7-adc1-4cc5-a622-e7499379517b",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "681aac0d-d3ba-489e-b483-02ecdbfc75dd",
      "commands": [
        "git tag --annotate 'v4.0' --message 'Before adding OpenTelemetry'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "8d66236f-28c5-46f3-8f21-3804dda19ab2",
      "contents": [
        "We need to add several new dependencies to our catalogue service:",
        "",
        "- [`opentelemetry-spring-boot-starter`](https://mvnrepository.com/artifact/io.opentelemetry.instrumentation/opentelemetry-spring-boot-starter): which will configure distributed tracing by leveraging Spring Boot. We don’t have to add any code for this to work.",
        "- [`opentelemetry-jdbc`](https://mvnrepository.com/artifact/io.opentelemetry.instrumentation/opentelemetry-jdbc): which will allow us to instrument the database queries.",
        "- [`opentelemetry-exporter-jaeger`](https://mvnrepository.com/artifact/io.opentelemetry/opentelemetry-exporter-jaeger): which will allow us to export the tracing data to Jaeger.",
        "",
        "Modify the `pom.xml` file to include these dependencies."
      ]
    },
    {
      "type": "Command",
      "id": "4ebefdc2-f98b-460b-97c6-21d0a61041b9",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml",
        "+++ b/pom.xml",
        "@@ -20,6 +20,25 @@",
        "         <java.version>21</java.version>",
        "     </properties>",
        " ",
        "+    <dependencyManagement>",
        "+        <dependencies>",
        "+            <dependency>",
        "+                <groupId>io.opentelemetry</groupId>",
        "+                <artifactId>opentelemetry-bom</artifactId>",
        "+                <version>1.38.0</version>",
        "+                <type>pom</type>",
        "+                <scope>import</scope>",
        "+            </dependency>",
        "+            <dependency>",
        "+                <groupId>io.opentelemetry.instrumentation</groupId>",
        "+                <artifactId>opentelemetry-instrumentation-bom-alpha</artifactId>",
        "+                <version>2.4.0-alpha</version>",
        "+                <type>pom</type>",
        "+                <scope>import</scope>",
        "+            </dependency>",
        "+        </dependencies>",
        "+    </dependencyManagement>",
        "+",
        "     <dependencies>",
        "         <!-- Web -->",
        "         <dependency>",
        "@@ -41,6 +60,21 @@",
        "             <artifactId>spring-boot-starter-data-jpa</artifactId>",
        "         </dependency>",
        " ",
        "+        <!-- Telemetry -->",
        "+        <dependency>",
        "+            <groupId>io.opentelemetry.instrumentation</groupId>",
        "+            <artifactId>opentelemetry-spring-boot-starter</artifactId>",
        "+        </dependency>",
        "+        <dependency>",
        "+            <groupId>io.opentelemetry.instrumentation</groupId>",
        "+            <artifactId>opentelemetry-jdbc</artifactId>",
        "+        </dependency>",
        "+        <dependency>",
        "+            <groupId>io.opentelemetry</groupId>",
        "+            <artifactId>opentelemetry-exporter-jaeger</artifactId>",
        "+            <version>1.34.1</version>",
        "+        </dependency>",
        "+",
        "         <!-- Testing -->",
        "         <dependency>",
        "             <groupId>org.springframework.boot</groupId>",
        "EOF"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "f73710f5-11be-49ba-8d87-6f6adae0d658",
      "contents": [
        "The catalogue `pom.xml` should now have the following dependencies."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "375c3abe-c651-4f0b-abb7-22ee2867e69b",
      "path": "./demo-application-catalogue/pom.xml",
      "from_line": 23,
      "number_of_lines": 62
    },
    {
      "type": "Markdown",
      "id": "9a5b6a09-f2ad-457b-b855-9fdf6425d287",
      "contents": [
        "We have now added OpenTelemetry to our project using the provided [Spring Boot OpenTelemetry Starter](https://opentelemetry.io/docs/zero-code/java/spring-boot-starter/) project. While it requires no code changes, we need to change the database driver so that it uses the instrumented one.",
        "",
        "Also, in this example we will only collect traces. We will not be collecting logs and metrics to keep things simple. While it is not required, we should disable these as otherwise we may observe warnings in the logs which may distract us from other important things."
      ]
    },
    {
      "type": "Command",
      "id": "328050a6-7786-411f-aa43-343acb360847",
      "commands": [
        "patch -f -p1 -u './src/main/resources/application.properties' << EOF",
        "--- a/src/main/resources/application.properties",
        "+++ b/src/main/resources/application.properties",
        "@@ -1,2 +1,10 @@",
        " spring.application.name=Catalogue",
        " server.port=8081",
        "+",
        "+# Database (using OpenTelemetry driver)",
        "+spring.datasource.url=jdbc:otel:h2:mem:db",
        "+spring.datasource.driver-class-name=io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver",
        "+",
        "+# OpenTelemetry (Export only the traces)",
        "+otel.metrics.exporter=none",
        "+otel.logs.exporter=none",
        "EOF"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "3631dca5-4636-4e7f-b44f-35a8801a8ba7",
      "contents": [
        "The catalogue `src/main/resources/application.properties` file should like the following example."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "f385bb94-c4af-4f7a-8c46-015744ea592b",
      "path": "./demo-application-catalogue/src/main/resources/application.properties"
    },
    {
      "type": "Markdown",
      "id": "9bdfc70f-1010-4237-a99d-ea0418dd0b6e",
      "contents": [
        "We are all set. Let’s build the project."
      ]
    },
    {
      "type": "Command",
      "id": "2072b513-43e9-4073-b1d8-71e91960503e",
      "commands": [
        "./mvnw clean verify"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Markdown",
      "id": "a298c597-bc15-42a0-a0fc-1d9dd92c9acf",
      "contents": [
        "All tests passed."
      ]
    },
    {
      "type": "Markdown",
      "id": "7ef97dd1-396a-4378-a1bc-dbfd1cc1565c",
      "contents": [
        "Commit these changes so that you can always revert back to this point."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "36ec6494-74d0-45e9-9c51-48a574f3af83",
      "commands": [
        "MESSAGE='Add OpenTelemetry'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'Add OpenTelemetry and the Jaeger exporter'",
        "git tag --annotate 'v4.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Heading",
      "id": "5b9f68cb-b0f6-4bef-90c9-c5c56aa87518",
      "level": "H4",
      "title": "Add distributed tracing to the cart service"
    },
    {
      "type": "Markdown",
      "id": "716f954c-a6f2-4788-94fe-7578b6f83290",
      "contents": [
        "We need to repeat the same thing for the cart. In a nutshell, we need to add the OpenTelemetry dependencies to the `pom.xml` and configure the application to use the instrumented database drivers."
      ]
    },
    {
      "type": "Markdown",
      "id": "6fe56b66-5f07-4941-bf4f-73734be07f2c",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ]
    },
    {
      "type": "Command",
      "id": "ef77d33c-ddb4-4a63-9ca5-ad0af597bfb5",
      "commands": [
        "git tag --annotate 'v4.0' --message 'Before adding OpenTelemetry'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "73e7b247-2e2b-44c2-afe5-39e4a520a171",
      "contents": [
        "We need to add several new dependencies to our catalogue service:",
        "",
        "- `opentelemetry-spring-boot-starter`: which will configure distributed tracing by leveraging Spring Boot. We don’t have to add any code for this to work.",
        "- `opentelemetry-jdbc`: which will allow us to instrument the database queries.",
        "- `opentelemetry-exporter-jaeger`: which will allow us to export the tracing data to Jaeger.",
        "",
        "Modify the `pom.xml` file to include these dependencies."
      ]
    },
    {
      "type": "Command",
      "id": "ef4191be-43bf-46f9-a7cb-53b2b7507587",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml",
        "+++ b/pom.xml",
        "@@ -20,6 +20,25 @@",
        "         <java.version>21</java.version>",
        "     </properties>",
        " ",
        "+    <dependencyManagement>",
        "+        <dependencies>",
        "+            <dependency>",
        "+                <groupId>io.opentelemetry</groupId>",
        "+                <artifactId>opentelemetry-bom</artifactId>",
        "+                <version>1.38.0</version>",
        "+                <type>pom</type>",
        "+                <scope>import</scope>",
        "+            </dependency>",
        "+            <dependency>",
        "+                <groupId>io.opentelemetry.instrumentation</groupId>",
        "+                <artifactId>opentelemetry-instrumentation-bom-alpha</artifactId>",
        "+                <version>2.4.0-alpha</version>",
        "+                <type>pom</type>",
        "+                <scope>import</scope>",
        "+            </dependency>",
        "+        </dependencies>",
        "+    </dependencyManagement>",
        "+",
        "     <dependencies>",
        "         <!-- Common -->",
        "         <dependency>",
        "@@ -34,6 +53,21 @@",
        "             <artifactId>spring-boot-starter-web</artifactId>",
        "         </dependency>",
        " ",
        "+        <!-- Telemetry -->",
        "+        <dependency>",
        "+            <groupId>io.opentelemetry.instrumentation</groupId>",
        "+            <artifactId>opentelemetry-spring-boot-starter</artifactId>",
        "+        </dependency>",
        "+        <dependency>",
        "+            <groupId>io.opentelemetry.instrumentation</groupId>",
        "+            <artifactId>opentelemetry-jdbc</artifactId>",
        "+        </dependency>",
        "+        <dependency>",
        "+            <groupId>io.opentelemetry</groupId>",
        "+            <artifactId>opentelemetry-exporter-jaeger</artifactId>",
        "+            <version>1.34.1</version>",
        "+        </dependency>",
        "+",
        "         <!-- Database -->",
        "         <dependency>",
        "             <groupId>com.h2database</groupId>",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "a51e6272-7cc6-497b-b4a8-09bac25ca262",
      "contents": [
        "The cart `pom.xml` should now have the following dependencies."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "ce65d8e5-02dc-47bb-a065-1bd8e7a1e094",
      "path": "./demo-application-cart/pom.xml",
      "from_line": 23,
      "number_of_lines": 81
    },
    {
      "type": "Markdown",
      "id": "ecbd9d7e-f390-4876-b00f-17690e888206",
      "contents": [
        "Update the application properties so that it uses the instrumented database driver and disables logging and metrics."
      ]
    },
    {
      "type": "Command",
      "id": "f811ea47-7b3b-4cd6-9183-e7f1ee3a8623",
      "commands": [
        "patch -f -p1 -u './src/main/resources/application.properties' << EOF",
        "--- a/src/main/resources/application.properties",
        "+++ b/src/main/resources/application.properties",
        "@@ -1,2 +1,10 @@",
        " spring.application.name=Cart",
        " server.port=8082",
        "+",
        "+# Database (using OpenTelemetry driver)",
        "+spring.datasource.url=jdbc:otel:h2:mem:db",
        "+spring.datasource.driver-class-name=io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver",
        "+",
        "+# OpenTelemetry (Export only the traces)",
        "+otel.metrics.exporter=none",
        "+otel.logs.exporter=none",
        "EOF"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "59d3005c-d3d3-4480-9bf2-3e37d6428452",
      "contents": [
        "The cart `src/main/resources/application.properties` file should like the following example."
      ]
    },
    {
      "type": "DisplayFile",
      "id": "9669f4c4-7801-4e2b-90de-94c5036a2f70",
      "path": "./demo-application-cart/src/main/resources/application.properties"
    },
    {
      "type": "Markdown",
      "id": "fef4c5c9-4564-4bfb-ae3e-c2d9c3189e36",
      "contents": [
        "We are all set. Let’s build the project."
      ]
    },
    {
      "type": "Command",
      "id": "8b38eeb4-5ef0-4b0d-a8fe-40db5aeefc1c",
      "commands": [
        "./mvnw clean verify"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "81fe4465-099a-4a7e-b42e-18505619b786",
      "contents": [
        "All tests passed."
      ]
    },
    {
      "type": "Markdown",
      "id": "5734cd50-7c0f-4a16-befc-d8a3a77b40e5",
      "contents": [
        "Commit these changes so that you can always revert back to this point."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "b3193318-a157-409d-b3af-becb8ac30f21",
      "commands": [
        "MESSAGE='Add OpenTelemetry'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message 'Add OpenTelemetry and the Jaeger exporter'",
        "git tag --annotate 'v4.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Heading",
      "id": "984ae307-931f-45ce-901d-1db060e4a9a9",
      "level": "H4",
      "title": "Try the application"
    },
    {
      "type": "Markdown",
      "id": "7c06c65f-8cd3-44d8-a838-d8fcf1a34723",
      "contents": [
        "We are now ready to kick some tires. Let’s start the reverse proxy. We have not changed anything in our application endpoints, thus we can use the latest version, `v3`, as is."
      ]
    },
    {
      "type": "Command",
      "id": "77b1f4c8-4628-4223-9867-f3a4ae4d8854",
      "commands": [
        "docker run \\",
        "  --rm \\",
        "  --detach \\",
        "  --name 'demo-application-reverse-proxy' \\",
        "  --publish 80:80 \\",
        "  'demo-application-reverse-proxy:v3'",
        "",
        "# Wait for Nginx to start",
        "# The reverse proxy is configured to only redirect to the cart and catalogue endpoints, thus any other requests will yield a 404",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost/')\" -ne '404' ]; do echo 'Waiting for the reverse proxy to start'; sleep 1; done"
      ],
      "on_failure_commands": [
        "docker cp demo-application-reverse-proxy:/etc/nginx/conf.d/default.conf ./default-error.conf",
        "docker stop demo-application-reverse-proxy",
        "docker stop demo-application-jaeger"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "8ccde213-830d-4816-81c1-667b101ad0cf",
      "contents": [
        "Copy both JAR files to the `demo-application-reverse-proxy/target` directory (for convenience), start both applications and make a few requests. This generates the trace data and sends it to our Jaeger instance."
      ]
    },
    {
      "type": "Command",
      "id": "cc1a05ca-0751-4cce-9fc0-d82c7f729729",
      "commands": [
        "# Copy the JAR files into the same location for convenience",
        "rm -rf './demo'",
        "mkdir './demo'",
        "cp '../demo-application-cart/target/demo-application-cart-0.0.1-SNAPSHOT.jar' './demo'",
        "cp '../demo-application-catalogue/target/demo-application-catalogue-0.0.1-SNAPSHOT.jar' './demo'",
        "",
        "# Start the catalogue application in the background and wait for it to be ready",
        "java -jar './demo/demo-application-catalogue-0.0.1-SNAPSHOT.jar' > './demo/catalogue-output.txt' 2>&1 &",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost/catalogue/item/1')\" -ne '200' ]; do echo 'Waiting for the catalogue application to start'; sleep 1; done",
        "",
        "# Start the rest of the application in the background and wait for it to be ready",
        "java -jar './demo/demo-application-cart-0.0.1-SNAPSHOT.jar' > './demo/cart-output.txt' 2>&1 &",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost/cart/1')\" -ne '200' ]; do echo 'Waiting for the cart application to start'; sleep 1; done"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "docker stop demo-application-reverse-proxy",
        "docker stop demo-application-jaeger"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "78f18f11-7ec8-450e-af2d-edde8e0c93c5",
      "contents": [
        "This starts our applications in the background and waits for it to start.",
        "",
        "Make a few requests to the catalogue items endpoint. We have the following catalogue items in the database.",
        "",
        "| `id` | `caption`     | `description`                                                         |",
        "| ---: | ------------- | --------------------------------------------------------------------- |",
        "|    1 | Leather Sofa  | A very nice and comfortable sofa                                      |",
        "|    2 | Wooden Table  | A large table ideal for 6 to 8 people                                 |",
        "|    3 | Plastic Chair | A robust plastic chair ideal for children and adults alike            |",
        "|    4 | Mug           | The ideal way to start the day                                        |",
        "|    5 | LED TV        | A very large TV set, ideal for those who love to binge-watch TV shows |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "3fdec694-0dd9-4034-8fc7-2f711702ae57",
      "commands": [
        "curl --silent 'http://localhost:8080/catalogue/item/1' | jq"
      ],
      "output": {
        "caption": "The catalogue item with id `1`",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "docker stop demo-application-reverse-proxy",
        "docker stop demo-application-jaeger"
      ]
    },
    {
      "type": "Markdown",
      "id": "654f18ac-fcbd-4036-ad73-aa5f71c1d0de",
      "contents": [
        "The database has three carts, as shown in the following tables.",
        "",
        "| `cart_id` | `item_id` | `caption`     | `quantity` |",
        "| --------: | --------: | ------------- | ---------: |",
        "|         1 |         1 | Leather Sofa  |          1 |",
        "|         1 |         5 | LED TV        |          1 |",
        "|         2 |         2 | Wooden Table  |          1 |",
        "|         2 |         3 | Plastic Chair |          6 |",
        "|         3 |         4 | Mug           |          4 |"
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "eb2f5cd6-2e4c-4854-8957-75ebcbca3b04",
      "commands": [
        "curl --silent 'http://localhost:8080/cart/1' | jq"
      ],
      "output": {
        "caption": "The cart with id `1` and its items",
        "content_type": "json"
      },
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "docker stop demo-application-reverse-proxy",
        "docker stop demo-application-jaeger"
      ]
    },
    {
      "type": "Markdown",
      "id": "07162efe-e727-426a-83b1-4c0ccbfa8dbf",
      "contents": [
        "Stop the application once ready."
      ],
      "tags": [
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "55dd899f-47fc-48e4-a7f0-2b0e5b8527e9",
      "commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\""
      ],
      "tags": [
        "optional"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "docker stop demo-application-reverse-proxy",
        "docker stop demo-application-jaeger"
      ]
    },
    {
      "type": "Markdown",
      "id": "c2c3d14e-38e4-4f2e-a03d-053d46395220",
      "contents": [
        "All worked as expected. If we open [http://localhost:16686/](http://localhost:16686/), we can look into the traces that our application produced.",
        "",
        "![Distributed tracing](./assets/images/Distributed%20tracing.png)",
        "",
        "Our services do not need to be running to access Jaeger.",
        "",
        "Some organisations have ditched big diagrams in favour of distributed tracing, using Jaeger, [Zipkin](https://zipkin.io/) or the like. These tools provide a real-time view of the whole application as they capture the communication that is happening both internally, within the same service and between each service alike.",
        "",
        "Needless to say that observability comes with an overhead. Each service is collecting and transmitting data to the central collector, Jaeger in our example. This has a CPU, memory and network costs. While in many cases, the benefits overcome the costs, it is important to keep an eye on this and adjust the sampling rate to mitigate overwhelming the infrastructure where the application is running.",
        "",
        "We can now stop both the reverse proxy and the Jaeger instance."
      ]
    },
    {
      "type": "Command",
      "id": "ea893d94-52dc-4fb6-8015-5398fc16f148",
      "commands": [
        "docker stop demo-application-reverse-proxy",
        "docker stop demo-application-jaeger"
      ],
      "on_failure_commands": [
        "docker stop demo-application-reverse-proxy",
        "docker stop demo-application-jaeger"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "e2185d26-95e2-4518-b728-6b0e9a4f8fa9",
      "contents": [
        "We have improved our application’s observability by utilising OpenTelemetry and while this is important, it does not address the issue we have. Our services are tightly coupled such that the cart service cannot function without the catalogue service. Furthermore, the cart service needs to know where the catalogue service is as it needs to make REST requests to it. The cart service requires data from the catalogue service, and we decided to make use of synchronous REST requests. This approach is easy to implement as it does not require additional services or infrastructure.",
        "",
        "Messaging is an alternative approach where a producer, such as the catalogue service, sends messages to a messaging queue from where a consumer, such as the cart service, can then read them. The producer and consumer are independent of each other and the consumer can consume the messages even when the producer is down. In other words, the cart service can work even when the catalogue service is offline. While this sounds great, it comes with a caveat. We need to set up a messaging queue and change the application flow considerably. that’s the topic on the next section."
      ]
    },
    {
      "type": "Heading",
      "id": "7be7a1e8-b2c3-4ccb-85c1-633a42389216",
      "level": "H2",
      "title": "Loosely Coupled Distributed Architecture"
    },
    {
      "type": "Markdown",
      "id": "8f9896d3-b152-48fe-a12f-d23525f273cf",
      "contents": [
        "The cart service is tightly coupled to the catalogue service. When the user requests the cart information or adds a new item to the cart, the cart service needs to communicate with the catalogue service as shown below.",
        "",
        "![Read cart details distributed high coupling](./assets/images/Read%20cart%20details%20distributed%20high%20coupling.png)",
        "",
        "The cart service is tightly coupled to the catalogue service. As mentioned before this is not an ideal situation as while we inherited the complexities of a distributed application we did not use most of its benefits.",
        "",
        "We can decouple these two services by introducing a message queue. The catalogue will send an event every time a new catalogue item is added to the catalogue service. The cart service will listen to these events, and it will update its copy of the catalogue items table. Yes, that’s right. We will create a new table within the cart service where we will have all the catalogue items.",
        "",
        "![Add new catalogue item distributed loosely coupled](./assets/images/Add%20new%20catalogue%20item%20distributed%20loosely%20coupled.png)",
        "",
        "The cart will join with this table every time it needs the catalogue item and will not make REST requests every time.",
        "",
        "![Read cart details distributed loosely coupled](./assets/images/Read%20cart%20details%20distributed%20loosely%20coupled.png)",
        "",
        "On some level, this approach simplifies the fetching of the cart and catalogue items, but it will shift the complexity elsewhere as you will see soon. As you may have observed, there is no such thing as a free lunch. Everything has its tradeoffs and in some cases it is hard to tell upfront which will and which will not.",
        "",
        "There are many good messaging queues available, such as [RabbitMQ](https://www.rabbitmq.com/) and [ActiveMQ](https://activemq.apache.org/). In this example we will use RabbitMQ as this trends better according to [Google trends](https://trends.google.com/trends/explore?cat=32&q=RabbitMQ,ActiveMQ&hl=en-US). While populism does not necessarily lead to better products, it does provide more examples and documentation for us to learn and adapt. Furthermore, the more something is used and tested, the less chances we have to encounter a new issue."
      ]
    },
    {
      "type": "Heading",
      "id": "8e1efa16-f43e-4d96-ae69-158f47103f0c",
      "level": "H3",
      "title": "RabbitMQ"
    },
    {
      "type": "Markdown",
      "id": "dc347fca-95a7-4bf7-82ba-6ad5c13d9492",
      "contents": [
        "Like with many other services, such as Jaeger, containers are the simplest way to run RabbitMQ. We will use the current latest container image `rabbitmq:3.13.2-management`, which also provides a user interface from which we can monitor the queues."
      ]
    },
    {
      "type": "Command",
      "id": "76715534-f341-49fc-b39d-74a8ed8df9b4",
      "commands": [
        "docker run \\",
        "  --rm \\",
        "  --detach \\",
        "  --name 'demo-application-messaging-queue' \\",
        "  --env RABBITMQ_DEFAULT_USER=demo \\",
        "  --env RABBITMQ_DEFAULT_PASS=a_RAND0M_and_S3CUR3_password \\",
        "  --publish 5672:5672 \\",
        "  --publish 15672:15672 \\",
        "  'rabbitmq:3.13.2-management'",
        "",
        "# Wait for RabbitMQ to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:15672')\" -ne '200' ]; do echo 'Waiting for RabbitMQ to start'; sleep 1; done"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ]
    },
    {
      "type": "Markdown",
      "id": "d58efc54-051c-40e9-86bd-e78dd2aefb95",
      "contents": [
        "The catalogue service will be sending messages to RabbitMQ everytime a new catalogue item is created. The cart service, on the other hand, will be listening for messages from RabbitMQ. For this to work we need to have the following items.",
        "",
        "- A exchange: where the catalogue service will send messages.",
        "- A queue: from where the cart service will read messages.",
        "- Connect the exchange to the queue so that the messages sent by the catalogue service find their way to the cart service.",
        "",
        "There are various ways we can configure this. The simplest option is to execute three commands. While this is the simplest way, it may not be the best way. I prefer infrastructure as code over this and only chose this option to keep things simple and focused on the workshop’s goals and objectives.",
        "",
        "Let’s create everything before we proceed."
      ]
    },
    {
      "type": "Command",
      "id": "33ec564c-158b-4a02-a94c-1603ab3d566d",
      "commands": [
        "# Create the exchange where the messages will be sent",
        "docker exec demo-application-messaging-queue \\",
        "  rabbitmqadmin --username='demo' --password='a_RAND0M_and_S3CUR3_password' declare exchange name='demo-exchange' type='topic'",
        "",
        "# Create the queue from where the messages will be read",
        "docker exec demo-application-messaging-queue \\",
        "  rabbitmqadmin --username='demo' --password='a_RAND0M_and_S3CUR3_password' declare queue name='demo-queue'",
        "",
        "# Bind the exchange with the queue so that the messages sent by the catalogue service can be read by the cart service",
        "docker exec demo-application-messaging-queue \\",
        "  rabbitmqadmin --username='demo' --password='a_RAND0M_and_S3CUR3_password' declare binding source='demo-exchange' destination='demo-queue' routing_key='demo.catalogue.new'"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ]
    },
    {
      "type": "Markdown",
      "id": "43f9ec4e-3f6d-4475-884b-2178c1c11a55",
      "contents": [
        "Access the RabbitMQ admin page: [http://localhost:15672](http://localhost:15672). We are using the following credentials.",
        "",
        "| Property      | Value                          |",
        "| ------------- | ------------------------------ |",
        "| Username      | `demo`                         |",
        "| Password      | `a_RAND0M_and_S3CUR3_password` |",
        "| Exchange Name | `demo-exchange`                |",
        "| Queue Name    | `demo-queue`                   |",
        "| Routing Key   | `demo.catalogue.new`           |",
        "",
        "Login to RabbitMD management UI",
        "",
        "![RabbitMQ Management UI](./assets/images/RabbitMQ%20Management%20UI.png)",
        "",
        "if you navigate to the _Exchanges_ tab, you will see our new exchange (`demo-exchange`)",
        "",
        "![RabbitMQ Management UI - Exchanges.png](./assets/images/RabbitMQ%20Management%20UI%20-%20Exchanges.png)",
        "",
        "if you navigate to the _Queues and Streams_ tab, you will see our new queue (`demo-queue`)",
        "",
        "![RabbitMQ Management UI - Queues and Streams.png](./assets/images/RabbitMQ%20Management%20UI%20-%20Queues%20and%20Streams.png)",
        "",
        "In case of troubleshooting, you can log into the running RabbitMQ container using the following command.",
        "",
        "```",
        "docker exec --interactive --tty demo-application-messaging-queue /bin/sh",
        "```",
        "",
        "Our message queue is ready to be used. Note that we need to update our projects so that they start exchanging the data through the message queue. We will do this in stages. Similar to what we have done before, we will first grow and then shrink as listed below.",
        "",
        "1. Update the catalogue so that it emits events whenever new catalogue items are added (_grow_).",
        "2. Update the cart so that it consumes the emitted events.",
        "3. Refactor the catalogue so that it only exposes the necessary endpoints (_shrink_).",
        "",
        "This is not a simple change, so let’s get started."
      ]
    },
    {
      "type": "Heading",
      "id": "f0283c73-c4e1-4052-8917-8f050f726759",
      "level": "H3",
      "title": "Step 1: Update the catalogue so that it emits events whenever new catalogue items are added (_grow_)"
    },
    {
      "type": "Todo",
      "id": "db8a2610-dacf-44dc-b4bb-007884cff145",
      "comments": [
        "Update the documentation"
      ]
    },
    {
      "type": "Markdown",
      "id": "b5d72937-4d2e-415b-a42d-fdf864ddc233",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "356fc579-7abc-4b34-bc17-8fa87489cb63",
      "commands": [
        "git tag --annotate 'v5.0' --message 'Before publishing new catalogue item events'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Command",
      "id": "fdf93314-60ca-453d-a9c8-8b16fe60c668",
      "commands": [
        "patch -f -p1 -u './src/main/resources/banner.txt' << EOF",
        "--- a/src/main/resources/banner.txt",
        "+++ b/src/main/resources/banner.txt",
        "@@ -4,4 +4,4 @@",
        " ██║  ██║██║╚════██║   ██║   ██╔══██╗██║██╔══██╗██║   ██║   ██║   ██╔══╝  ██║  ██║    ██║ ██║     ██╔══██║   ██║   ██╔══██║██║     ██║   ██║██║   ██║██║   ██║██╔══╝   ██║",
        " ██████╔╝██║███████║   ██║   ██║  ██║██║██████╔╝╚██████╔╝   ██║   ███████╗██████╔╝    ╚██╗╚██████╗██║  ██║   ██║   ██║  ██║███████╗╚██████╔╝╚██████╔╝╚██████╔╝███████╗██╔╝",
        " ╚═════╝ ╚═╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝╚═════╝  ╚═════╝    ╚═╝   ╚══════╝╚═════╝      ╚═╝ ╚═════╝╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝╚══════╝ ╚═════╝  ╚═════╝  ╚═════╝ ╚══════╝╚═╝",
        "-Distributed Application using Synchronous Communication (Http/REST)",
        "+Distributed Application using Asynchronous Communication (RabbitMQ)",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Command",
      "id": "b167c189-3e24-4099-a21d-cf1ce16b4f14",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml",
        "+++ b/pom.xml",
        "@@ -46,6 +46,12 @@",
        "             <artifactId>spring-boot-starter-web</artifactId>",
        "         </dependency>",
        " ",
        "+        <!-- Messaging -->",
        "+        <dependency>",
        "+            <groupId>org.springframework.boot</groupId>",
        "+            <artifactId>spring-boot-starter-amqp</artifactId>",
        "+        </dependency>",
        "+",
        "         <!-- Database -->",
        "         <dependency>",
        "             <groupId>com.h2database</groupId>",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Command",
      "id": "ec1ecafa-e79d-4082-b921-12d5fb13cae6",
      "commands": [
        "patch -f -p1 -u './src/main/resources/application.properties' << EOF",
        "--- a/src/main/resources/application.properties",
        "+++ b/src/main/resources/application.properties",
        "@@ -8,3 +8,9 @@ spring.datasource.driver-class-name=io.opentelemetry.instrumentation.jdbc.OpenTe",
        " # OpenTelemetry (Export only the traces)",
        " otel.metrics.exporter=none",
        " otel.logs.exporter=none",
        "+",
        "+# RabbitMQ",
        "+spring.rabbitmq.host=127.0.0.1",
        "+spring.rabbitmq.port=5672",
        "+spring.rabbitmq.username=demo",
        "+spring.rabbitmq.password=a_RAND0M_and_S3CUR3_password",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Command",
      "id": "c58b23c8-545f-4ebf-8af5-1261ff5be537",
      "commands": [
        "mkdir -p './src/main/java/demo/infrastructure'"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Command",
      "id": "c938cc34-f473-43c3-9806-665169397827",
      "commands": [
        "cat << EOF > './src/main/java/demo/infrastructure/AmqpConfiguration.java'",
        "package demo.infrastructure;",
        "",
        "import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;",
        "import org.springframework.amqp.support.converter.MessageConverter;",
        "import org.springframework.context.annotation.Bean;",
        "import org.springframework.context.annotation.Configuration;",
        "",
        "@Configuration",
        "public class AmqpConfiguration {",
        "",
        "    @Bean",
        "    public MessageConverter jsonMessageConverter() {",
        "        return new Jackson2JsonMessageConverter();",
        "    }",
        "}",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Command",
      "id": "e313f873-51da-4bb0-99ea-996512ba8523",
      "commands": [
        "cat << EOF > './src/main/java/demo/catalogue/CatalogueItemGateway.java'",
        "package demo.catalogue;",
        "",
        "import org.springframework.amqp.rabbit.core.RabbitTemplate;",
        "import org.springframework.stereotype.Service;",
        "",
        "import static java.util.Objects.requireNonNull;",
        "",
        "@Service",
        "public class CatalogueItemGateway {",
        "",
        "    private final RabbitTemplate rabbitTemplate;",
        "",
        "    public CatalogueItemGateway(final RabbitTemplate rabbitTemplate) {",
        "        this.rabbitTemplate = requireNonNull(rabbitTemplate, \"The rabbit template cannot be null\");",
        "    }",
        "",
        "    public void newCatalogueItem(final CatalogueItemEntity item) {",
        "        requireNonNull(item, \"The catalogue item entry cannot be null\");",
        "",
        "        rabbitTemplate.convertAndSend(\"demo-exchange\", \"demo.catalogue.new\", CatalogueItemTo.of(item));",
        "    }",
        "}",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Command",
      "id": "844c12d0-ba05-465d-96ff-0293aa4a9653",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/catalogue/CatalogueItemService.java' << EOF",
        "--- a/src/main/java/demo/catalogue/CatalogueItemService.java",
        "+++ b/src/main/java/demo/catalogue/CatalogueItemService.java",
        "@@ -12,9 +12,11 @@ import static java.util.Objects.requireNonNull;",
        " public class CatalogueItemService {",
        " ",
        "     private final CatalogueItemRepository repository;",
        "+    private final CatalogueItemGateway gateway;",
        " ",
        "-    public CatalogueItemService(final CatalogueItemRepository repository) {",
        "+    public CatalogueItemService(final CatalogueItemRepository repository, final CatalogueItemGateway gateway) {",
        "         this.repository = requireNonNull(repository, \"Repository cannot be null\");",
        "+        this.gateway = requireNonNull(gateway, \"Gateway cannot be null\");",
        "     }",
        " ",
        "     public Optional<CatalogueItemEntity> findById(final long id) {",
        "@@ -26,6 +28,8 @@ public class CatalogueItemService {",
        "     }",
        " ",
        "     public CatalogueItemEntity add(final CatalogueItemEntity entity) {",
        "         requireNonNull(entity, \"Entity cannot be null\");",
        "-        return repository.save(entity);",
        "+        final CatalogueItemEntity saved = repository.save(entity);",
        "+        gateway.newCatalogueItem(saved);",
        "+        return saved;",
        "     }",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Command",
      "id": "87acdf6b-dbd6-492d-9b49-5ed77f67198b",
      "commands": [
        "patch -f -p1 -u './src/test/java/demo/catalogue/CatalogueItemControllerTest.java' << EOF",
        "--- a/src/test/java/demo/catalogue/CatalogueItemControllerTest.java",
        "+++ b/src/test/java/demo/catalogue/CatalogueItemControllerTest.java",
        "@@ -2,6 +2,8 @@ package demo.catalogue;",
        " ",
        " import org.junit.jupiter.api.Nested;",
        " import org.junit.jupiter.api.Test;",
        "+import org.springframework.amqp.core.Message;",
        "+import org.springframework.amqp.rabbit.core.RabbitTemplate;",
        " import org.springframework.beans.factory.annotation.Autowired;",
        " import org.springframework.boot.test.context.SpringBootTest;",
        " import org.springframework.boot.test.web.client.TestRestTemplate;",
        "@@ -10,7 +12,9 @@ import org.springframework.http.HttpMethod;",
        " import org.springframework.http.HttpStatus;",
        " import org.springframework.http.ResponseEntity;",
        " ",
        "+import java.nio.charset.StandardCharsets;",
        " import java.util.List;",
        "+import java.util.concurrent.TimeUnit;",
        " import java.util.regex.Pattern;",
        " import java.util.stream.Collectors;",
        " import java.util.stream.LongStream;",
        "@@ -103,6 +107,9 @@ class CatalogueItemControllerTest {",
        "     @Nested",
        "     class AddCatalogueItemTest {",
        " ",
        "+        @Autowired",
        "+        private RabbitTemplate rabbitTemplate;",
        "+",
        "         @Test",
        "         void returnTheNewIdOfTheAddedCatalogueItem() {",
        "             final NewCatalogueItemTo item = new NewCatalogueItemTo(\"Green Plant\", \"Put a little life in your living room!!\");",
        "@@ -115,6 +122,23 @@ class CatalogueItemControllerTest {",
        " ",
        "             assertThat(response.getBody())",
        "                     .isEqualTo(new CatalogueItemTo(id, item.caption(), item.description()));",
        "+",
        "+            final Message received = rabbitTemplate.receive(\"demo-queue\", TimeUnit.SECONDS.toMillis(5));",
        "+            assertThat(received)",
        "+                    .describedAs(\"The message should be sent to the queue\")",
        "+                    .isNotNull();",
        "+",
        "+            assertThat(received.getMessageProperties().getHeaders().get(\"__TypeId__\"))",
        "+                    .describedAs(\"The type is used by consumers to map this object to their respective objects\")",
        "+                    .isEqualTo(\"demo.catalogue.CatalogueItemTo\");",
        "+",
        "+            final byte[] expectedBody = \"\"\"",
        "+                    {\"id\":%d,\"caption\":\"%s\",\"description\":\"%s\"}\"\"\"",
        "+                    .formatted(id, item.caption(), item.description())",
        "+                    .getBytes(StandardCharsets.UTF_8);",
        "+            assertThat(received.getBody())",
        "+                    .describedAs(\"The message body should match the expected pattern\")",
        "+                    .isEqualTo(expectedBody);",
        "         }",
        " ",
        "         private static long assertThatHeaderLocationHasCatalogueItemId(final ResponseEntity<CatalogueItemTo> response) {",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Command",
      "id": "cad094a2-75cf-47c3-bcad-3493a188494c",
      "commands": [
        "./mvnw clean verify"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Command",
      "id": "40758b97-1017-4370-8e26-5c4982737b11",
      "commands": [
        "MESSAGE='Publish new catalogue item events'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message '...' \\",
        "  --message 'This is the first step towards a loosely coupled distributed architecture.'",
        "git tag --annotate 'v5.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Heading",
      "id": "6c704edb-94ea-452a-90ee-2d1fcb00e992",
      "level": "H3",
      "title": "Step 2: Update the cart so that it consumes the emitted events"
    },
    {
      "type": "Todo",
      "id": "a6c9949b-9c34-42c4-9e8d-16e146ee3986",
      "comments": [
        "Update the documentation"
      ]
    },
    {
      "type": "Markdown",
      "id": "1e30c2ed-70a0-4c39-892d-243b5f03e492",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "d84f0bd8-a037-424b-bfec-5473238fed13",
      "commands": [
        "git tag --annotate 'v5.0' --message 'Before consuming new catalogue item events'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Command",
      "id": "c06f0700-4252-4595-ae00-beccb44e26e4",
      "commands": [
        "patch -f -p1 -u './src/main/resources/banner.txt' << EOF",
        "--- a/src/main/resources/banner.txt",
        "+++ b/src/main/resources/banner.txt",
        "@@ -4,4 +4,4 @@",
        " ██║  ██║██║╚════██║   ██║   ██╔══██╗██║██╔══██╗██║   ██║   ██║   ██╔══╝  ██║  ██║    ██║ ██║     ██╔══██║██╔══██╗   ██║    ██║",
        " ██████╔╝██║███████║   ██║   ██║  ██║██║██████╔╝╚██████╔╝   ██║   ███████╗██████╔╝    ╚██╗╚██████╗██║  ██║██║  ██║   ██║   ██╔╝",
        " ╚═════╝ ╚═╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝╚═════╝  ╚═════╝    ╚═╝   ╚══════╝╚═════╝      ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚═╝",
        "-Distributed Application using Synchronous Communication (Http/REST)",
        "+Distributed Application using Asynchronous Communication (RabbitMQ)",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Command",
      "id": "2cf3495d-6190-420a-a6a7-7ef74f16d589",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml",
        "+++ b/pom.xml",
        "@@ -53,6 +53,12 @@",
        "             <artifactId>spring-boot-starter-web</artifactId>",
        "         </dependency>",
        " ",
        "+        <!-- Messaging -->",
        "+        <dependency>",
        "+            <groupId>org.springframework.boot</groupId>",
        "+            <artifactId>spring-boot-starter-amqp</artifactId>",
        "+        </dependency>",
        "+",
        "         <!-- Telemetry -->",
        "         <dependency>",
        "             <groupId>io.opentelemetry.instrumentation</groupId>",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Command",
      "id": "80eeb8f4-621d-4421-91c5-07466282ce96",
      "commands": [
        "patch -f -p1 -u './src/main/resources/application.properties' << EOF",
        "--- a/src/main/resources/application.properties",
        "+++ b/src/main/resources/application.properties",
        "@@ -8,3 +8,9 @@ spring.datasource.driver-class-name=io.opentelemetry.instrumentation.jdbc.OpenTe",
        " # OpenTelemetry (Export only the traces)",
        " otel.metrics.exporter=none",
        " otel.logs.exporter=none",
        "+",
        "+# RabbitMQ",
        "+spring.rabbitmq.host=127.0.0.1",
        "+spring.rabbitmq.port=5672",
        "+spring.rabbitmq.username=demo",
        "+spring.rabbitmq.password=a_RAND0M_and_S3CUR3_password",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Command",
      "id": "71f6cebf-2c1e-436e-92f7-de4bbbd43e5a",
      "commands": [
        "mkdir -p './src/main/java/demo/infrastructure'"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Command",
      "id": "641aaf7c-38f4-4435-a342-d0e75e46d93a",
      "commands": [
        "cat << EOF > './src/main/java/demo/infrastructure/AmqpConfiguration.java'",
        "package demo.infrastructure;",
        "",
        "import demo.external.catalogue.CatalogueItemTo;",
        "import org.springframework.amqp.support.converter.ClassMapper;",
        "import org.springframework.amqp.support.converter.DefaultClassMapper;",
        "import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;",
        "import org.springframework.amqp.support.converter.MessageConverter;",
        "import org.springframework.context.annotation.Bean;",
        "import org.springframework.context.annotation.Configuration;",
        "",
        "import java.util.HashMap;",
        "import java.util.Map;",
        "",
        "import static java.util.Objects.requireNonNull;",
        "",
        "@Configuration",
        "public class AmqpConfiguration {",
        "",
        "    @Bean",
        "    public MessageConverter jsonMessageConverter(final ClassMapper classMapper) {",
        "        requireNonNull(classMapper, \"Class mapper cannot be nullt\");",
        "",
        "        final Jackson2JsonMessageConverter converter = new Jackson2JsonMessageConverter();",
        "        converter.setClassMapper(classMapper);",
        "        return converter;",
        "    }",
        "",
        "    @Bean",
        "    public DefaultClassMapper classMapper() {",
        "        final Map<String, Class<?>> idClassMapping = new HashMap<>();",
        "        idClassMapping.put(\"demo.catalogue.CatalogueItemTo\", CatalogueItemTo.class);",
        "",
        "        final DefaultClassMapper classMapper = new DefaultClassMapper();",
        "        classMapper.setIdClassMapping(idClassMapping);",
        "        return classMapper;",
        "    }",
        "}",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Command",
      "id": "b99d21ad-6024-4141-b60e-b4a5a1366b0b",
      "commands": [
        "cat << EOF > './src/main/java/demo/external/catalogue/CatalogueItemMessageHandler.java'",
        "package demo.external.catalogue;",
        "",
        "import org.springframework.amqp.rabbit.annotation.RabbitListener;",
        "import org.springframework.stereotype.Service;",
        "",
        "import static java.util.Objects.requireNonNull;",
        "",
        "@Service",
        "public class CatalogueItemMessageHandler {",
        "",
        "    private final CatalogueRepository repository;",
        "",
        "    public CatalogueItemMessageHandler(final CatalogueRepository repository) {",
        "        this.repository = requireNonNull(repository, \"Catalogue repository cannot be null\");",
        "    }",
        "",
        "    @RabbitListener(queues = \"demo-queue\")",
        "    public void newCatalogueItem(final CatalogueItemTo item) {",
        "        requireNonNull(item, \"Catalogue item cannot be null\");",
        "        repository.save(item.toEntity());",
        "    }",
        "}",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Command",
      "id": "40391e2d-51ab-4cf2-b911-be8d4372b6ef",
      "commands": [
        "cat << EOF > './src/main/java/demo/external/catalogue/CatalogueRepository.java'",
        "package demo.external.catalogue;",
        "",
        "import org.springframework.data.repository.ListCrudRepository;",
        "",
        "public interface CatalogueRepository extends ListCrudRepository<CatalogueItemEntity, Long> {}",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Markdown",
      "id": "d9557850-581c-449e-9dda-da032a1a2546",
      "contents": [
        "This is quite a big change!!"
      ]
    },
    {
      "type": "Command",
      "id": "939e4b47-3efa-45ce-b808-6f86e30e04e7",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/external/catalogue/CatalogueItemEntity.java' << EOF",
        "--- a/src/main/java/demo/external/catalogue/CatalogueItemEntity.java",
        "+++ b/src/main/java/demo/external/catalogue/CatalogueItemEntity.java",
        "@@ -1,3 +1,51 @@",
        " package demo.external.catalogue;",
        " ",
        "-public record CatalogueItemEntity(long id, String caption) {}",
        "+import jakarta.persistence.Entity;",
        "+import jakarta.persistence.Id;",
        "+",
        "+import java.io.Serial;",
        "+import java.io.Serializable;",
        "+import java.util.Objects;",
        "+",
        "+@Entity(name = \"external_catalogue_item\")",
        "+public class CatalogueItemEntity implements Serializable {",
        "+",
        "+    @Serial",
        "+    private static final long serialVersionUID = 1L;",
        "+",
        "+    @Id",
        "+    private long id;",
        "+    private String caption;",
        "+",
        "+    protected CatalogueItemEntity() {}",
        "+",
        "+    public CatalogueItemEntity(final long id, final String caption) {",
        "+        this.id = id;",
        "+        this.caption = caption;",
        "+    }",
        "+",
        "+    public long id() {",
        "+        return id;",
        "+    }",
        "+",
        "+    public String caption() {",
        "+        return caption;",
        "+    }",
        "+",
        "+    @Override",
        "+    public boolean equals(final Object object) {",
        "+        return object instanceof final CatalogueItemEntity entity",
        "+                && id == entity.id",
        "+                && Objects.equals(caption, entity.caption);",
        "+    }",
        "+",
        "+    @Override",
        "+    public int hashCode() {",
        "+        return Objects.hash(id, caption);",
        "+    }",
        "+",
        "+    @Override",
        "+    public String toString() {",
        "+        return \"CatalogueItemEntity[id=\" + id + \", caption=\" + caption + \"]\";",
        "+    }",
        "+}",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "DisplayFile",
      "id": "260f1201-b030-489d-930d-ba0b9a033073",
      "path": "./demo-application-cart/src/main/java/demo/external/catalogue/CatalogueItemEntity.java"
    },
    {
      "type": "Command",
      "id": "72337055-bc42-4990-9fd2-6332e891e6da",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartEntity.java' << EOF",
        "--- a/src/main/java/demo/cart/CartEntity.java",
        "+++ b/src/main/java/demo/cart/CartEntity.java",
        "@@ -41,9 +41,8 @@ public class CartEntity implements Serializable {",
        "     public void addItem(final CatalogueItemEntity item, final int quantity) {",
        "         requireNonNull(item, \"Catalogue item cannot be null\");",
        " ",
        "-        final CartItemEntityPrimaryKey cartItemId = new CartItemEntityPrimaryKey(this, item.id());",
        "+        final CartItemEntityPrimaryKey cartItemId = new CartItemEntityPrimaryKey(this, item);",
        "         final CartItemEntity cartItem = new CartItemEntity(cartItemId, quantity);",
        "-        cartItem.catalogueItemEntity(item);",
        "         items.add(cartItem);",
        "     }",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Command",
      "id": "fbedad84-f4fe-4fca-9a46-a54aaeba50d1",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartItemEntity.java' << EOF",
        "--- a/src/main/java/demo/cart/CartItemEntity.java",
        "+++ b/src/main/java/demo/cart/CartItemEntity.java",
        "@@ -1,6 +1,5 @@",
        " package demo.cart;",
        " ",
        "-import demo.external.catalogue.CatalogueItemEntity;",
        " import jakarta.persistence.EmbeddedId;",
        " import jakarta.persistence.Entity;",
        " ",
        "@@ -47,10 +46,6 @@ public class CartItemEntity implements Serializable {",
        "         this.quantity += offset;",
        "     }",
        " ",
        "-    public void catalogueItemEntity(final CatalogueItemEntity item) {",
        "-        this.id.catalogueItemEntity(item);",
        "-    }",
        "-",
        "     @Override",
        "     public boolean equals(final Object object) {",
        "         return object instanceof final CartItemEntity other",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Command",
      "id": "67eca93c-0510-415a-8099-ec234a05360b",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartItemEntityPrimaryKey.java' << EOF",
        "--- a/src/main/java/demo/cart/CartItemEntityPrimaryKey.java",
        "+++ b/src/main/java/demo/cart/CartItemEntityPrimaryKey.java",
        "@@ -20,16 +20,16 @@ public class CartItemEntityPrimaryKey implements Serializable {",
        "     @ManyToOne(optional = false)",
        "     @JoinColumn(name = \"cartId\")",
        "     private CartEntity cart;",
        "-    private Long itemId;",
        " ",
        "-    /* This is not persisted, and it attached to the entity at a later stage */",
        "-    private transient CatalogueItemEntity item;",
        "+    @ManyToOne(optional = false)",
        "+    @JoinColumn(name = \"itemId\")",
        "+    private CatalogueItemEntity item;",
        " ",
        "     protected CartItemEntityPrimaryKey() {}",
        " ",
        "-    public CartItemEntityPrimaryKey(final CartEntity cart, final Long itemId) {",
        "+    public CartItemEntityPrimaryKey(final CartEntity cart, final CatalogueItemEntity item) {",
        "         this.cart = cart;",
        "-        this.itemId = itemId;",
        "+        this.item = item;",
        "     }",
        " ",
        "     public Long cartId() {",
        "@@ -37,21 +37,13 @@ public class CartItemEntityPrimaryKey implements Serializable {",
        "     }",
        " ",
        "     public Long itemId() {",
        "-        return itemId;",
        "+        return mapIfNotNull(item, CatalogueItemEntity::id);",
        "     }",
        " ",
        "     public String itemCaption() {",
        "         return mapIfNotNull(item, CatalogueItemEntity::caption);",
        "     }",
        " ",
        "-    public void catalogueItemEntity(final CatalogueItemEntity item) {",
        "-        if (item != null && item.id() != itemId) {",
        "-            throw new IllegalArgumentException(\"Catalogue entity does not match item id\");",
        "-        }",
        "-",
        "-        this.item = item;",
        "-    }",
        "-",
        "     @Override",
        "     public boolean equals(final Object object) {",
        "         return object instanceof final CartItemEntityPrimaryKey other",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Command",
      "id": "283ec498-b2ed-40dc-97dd-08c23357c556",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/cart/CartService.java' << EOF",
        "--- a/src/main/java/demo/cart/CartService.java",
        "+++ b/src/main/java/demo/cart/CartService.java",
        "@@ -1,16 +1,11 @@",
        " package demo.cart;",
        " ",
        " import demo.external.catalogue.CatalogueItemEntity;",
        "-import demo.external.catalogue.CatalogueItemGateway;",
        "+import demo.external.catalogue.CatalogueRepository;",
        " import jakarta.transaction.Transactional;",
        " import org.springframework.stereotype.Service;",
        " ",
        "-import java.util.List;",
        "-import java.util.Map;",
        " import java.util.Optional;",
        "-import java.util.Set;",
        "-import java.util.function.Function;",
        "-import java.util.stream.Collectors;",
        " ",
        " import static java.util.Objects.requireNonNull;",
        " ",
        "@@ -18,17 +13,16 @@ import static java.util.Objects.requireNonNull;",
        " public class CartService {",
        " ",
        "     private final CartRepository cartRepository;",
        "-    private final CatalogueItemGateway itemGateway;",
        "+    private final CatalogueRepository itemRepository;",
        " ",
        "     public CartService(final CartRepository cartRepository,",
        "-                       final CatalogueItemGateway itemGateway) {",
        "+                       final CatalogueRepository itemRepository) {",
        "         this.cartRepository = requireNonNull(cartRepository, \"Cart repository cannot be null\");",
        "-        this.itemGateway = requireNonNull(itemGateway, \"Catalogue item gateway cannot be null\");",
        "+        this.itemRepository = requireNonNull(itemRepository, \"Catalogue item repository cannot be null\");",
        "     }",
        " ",
        "     public Optional<CartEntity> findById(final long id) {",
        "-        return cartRepository.findById(id)",
        "-                .map(this::fetchCartItemsCaption);",
        "+        return cartRepository.findById(id);",
        "     }",
        " ",
        "     @Transactional",
        "@@ -44,7 +38,7 @@ public class CartService {",
        " ",
        "         final CartItemEntity itemInCart = cart.findCartItemWithId(itemId);",
        "         if (itemInCart == null) {",
        "-            final Optional<CatalogueItemEntity> optionalItem = itemGateway.findById(itemId);",
        "+            final Optional<CatalogueItemEntity> optionalItem = itemRepository.findById(itemId);",
        " ",
        "             /* Catalogue Item not found */",
        "             if (optionalItem.isEmpty()) {",
        "@@ -57,27 +51,6 @@ public class CartService {",
        "         }",
        " ",
        "         final CartEntity savedCart = cartRepository.save(cart);",
        "-        return Optional.of(fetchCartItemsCaption(savedCart));",
        "-    }",
        "-",
        "-    private CartEntity fetchCartItemsCaption(final CartEntity cart) {",
        "-        final List<CartItemEntity> items = cart.items();",
        "-        final Set<Long> cartItemIds = items.stream()",
        "-                .map(CartItemEntity::itemId)",
        "-                .collect(Collectors.toSet());",
        "-",
        "-        final Map<Long, CatalogueItemEntity> catalogueItems = itemGateway.findAllById(cartItemIds)",
        "-                .stream()",
        "-                .collect(Collectors.toMap(CatalogueItemEntity::id, Function.identity()));",
        "-",
        "-        for (CartItemEntity item : cart.items()) {",
        "-            final Long id = item.itemId();",
        "-            final CatalogueItemEntity entity = catalogueItems.get(id);",
        "-            if (entity != null) {",
        "-                item.catalogueItemEntity(entity);",
        "-            }",
        "-        }",
        "-",
        "-        return cart;",
        "+        return Optional.of(savedCart);",
        "     }",
        " }",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Command",
      "id": "3da3d5e0-47fb-4385-a440-db5343b4a073",
      "commands": [
        "cat << EOF > './src/main/resources/db/migration/V2__create_catalogue.sql'",
        "CREATE TABLE external_catalogue_item (",
        "  id          INT NOT NULL,",
        "  caption     VARCHAR(128) NOT NULL,",
        "  PRIMARY KEY (id)",
        ");",
        "",
        "INSERT INTO external_catalogue_item (id, caption) VALUES",
        "  (1, 'Leather Sofa'),",
        "  (2, 'Wooden Table'),",
        "  (3, 'Plastic Chair'),",
        "  (4, 'Mug'),",
        "  (5, 'LED TV');",
        "",
        "ALTER TABLE cart_item",
        "  ADD CONSTRAINT fk_cart_item_catalogue_id FOREIGN KEY (item_id) REFERENCES external_catalogue_item(id);",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Command",
      "id": "4dd3971b-0707-4cef-a7f2-6d85cac62987",
      "commands": [
        "patch -f -p1 -u './src/test/java/demo/cart/CartControllerTest.java' << EOF",
        "--- a/src/test/java/demo/cart/CartControllerTest.java",
        "+++ b/src/test/java/demo/cart/CartControllerTest.java",
        "@@ -1,11 +1,7 @@",
        " package demo.cart;",
        " ",
        "-import org.junit.jupiter.api.AfterAll;",
        "-import org.junit.jupiter.api.BeforeAll;",
        " import org.junit.jupiter.api.Nested;",
        " import org.junit.jupiter.api.Test;",
        "-import org.mockserver.integration.ClientAndServer;",
        "-import org.mockserver.model.Header;",
        " import org.springframework.beans.factory.annotation.Autowired;",
        " import org.springframework.boot.test.context.SpringBootTest;",
        " import org.springframework.boot.test.web.client.TestRestTemplate;",
        "@@ -16,9 +12,6 @@ import java.util.List;",
        " import java.util.Map;",
        " ",
        " import static org.assertj.core.api.Assertions.assertThat;",
        "-import static org.mockserver.integration.ClientAndServer.startClientAndServer;",
        "-import static org.mockserver.model.HttpRequest.request;",
        "-import static org.mockserver.model.HttpResponse.response;",
        " ",
        " @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)",
        " class CartControllerTest {",
        "@@ -26,92 +19,6 @@ class CartControllerTest {",
        "     @Autowired",
        "     private TestRestTemplate restTemplate;",
        " ",
        "-    private static ClientAndServer catalogueServer;",
        "-",
        "-    @BeforeAll",
        "-    static void startServer() {",
        "-        catalogueServer = startClientAndServer(80);",
        "-",
        "-        catalogueServer.when(request()",
        "-                        .withMethod(\"GET\")",
        "-                        .withPath(\"/catalogue/item/all/1,5\"))",
        "-                .respond(response()",
        "-                        .withStatusCode(200)",
        "-                        .withHeaders(new Header(\"Content-Type\", \"application/json; charset=utf-8\"))",
        "-                        .withBody(\"\"\"",
        "-                                [",
        "-                                  {",
        "-                                    \"id\":1,",
        "-                                    \"caption\":\"Leather Sofa\",",
        "-                                    \"description\":\"A very nice and comfortable sofa\"",
        "-                                  },",
        "-                                  {",
        "-                                    \"id\":5,",
        "-                                    \"caption\":\"LED TV\",",
        "-                                    \"description\":\"A very large TV set, ideal for those who love to binge-watch TV shows\"",
        "-                                  }",
        "-                                ]\"\"\"));",
        "-",
        "-        catalogueServer.when(request()",
        "-                        .withMethod(\"GET\")",
        "-                        .withPath(\"/catalogue/item/all/2,3,4\"))",
        "-                .respond(response()",
        "-                        .withStatusCode(200)",
        "-                        .withHeaders(new Header(\"Content-Type\", \"application/json; charset=utf-8\"))",
        "-                        .withBody(\"\"\"",
        "-                                [",
        "-                                  {",
        "-                                    \"id\":2,",
        "-                                    \"caption\":\"Wooden Table\",",
        "-                                    \"description\":\"A large table ideal for 6 to 8 people\"",
        "-                                  },",
        "-                                  {",
        "-                                    \"id\":3,",
        "-                                    \"caption\":\"Plastic Chair\",",
        "-                                    \"description\":\"A robust plastic chair ideal for children and adults alike\"",
        "-                                  },",
        "-                                  {",
        "-                                    \"id\":4,",
        "-                                    \"caption\":\"Mug\",",
        "-                                    \"description\":\"The ideal way to start the day\"",
        "-                                  }",
        "-                                ]\"\"\"));",
        "-",
        "-        catalogueServer.when(request()",
        "-                        .withMethod(\"GET\")",
        "-                        .withPath(\"/catalogue/item/all/4\"))",
        "-                .respond(response()",
        "-                        .withStatusCode(200)",
        "-                        .withHeaders(new Header(\"Content-Type\", \"application/json; charset=utf-8\"))",
        "-                        .withBody(\"\"\"",
        "-                                [",
        "-                                  {",
        "-                                    \"id\":4,",
        "-                                    \"caption\":\"Mug\",",
        "-                                    \"description\":\"The ideal way to start the day\"",
        "-                                  }",
        "-                                ]\"\"\"));",
        "-",
        "-        catalogueServer.when(request()",
        "-                        .withMethod(\"GET\")",
        "-                        .withPath(\"/catalogue/item/4\"))",
        "-                .respond(response()",
        "-                        .withStatusCode(200)",
        "-                        .withHeaders(new Header(\"Content-Type\", \"application/json; charset=utf-8\"))",
        "-                        .withBody(\"\"\"",
        "-                                {",
        "-                                  \"id\":4,",
        "-                                  \"caption\":\"Mug\",",
        "-                                  \"description\":\"The ideal way to start the day\"",
        "-                                }\"\"\"));",
        "-",
        "-        catalogueServer.when(request()",
        "-                        .withMethod(\"GET\")",
        "-                        .withPath(\"/catalogue/item/10\"))",
        "-                .respond(response()",
        "-                        .withStatusCode(404));",
        "-    }",
        "-",
        "     @Nested",
        "     class GetCartTest {",
        " ",
        "@@ -184,9 +91,4 @@ class CartControllerTest {",
        "             return restTemplate.postForEntity(\"/cart/%d/item/%d\".formatted(cartId, itemId), Map.of(), CartTo.class);",
        "         }",
        "     }",
        "-",
        "-    @AfterAll",
        "-    static void stopServer() {",
        "-        catalogueServer.stop();",
        "-    }",
        " }",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Command",
      "id": "62363b94-277e-40d2-9ccf-8c69cb1720fb",
      "commands": [
        "patch -f -p1 -u './pom.xml' << EOF",
        "--- a/pom.xml",
        "+++ b/pom.xml",
        "@@ -94,18 +94,6 @@",
        "             <artifactId>spring-boot-starter-test</artifactId>",
        "             <scope>test</scope>",
        "         </dependency>",
        "-        <dependency>",
        "-            <groupId>org.mock-server</groupId>",
        "-            <artifactId>mockserver-netty</artifactId>",
        "-            <version>5.15.0</version>",
        "-            <scope>test</scope>",
        "-        </dependency>",
        "-        <dependency>",
        "-            <groupId>org.mock-server</groupId>",
        "-            <artifactId>mockserver-client-java</artifactId>",
        "-            <version>5.15.0</version>",
        "-            <scope>test</scope>",
        "-        </dependency>",
        "     </dependencies>",
        " ",
        "     <build>",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Command",
      "id": "48ef3ae6-43a1-4ff2-888f-31b80ead93dc",
      "commands": [
        "mkdir -p './src/test/java/demo/external/catalogue'"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Command",
      "id": "21ae143c-711f-4298-83ea-b5c362168518",
      "commands": [
        "cat << EOF > './src/test/java/demo/external/catalogue/CatalogueItemMessageHandlerTest.java'",
        "package demo.external.catalogue;",
        "",
        "import org.junit.jupiter.api.Test;",
        "import org.springframework.amqp.core.Message;",
        "import org.springframework.amqp.core.MessageDeliveryMode;",
        "import org.springframework.amqp.core.MessageProperties;",
        "import org.springframework.amqp.rabbit.core.RabbitTemplate;",
        "import org.springframework.beans.factory.annotation.Autowired;",
        "import org.springframework.boot.test.context.SpringBootTest;",
        "",
        "import java.nio.charset.StandardCharsets;",
        "import java.util.Optional;",
        "import java.util.concurrent.TimeUnit;",
        "",
        "import static org.assertj.core.api.Assertions.assertThat;",
        "",
        "@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)",
        "class CatalogueItemMessageHandlerTest {",
        "",
        "    @Autowired",
        "    private RabbitTemplate rabbitTemplate;",
        "",
        "    @Autowired",
        "    private CatalogueRepository repository;",
        "",
        "    @Test",
        "    void saveTheNewCatalogueItemToDatabase() {",
        "        /* Given */",
        "        final long itemId = 6L;",
        "        final String itemCaption = \"Green Plant\";",
        "        assertThat(repository.findById(itemId))",
        "                .describedAs(\"Catalogue item %s with id %d should not exist before the message is sent\", itemCaption, itemId)",
        "                .isEmpty();",
        "",
        "        /* When */",
        "        rabbitTemplate.convertAndSend(\"demo-exchange\", \"demo.catalogue.new\", newCatalogueItemMessage(itemId, itemCaption, \"The description is dropped\"));",
        "        allowForTheMessageToBeDelivered();",
        "",
        "        /* Then */",
        "        final Optional<CatalogueItemEntity> item = repository.findById(itemId);",
        "        assertThat(item)",
        "                .describedAs(\"The item should be saved in the table\")",
        "                .isPresent();",
        "        assertThat(item.get())",
        "                .describedAs(\"The item should match the message data\")",
        "                .isEqualTo(new CatalogueItemEntity(itemId, itemCaption));",
        "    }",
        "",
        "    private static Message newCatalogueItemMessage(final long id, final String caption, final String description) {",
        "        /* TODO: Escape the text */",
        "        final byte[] body = \"\"\"",
        "                {\"id\":%d,\"caption\":\"%s\",\"description\":\"%s\"}\"\"\"",
        "                .formatted(id, caption, description)",
        "                .getBytes(StandardCharsets.UTF_8);",
        "",
        "        final MessageProperties properties = new MessageProperties();",
        "        properties.setHeader(\"__TypeId__\", \"demo.catalogue.CatalogueItemTo\");",
        "        properties.setContentType(\"application/json\");",
        "        properties.setContentEncoding(\"UTF-8\");",
        "        properties.setContentLength(body.length);",
        "        properties.setReceivedDeliveryMode(MessageDeliveryMode.PERSISTENT);",
        "        properties.setPriority(0);",
        "        properties.setRedelivered(false);",
        "        properties.setReceivedExchange(\"demo-exchange\");",
        "        properties.setReceivedRoutingKey(\"demo.catalogue.new\");",
        "        properties.setDeliveryTag(1);",
        "",
        "        return new Message(body, properties);",
        "    }",
        "",
        "    private static void allowForTheMessageToBeDelivered() {",
        "        try {",
        "            TimeUnit.MILLISECONDS.sleep(500);",
        "        } catch (final InterruptedException e) {",
        "            Thread.currentThread().interrupt();",
        "            throw new RuntimeException(\"Interrupted while waiting for the message to go through\", e);",
        "        }",
        "    }",
        "}",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Command",
      "id": "3e9b83d4-6593-41d2-a2ae-045df7c42f00",
      "commands": [
        "./mvnw clean verify"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Command",
      "id": "d2067c5b-c8a0-4525-88f1-22685f8e1d3d",
      "commands": [
        "MESSAGE='Consume new catalogue item events'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message '...' \\",
        "  --message 'This is the second step towards a loosely coupled distributed architecture.'",
        "git tag --annotate 'v5.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-cart"
    },
    {
      "type": "Heading",
      "id": "976953c6-089a-4456-a4d8-2ecf79e43b12",
      "level": "H4",
      "title": "Step 3: Refactor the catalogue so that it only exposes the necessary endpoints (_shrink_)"
    },
    {
      "type": "Todo",
      "id": "e55e4920-d07a-40a0-94a9-a1fe30a4a733",
      "comments": [
        "Commit the changes to the cart project"
      ]
    },
    {
      "type": "Markdown",
      "id": "c134b82b-642d-4c4a-b79c-3d38a7b3d916",
      "contents": [
        "Let’s tag the project state before making any changes so that we can always come back to this point if needs be."
      ],
      "tags": [
        "git",
        "optional"
      ]
    },
    {
      "type": "Command",
      "id": "8807473c-a3b6-4f53-b989-cee8f3f30826",
      "commands": [
        "git tag --annotate 'v6.0' --message 'Before removing fetch multiple catalogue items endpoint'"
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Command",
      "id": "7f62ba2c-73bf-45ed-b250-e5c754c4b6e0",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/catalogue/CatalogueItemService.java' << EOF",
        "--- a/src/main/java/demo/catalogue/CatalogueItemService.java",
        "+++ b/src/main/java/demo/catalogue/CatalogueItemService.java",
        "@@ -2,9 +2,7 @@ package demo.catalogue;",
        " ",
        " import org.springframework.stereotype.Service;",
        " ",
        "-import java.util.List;",
        " import java.util.Optional;",
        "-import java.util.Set;",
        " ",
        " import static java.util.Objects.requireNonNull;",
        " ",
        "@@ -23,10 +21,6 @@ public class CatalogueItemService {",
        "         return repository.findById(id);",
        "     }",
        " ",
        "-    public List<CatalogueItemEntity> findAllById(final Set<Long> id) {",
        "-        return repository.findAllById(id);",
        "-    }",
        "-",
        "     public CatalogueItemEntity add(final CatalogueItemEntity entity) {",
        "         requireNonNull(entity, \"Entity cannot be null\");",
        "         final CatalogueItemEntity saved = repository.save(entity);",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Command",
      "id": "37d8e25a-4cf2-43fb-8840-5c3a21bf2487",
      "commands": [
        "patch -f -p1 -u './src/main/java/demo/catalogue/CatalogueItemController.java' << EOF",
        "--- a/src/main/java/demo/catalogue/CatalogueItemController.java",
        "+++ b/src/main/java/demo/catalogue/CatalogueItemController.java",
        "@@ -9,9 +9,6 @@ import org.springframework.web.bind.annotation.RequestMapping;",
        " import org.springframework.web.bind.annotation.RestController;",
        " ",
        " import java.net.URI;",
        "-import java.util.List;",
        "-import java.util.Set;",
        "-import java.util.stream.Collectors;",
        " ",
        " import static java.util.Objects.requireNonNull;",
        " ",
        "@@ -33,14 +30,6 @@ public class CatalogueItemController {",
        "                 .orElseGet(() -> ResponseEntity.notFound().build());",
        "     }",
        " ",
        "-    @GetMapping(\"/all/{id}\")",
        "-    public ResponseEntity<List<CatalogueItemTo>> getAll(@PathVariable(value = \"id\") final Set<Long> ids) {",
        "-        return ResponseEntity.ok(",
        "-                service.findAllById(ids).stream()",
        "-                        .map(CatalogueItemTo::of)",
        "-                        .collect(Collectors.toList()));",
        "-    }",
        "-",
        "     @PostMapping()",
        "     public ResponseEntity<CatalogueItemTo> add(@RequestBody final NewCatalogueItemTo item) {",
        "         return item.toEntity()",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Command",
      "id": "a16af727-5dd0-45d5-98b3-264a840d10c4",
      "commands": [
        "patch -f -p1 -u './src/test/java/demo/catalogue/CatalogueItemControllerTest.java' << EOF",
        "--- a/src/test/java/demo/catalogue/CatalogueItemControllerTest.java",
        "+++ b/src/test/java/demo/catalogue/CatalogueItemControllerTest.java",
        "@@ -7,17 +7,12 @@ import org.springframework.amqp.rabbit.core.RabbitTemplate;",
        " import org.springframework.beans.factory.annotation.Autowired;",
        " import org.springframework.boot.test.context.SpringBootTest;",
        " import org.springframework.boot.test.web.client.TestRestTemplate;",
        "-import org.springframework.core.ParameterizedTypeReference;",
        "-import org.springframework.http.HttpMethod;",
        " import org.springframework.http.HttpStatus;",
        " import org.springframework.http.ResponseEntity;",
        " ",
        " import java.nio.charset.StandardCharsets;",
        "-import java.util.List;",
        " import java.util.concurrent.TimeUnit;",
        " import java.util.regex.Pattern;",
        "-import java.util.stream.Collectors;",
        "-import java.util.stream.LongStream;",
        " ",
        " import static org.assertj.core.api.Assertions.assertThat;",
        " ",
        "@@ -51,59 +46,6 @@ class CatalogueItemControllerTest {",
        "         }",
        "     }",
        " ",
        "-    @Nested",
        "-    class GetAllCatalogueItemsTest {",
        "-",
        "-        @Test",
        "-        void returnTheCatalogueItemsWithTheGivenExistingId() {",
        "-            final ResponseEntity<List<CatalogueItemTo>> response = getCatalogueItemsWithId(1, 2, 3, 4);",
        "-            assertThat(response.getStatusCode())",
        "-                    .isEqualTo(HttpStatus.OK);",
        "-            assertThat(response.getBody()) /* TODO: May need to sort the result */",
        "-                    .isEqualTo(List.of(",
        "-                            new CatalogueItemTo(1L, \"Leather Sofa\", \"A very nice and comfortable sofa\"),",
        "-                            new CatalogueItemTo(2L, \"Wooden Table\", \"A large table ideal for 6 to 8 people\"),",
        "-                            new CatalogueItemTo(3L, \"Plastic Chair\", \"A robust plastic chair ideal for children and adults alike\"),",
        "-                            new CatalogueItemTo(4L, \"Mug\", \"The ideal way to start the day\")",
        "-                    ));",
        "-        }",
        "-",
        "-        @Test",
        "-        void returnTheSameItemOnceEvenWhenItsIdIsProvidedMultipleTimes() {",
        "-            final ResponseEntity<List<CatalogueItemTo>> response = getCatalogueItemsWithId(1, 1, 1, 1);",
        "-            assertThat(response.getStatusCode())",
        "-                    .isEqualTo(HttpStatus.OK);",
        "-            assertThat(response.getBody())",
        "-                    .isEqualTo(List.of(",
        "-                            new CatalogueItemTo(1L, \"Leather Sofa\", \"A very nice and comfortable sofa\")",
        "-                    ));",
        "-        }",
        "-",
        "-        @Test",
        "-        void returnOnlyTheFoundWhenGivenAnIdThatDoesNotExists() {",
        "-            final ResponseEntity<List<CatalogueItemTo>> response = getCatalogueItemsWithId(1, 10);",
        "-            assertThat(response.getStatusCode())",
        "-                    .isEqualTo(HttpStatus.OK);",
        "-            assertThat(response.getBody())",
        "-                    .isEqualTo(List.of(new CatalogueItemTo(1L, \"Leather Sofa\", \"A very nice and comfortable sofa\")));",
        "-        }",
        "-",
        "-        @Test",
        "-        void returnEmptyListWhenGivenAnIdThatDoesNotExists() {",
        "-            final ResponseEntity<List<CatalogueItemTo>> response = getCatalogueItemsWithId(10);",
        "-            assertThat(response.getStatusCode())",
        "-                    .isEqualTo(HttpStatus.OK);",
        "-            assertThat(response.getBody())",
        "-                    .isEqualTo(List.of());",
        "-        }",
        "-",
        "-        private ResponseEntity<List<CatalogueItemTo>> getCatalogueItemsWithId(final long... ids) {",
        "-            final String stringIds = LongStream.of(ids).mapToObj(String::valueOf).collect(Collectors.joining(\",\"));",
        "-            final ParameterizedTypeReference<List<CatalogueItemTo>> type = new ParameterizedTypeReference<>() {};",
        "-            return restTemplate.exchange(\"/catalogue/item/all/%s\".formatted(stringIds), HttpMethod.GET, null, type);",
        "-        }",
        "-    }",
        "-",
        "     @Nested",
        "     class AddCatalogueItemTest {",
        "EOF"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Command",
      "id": "33ec9e2e-efbf-49ec-9a4e-0abe68f15110",
      "commands": [
        "./mvnw clean verify"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Command",
      "id": "680c9f37-35fb-467d-bc31-20511f8d2a22",
      "commands": [
        "MESSAGE='Remove fetch multiple catalogue items endpoint'",
        "git add .",
        "git commit \\",
        "  --message \"${MESSAGE}\" \\",
        "  --message '...' \\",
        "  --message 'This is the third step towards a loosely coupled distributed architecture.'",
        "git tag --annotate 'v6.1' --message \"${MESSAGE}\""
      ],
      "tags": [
        "git",
        "optional"
      ],
      "working_dir": "demo-application-catalogue"
    },
    {
      "type": "Heading",
      "id": "2400a7a8-361d-4075-91a2-08b500a00455",
      "level": "H3",
      "title": "Try the application"
    },
    {
      "type": "Command",
      "id": "e3c3477c-ee66-49f2-9120-495b32c49e19",
      "commands": [
        "docker run \\",
        "  --rm \\",
        "  --detach \\",
        "  --name 'demo-application-jaeger' \\",
        "  --env COLLECTOR_ZIPKIN_HOST_PORT=:9411 \\",
        "  --publish 4317:4317 \\",
        "  --publish 4318:4318 \\",
        "  --publish 9411:9411 \\",
        "  --publish 16686:16686 \\",
        "  'jaegertracing/all-in-one:1.57.0'",
        "",
        "# Wait for Jaeger to start",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost:16686/search')\" -ne '200' ]; do echo 'Waiting for Jaeger to start'; sleep 1; done"
      ],
      "on_failure_commands": [
        "docker stop demo-application-messaging-queue",
        "docker stop demo-application-jaeger"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Command",
      "id": "d1dcb2c7-d8c1-4272-a8cc-81b72db473ae",
      "commands": [
        "docker run \\",
        "  --rm \\",
        "  --detach \\",
        "  --name 'demo-application-reverse-proxy' \\",
        "  --publish 80:80 \\",
        "  'demo-application-reverse-proxy:v3'",
        "",
        "# Wait for Nginx to start",
        "# The reverse proxy is configured to only redirect to the cart and catalogue endpoints, thus any other requests will yield a 404",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost/')\" -ne '404' ]; do echo 'Waiting for the reverse proxy to start'; sleep 1; done"
      ],
      "on_failure_commands": [
        "docker cp demo-application-reverse-proxy:/etc/nginx/conf.d/default.conf ./default-error.conf",
        "docker stop demo-application-messaging-queue",
        "docker stop demo-application-reverse-proxy",
        "docker stop demo-application-jaeger"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Markdown",
      "id": "1aeb7c20-1204-4b54-a770-bb6381cb33da",
      "contents": [
        "Copy both JAR files to the `demo-application-reverse-proxy/target` directory (for convenience), start both applications and make a few requests. This generates the trace data and sends it to our Jaeger instance."
      ]
    },
    {
      "type": "Command",
      "id": "0121acca-80c1-4868-8144-4cabd336ea44",
      "commands": [
        "# Copy the JAR files into the same location for convenience",
        "rm -rf './demo'",
        "mkdir './demo'",
        "cp '../demo-application-cart/target/demo-application-cart-0.0.1-SNAPSHOT.jar' './demo'",
        "cp '../demo-application-catalogue/target/demo-application-catalogue-0.0.1-SNAPSHOT.jar' './demo'",
        "",
        "# This command is blocking for an unknown reason!!!",
        "# Start the catalogue application in the background and wait for it to be ready",
        "java -jar './demo/demo-application-catalogue-0.0.1-SNAPSHOT.jar' > './demo/catalogue-output.txt' 2>&1 &",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost/catalogue/item/1')\" -ne '200' ]; do echo 'Waiting for the catalogue application to start'; sleep 1; done",
        "",
        "# This command is blocking for an unknown reason!!!",
        "# Start the cart application in the background and wait for it to be ready",
        "java -jar './demo/demo-application-cart-0.0.1-SNAPSHOT.jar' > './demo/cart-output.txt' 2>&1 &",
        "while [ \"$(curl --silent --output /dev/null --write-out '%{http_code}' 'http://localhost/cart/1')\" -ne '200' ]; do echo 'Waiting for the cart application to start'; sleep 1; done"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "docker stop demo-application-messaging-queue",
        "docker stop demo-application-reverse-proxy",
        "docker stop demo-application-jaeger"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Command",
      "id": "a16c8124-1ccb-4b65-9abf-9eef6d256849",
      "commands": [
        "# Save the response in a file as we will use it later on",
        "curl --silent \\",
        "  -X POST 'http://localhost/catalogue/item' \\",
        "  -H 'Content-Type: application/json' \\",
        "  -d '{\"caption\":\"Green Plant\",\"description\":\"Put a little life in your living room!!\"}' \\",
        "  | jq \\",
        "  > new-catalogue-item.json",
        "",
        "# Print the output",
        "jq . new-catalogue-item.json"
      ],
      "output": {
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "docker stop demo-application-messaging-queue",
        "docker stop demo-application-reverse-proxy",
        "docker stop demo-application-jaeger"
      ]
    },
    {
      "type": "Command",
      "id": "ac734fdd-b9e0-48fe-8610-3ae93d0090bf",
      "commands": [
        "# Print the new catalogue item id",
        "ITEM_ID=\"$(jq .id new-catalogue-item.json)\"",
        "echo \"New catalogue item id: ${ITEM_ID}\""
      ],
      "output": {
        "caption": "The newly created catalogue item id"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "docker stop demo-application-messaging-queue",
        "docker stop demo-application-reverse-proxy",
        "docker stop demo-application-jaeger"
      ]
    },
    {
      "type": "Command",
      "id": "5feb7914-e44b-479b-aab4-1cca09105018",
      "commands": [
        "curl --silent 'http://localhost/cart/3' | jq"
      ],
      "output": {
        "caption": "The current cart contents",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "docker stop demo-application-messaging-queue",
        "docker stop demo-application-reverse-proxy",
        "docker stop demo-application-jaeger"
      ]
    },
    {
      "type": "Command",
      "id": "d84c359b-9f2f-411a-8595-c18dd7623f76",
      "commands": [
        "# Read the new item id obtained from the previous command",
        "ITEM_ID=\"$(jq .id new-catalogue-item.json)\"",
        "",
        "# Fetch the new catalogue item",
        "curl --silent \"http://localhost/catalogue/item/${ITEM_ID}\" | jq"
      ],
      "output": {
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "docker stop demo-application-messaging-queue",
        "docker stop demo-application-reverse-proxy",
        "docker stop demo-application-jaeger"
      ]
    },
    {
      "type": "Command",
      "id": "01a68a9b-c052-42c2-9d79-e051148c67b4",
      "commands": [
        "# Read the new item id obtained from the previous command",
        "ITEM_ID=\"$(jq .id new-catalogue-item.json)\"",
        "",
        "# Add the new item to cart with id 3",
        "curl --silent -X POST \"http://localhost/cart/3/item/${ITEM_ID}\" | jq"
      ],
      "output": {
        "caption": "The cart contents after adding the newly created catalogue item.",
        "content_type": "json"
      },
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "docker stop demo-application-messaging-queue",
        "docker stop demo-application-reverse-proxy",
        "docker stop demo-application-jaeger"
      ]
    },
    {
      "type": "Command",
      "id": "8a6f726b-18b1-417e-a050-1a1fab7d3ed7",
      "commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "docker stop demo-application-messaging-queue",
        "docker stop demo-application-reverse-proxy",
        "docker stop demo-application-jaeger"
      ],
      "on_failure_commands": [
        "kill \"$(jcmd | grep 'demo-application-cart-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "kill \"$(jcmd | grep 'demo-application-catalogue-0.0.1-SNAPSHOT.jar' | cut -d' ' -f1)\"",
        "docker stop demo-application-messaging-queue",
        "docker stop demo-application-reverse-proxy",
        "docker stop demo-application-jaeger"
      ],
      "working_dir": "demo-application-reverse-proxy"
    },
    {
      "type": "Heading",
      "id": "167e7c6c-0696-4176-9b55-9416f72e79ac",
      "level": "H3",
      "title": "Loosely Coupled Distributed Architecture tradeoffs"
    },
    {
      "type": "Markdown",
      "id": "9d64ff66-684a-4fe3-ad8d-f621e4be54dc",
      "contents": [
        "To be continued..."
      ]
    }
  ]
}